
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  emailVerified: 'emailVerified',
  profilePicture: 'profilePicture',
  username: 'username',
  password: 'password',
  inviteCode: 'inviteCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  timezone: 'timezone',
  reminderTime: 'reminderTime'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.PartnershipScalarFieldEnum = {
  id: 'id',
  initiatorId: 'initiatorId',
  receiverId: 'receiverId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HabitScalarFieldEnum = {
  id: 'id',
  partnershipId: 'partnershipId',
  createdById: 'createdById',
  name: 'name',
  description: 'description',
  category: 'category',
  frequency: 'frequency',
  customDays: 'customDays',
  duration: 'duration',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  currentTurn: 'currentTurn',
  streakCount: 'streakCount',
  totalDays: 'totalDays',
  mulligansUsed: 'mulligansUsed',
  maxMulligans: 'maxMulligans',
  lastPassedBy: 'lastPassedBy',
  passedAt: 'passedAt',
  passCount: 'passCount',
  dismissedAt: 'dismissedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChallengeScalarFieldEnum = {
  id: 'id',
  habitId: 'habitId',
  creatorId: 'creatorId',
  title: 'title',
  description: 'description',
  dueDate: 'dueDate',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ChallengeCompletionScalarFieldEnum = {
  id: 'id',
  challengeId: 'challengeId',
  userId: 'userId',
  status: 'status',
  completedAt: 'completedAt',
  feelingTags: 'feelingTags',
  reflectionNote: 'reflectionNote',
  reflectionPrompt: 'reflectionPrompt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  partnershipId: 'partnershipId',
  senderId: 'senderId',
  content: 'content',
  messageType: 'messageType',
  createdAt: 'createdAt'
};

exports.Prisma.NudgeScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  nudgeType: 'nudgeType',
  message: 'message',
  createdAt: 'createdAt'
};

exports.Prisma.InspirationPostScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  content: 'content',
  category: 'category',
  isAnonymous: 'isAnonymous',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.InspirationReactionScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  reaction: 'reaction',
  createdAt: 'createdAt'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  iconName: 'iconName',
  category: 'category',
  requirement: 'requirement',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId',
  earnedAt: 'earnedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  read: 'read',
  actionUrl: 'actionUrl',
  createdAt: 'createdAt',
  readAt: 'readAt'
};

exports.Prisma.NotificationSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  endpoint: 'endpoint',
  p256dh: 'p256dh',
  auth: 'auth',
  userAgent: 'userAgent',
  isActive: 'isActive',
  createdAt: 'createdAt',
  lastUsed: 'lastUsed'
};

exports.Prisma.NotificationPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  inAppEnabled: 'inAppEnabled',
  pushEnabled: 'pushEnabled',
  buddyInvites: 'buddyInvites',
  goalCompleted: 'goalCompleted',
  goalSet: 'goalSet',
  habitApproval: 'habitApproval',
  newMessages: 'newMessages',
  streakReminders: 'streakReminders',
  weeklyProgress: 'weeklyProgress',
  emailEnabled: 'emailEnabled',
  emailBuddyInvites: 'emailBuddyInvites',
  emailWeeklyDigest: 'emailWeeklyDigest',
  emailStreakReminders: 'emailStreakReminders',
  quietHoursStart: 'quietHoursStart',
  quietHoursEnd: 'quietHoursEnd',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.PartnershipStatus = exports.$Enums.PartnershipStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.HabitStatus = exports.$Enums.HabitStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ChallengeStatus = exports.$Enums.ChallengeStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  EXPIRED: 'EXPIRED',
  SKIPPED: 'SKIPPED'
};

exports.CompletionStatus = exports.$Enums.CompletionStatus = {
  COMPLETED: 'COMPLETED',
  MISSED: 'MISSED',
  SKIPPED: 'SKIPPED'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  STICKER: 'STICKER',
  SYSTEM: 'SYSTEM'
};

exports.NudgeType = exports.$Enums.NudgeType = {
  ENCOURAGEMENT: 'ENCOURAGEMENT',
  REMINDER: 'REMINDER',
  CELEBRATION: 'CELEBRATION',
  CUSTOM: 'CUSTOM'
};

exports.ReactionType = exports.$Enums.ReactionType = {
  HEART: 'HEART',
  LAUGH: 'LAUGH',
  PRAY: 'PRAY'
};

exports.BadgeCategory = exports.$Enums.BadgeCategory = {
  STREAK: 'STREAK',
  MILESTONE: 'MILESTONE',
  ENCOURAGEMENT: 'ENCOURAGEMENT',
  SPECIAL: 'SPECIAL'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  BUDDY_INVITE_RECEIVED: 'BUDDY_INVITE_RECEIVED',
  BUDDY_INVITE_ACCEPTED: 'BUDDY_INVITE_ACCEPTED',
  GOAL_SET_FOR_YOU: 'GOAL_SET_FOR_YOU',
  GOAL_COMPLETED_BY_BUDDY: 'GOAL_COMPLETED_BY_BUDDY',
  HABIT_NEEDS_APPROVAL: 'HABIT_NEEDS_APPROVAL',
  HABIT_APPROVED: 'HABIT_APPROVED',
  HABIT_REJECTED: 'HABIT_REJECTED',
  NEW_MESSAGE: 'NEW_MESSAGE',
  STREAK_REMINDER: 'STREAK_REMINDER',
  WEEKLY_PROGRESS: 'WEEKLY_PROGRESS',
  TURN_TO_SET_GOAL: 'TURN_TO_SET_GOAL',
  PARTNERSHIP_PAUSED: 'PARTNERSHIP_PAUSED',
  PARTNERSHIP_RESUMED: 'PARTNERSHIP_RESUMED'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  VerificationToken: 'VerificationToken',
  Partnership: 'Partnership',
  Habit: 'Habit',
  Challenge: 'Challenge',
  ChallengeCompletion: 'ChallengeCompletion',
  Message: 'Message',
  Nudge: 'Nudge',
  InspirationPost: 'InspirationPost',
  InspirationReaction: 'InspirationReaction',
  Badge: 'Badge',
  UserBadge: 'UserBadge',
  Notification: 'Notification',
  NotificationSubscription: 'NotificationSubscription',
  NotificationPreferences: 'NotificationPreferences'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
