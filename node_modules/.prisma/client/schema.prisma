// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  firstName      String?
  lastName       String?
  email          String    @unique
  emailVerified  DateTime?
  profilePicture String? // URL to profile picture (could be uploaded file or avatar service)
  username       String?   @unique
  password       String? // For password authentication
  inviteCode     String?   @unique @default(cuid()) // Personal invite link
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Preferences
  timezone     String  @default("UTC")
  reminderTime String? // Format: "HH:mm"

  // Account relations
  accounts Account[]
  sessions Session[]

  // Partnership relations
  initiatedPartnerships Partnership[] @relation("PartnershipInitiator")
  receivedPartnerships  Partnership[] @relation("PartnershipReceiver")

  // Habit relations
  habitsCreated Habit[] @relation("HabitCreator")

  // Challenge relations
  challengesCreated    Challenge[]           @relation("ChallengeCreator")
  challengeCompletions ChallengeCompletion[]

  // Chat relations
  sentMessages Message[] @relation("MessageSender")

  // Inspiration posts
  inspirationPosts     InspirationPost[]
  inspirationReactions InspirationReaction[]

  // Nudges
  sentNudges     Nudge[] @relation("NudgeSender")
  receivedNudges Nudge[] @relation("NudgeReceiver")

  // Notifications
  notifications             Notification[]
  notificationSubscriptions NotificationSubscription[]
  notificationPreferences   NotificationPreferences?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Partnership {
  id          String            @id @default(cuid())
  initiatorId String
  receiverId  String
  status      PartnershipStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  initiator User      @relation("PartnershipInitiator", fields: [initiatorId], references: [id])
  receiver  User      @relation("PartnershipReceiver", fields: [receiverId], references: [id])
  habits    Habit[] // Multiple habits per partnership
  messages  Message[]

  @@unique([initiatorId, receiverId])
}

model Habit {
  id            String      @id @default(cuid())
  partnershipId String
  createdById   String
  name          String
  description   String?
  category      String?
  frequency     String      @default("DAILY") // DAILY, WEEKDAYS, CUSTOM
  customDays    String? // JSON array of day numbers if custom
  duration      Int? // Days (null = forever)
  startDate     DateTime?
  endDate       DateTime?
  status        HabitStatus @default(ACTIVE)

  // Current state
  currentTurn   String? // User ID whose turn it is to set goal
  streakCount   Int     @default(0)
  totalDays     Int     @default(0)
  mulligansUsed Int     @default(0)
  maxMulligans  Int     @default(1)

  // Pass functionality
  lastPassedBy String? // User ID who last passed their turn
  passedAt     DateTime? // When the last pass happened
  passCount    Int       @default(0) // Total number of passes for this habit

  // Notification tracking
  dismissedAt DateTime? // When user dismissed a declined habit notification

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  partnership Partnership @relation(fields: [partnershipId], references: [id])
  createdBy   User        @relation("HabitCreator", fields: [createdById], references: [id])
  challenges  Challenge[]

  @@index([partnershipId])
}

model Challenge {
  id          String          @id @default(cuid())
  habitId     String
  creatorId   String
  title       String
  description String?
  dueDate     DateTime
  status      ChallengeStatus @default(ACTIVE)
  createdAt   DateTime        @default(now())

  // Relations
  habit       Habit                 @relation(fields: [habitId], references: [id])
  creator     User                  @relation("ChallengeCreator", fields: [creatorId], references: [id])
  completions ChallengeCompletion[]

  @@index([habitId])
  @@index([dueDate])
}

model ChallengeCompletion {
  id          String           @id @default(cuid())
  challengeId String
  userId      String
  status      CompletionStatus @default(COMPLETED)
  completedAt DateTime         @default(now())

  // Reflection data
  feelingTags      String? // JSON array of selected feeling tags
  reflectionNote   String?
  reflectionPrompt String?

  // Relations
  challenge Challenge @relation(fields: [challengeId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([challengeId, userId])
}

model Message {
  id            String      @id @default(cuid())
  partnershipId String
  senderId      String
  content       String
  messageType   MessageType @default(TEXT)
  createdAt     DateTime    @default(now())

  // Relations
  partnership Partnership @relation(fields: [partnershipId], references: [id])
  sender      User        @relation("MessageSender", fields: [senderId], references: [id])

  @@index([partnershipId])
}

model Nudge {
  id         String    @id @default(cuid())
  senderId   String
  receiverId String
  nudgeType  NudgeType
  message    String?
  createdAt  DateTime  @default(now())

  // Relations
  sender   User @relation("NudgeSender", fields: [senderId], references: [id])
  receiver User @relation("NudgeReceiver", fields: [receiverId], references: [id])
}

model InspirationPost {
  id          String   @id @default(cuid())
  authorId    String
  content     String
  category    String?
  isAnonymous Boolean  @default(true)
  expiresAt   DateTime // Auto-expire after 48 hours
  createdAt   DateTime @default(now())

  // Relations
  author    User                  @relation(fields: [authorId], references: [id])
  reactions InspirationReaction[]

  @@index([expiresAt])
}

model InspirationReaction {
  id        String       @id @default(cuid())
  postId    String
  userId    String
  reaction  ReactionType
  createdAt DateTime     @default(now())

  // Relations
  post InspirationPost @relation(fields: [postId], references: [id])
  user User            @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model Badge {
  id          String        @id @default(cuid())
  name        String        @unique
  description String
  iconName    String // Icon identifier
  category    BadgeCategory
  requirement String // Description of how to earn
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())

  @@unique([userId, badgeId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      String? // JSON data for action buttons, deep links, etc.
  read      Boolean          @default(false)
  actionUrl String? // Deep link URL for when notification is clicked
  createdAt DateTime         @default(now())
  readAt    DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
}

model NotificationSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  p256dh    String // Push subscription key
  auth      String // Push subscription auth
  userAgent String? // Browser/device info
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model NotificationPreferences {
  id     String @id @default(cuid())
  userId String @unique

  // In-app notifications
  inAppEnabled Boolean @default(true)

  // Push notifications  
  pushEnabled     Boolean @default(true)
  buddyInvites    Boolean @default(true)
  goalCompleted   Boolean @default(true)
  goalSet         Boolean @default(true)
  habitApproval   Boolean @default(true)
  newMessages     Boolean @default(true)
  streakReminders Boolean @default(true)
  weeklyProgress  Boolean @default(true)

  // Email notifications
  emailEnabled         Boolean @default(true)
  emailBuddyInvites    Boolean @default(true)
  emailWeeklyDigest    Boolean @default(true)
  emailStreakReminders Boolean @default(false)

  // Timing preferences
  quietHoursStart String? // "22:00" format
  quietHoursEnd   String? // "08:00" format
  timezone        String  @default("UTC")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum PartnershipStatus {
  PENDING
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum HabitStatus {
  PENDING
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ChallengeStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  SKIPPED
}

enum CompletionStatus {
  COMPLETED
  MISSED
  SKIPPED
}

enum MessageType {
  TEXT
  STICKER
  SYSTEM
}

enum NudgeType {
  ENCOURAGEMENT
  REMINDER
  CELEBRATION
  CUSTOM
}

enum ReactionType {
  HEART
  LAUGH
  PRAY
}

enum BadgeCategory {
  STREAK
  MILESTONE
  ENCOURAGEMENT
  SPECIAL
}

enum NotificationType {
  BUDDY_INVITE_RECEIVED
  BUDDY_INVITE_ACCEPTED
  GOAL_SET_FOR_YOU
  GOAL_COMPLETED_BY_BUDDY
  HABIT_NEEDS_APPROVAL
  HABIT_APPROVED
  HABIT_REJECTED
  NEW_MESSAGE
  STREAK_REMINDER
  WEEKLY_PROGRESS
  TURN_TO_SET_GOAL
  PARTNERSHIP_PAUSED
  PARTNERSHIP_RESUMED
}
