
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model Partnership
 * 
 */
export type Partnership = $Result.DefaultSelection<Prisma.$PartnershipPayload>
/**
 * Model Habit
 * 
 */
export type Habit = $Result.DefaultSelection<Prisma.$HabitPayload>
/**
 * Model Challenge
 * 
 */
export type Challenge = $Result.DefaultSelection<Prisma.$ChallengePayload>
/**
 * Model ChallengeCompletion
 * 
 */
export type ChallengeCompletion = $Result.DefaultSelection<Prisma.$ChallengeCompletionPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model Nudge
 * 
 */
export type Nudge = $Result.DefaultSelection<Prisma.$NudgePayload>
/**
 * Model InspirationPost
 * 
 */
export type InspirationPost = $Result.DefaultSelection<Prisma.$InspirationPostPayload>
/**
 * Model InspirationReaction
 * 
 */
export type InspirationReaction = $Result.DefaultSelection<Prisma.$InspirationReactionPayload>
/**
 * Model Badge
 * 
 */
export type Badge = $Result.DefaultSelection<Prisma.$BadgePayload>
/**
 * Model UserBadge
 * 
 */
export type UserBadge = $Result.DefaultSelection<Prisma.$UserBadgePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const PartnershipStatus: {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type PartnershipStatus = (typeof PartnershipStatus)[keyof typeof PartnershipStatus]


export const HabitStatus: {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type HabitStatus = (typeof HabitStatus)[keyof typeof HabitStatus]


export const ChallengeStatus: {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  EXPIRED: 'EXPIRED',
  SKIPPED: 'SKIPPED'
};

export type ChallengeStatus = (typeof ChallengeStatus)[keyof typeof ChallengeStatus]


export const CompletionStatus: {
  COMPLETED: 'COMPLETED',
  MISSED: 'MISSED',
  SKIPPED: 'SKIPPED'
};

export type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus]


export const MessageType: {
  TEXT: 'TEXT',
  STICKER: 'STICKER',
  SYSTEM: 'SYSTEM'
};

export type MessageType = (typeof MessageType)[keyof typeof MessageType]


export const NudgeType: {
  ENCOURAGEMENT: 'ENCOURAGEMENT',
  REMINDER: 'REMINDER',
  CELEBRATION: 'CELEBRATION',
  CUSTOM: 'CUSTOM'
};

export type NudgeType = (typeof NudgeType)[keyof typeof NudgeType]


export const ReactionType: {
  HEART: 'HEART',
  LAUGH: 'LAUGH',
  PRAY: 'PRAY'
};

export type ReactionType = (typeof ReactionType)[keyof typeof ReactionType]


export const BadgeCategory: {
  STREAK: 'STREAK',
  MILESTONE: 'MILESTONE',
  ENCOURAGEMENT: 'ENCOURAGEMENT',
  SPECIAL: 'SPECIAL'
};

export type BadgeCategory = (typeof BadgeCategory)[keyof typeof BadgeCategory]

}

export type PartnershipStatus = $Enums.PartnershipStatus

export const PartnershipStatus: typeof $Enums.PartnershipStatus

export type HabitStatus = $Enums.HabitStatus

export const HabitStatus: typeof $Enums.HabitStatus

export type ChallengeStatus = $Enums.ChallengeStatus

export const ChallengeStatus: typeof $Enums.ChallengeStatus

export type CompletionStatus = $Enums.CompletionStatus

export const CompletionStatus: typeof $Enums.CompletionStatus

export type MessageType = $Enums.MessageType

export const MessageType: typeof $Enums.MessageType

export type NudgeType = $Enums.NudgeType

export const NudgeType: typeof $Enums.NudgeType

export type ReactionType = $Enums.ReactionType

export const ReactionType: typeof $Enums.ReactionType

export type BadgeCategory = $Enums.BadgeCategory

export const BadgeCategory: typeof $Enums.BadgeCategory

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs>;

  /**
   * `prisma.partnership`: Exposes CRUD operations for the **Partnership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partnerships
    * const partnerships = await prisma.partnership.findMany()
    * ```
    */
  get partnership(): Prisma.PartnershipDelegate<ExtArgs>;

  /**
   * `prisma.habit`: Exposes CRUD operations for the **Habit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Habits
    * const habits = await prisma.habit.findMany()
    * ```
    */
  get habit(): Prisma.HabitDelegate<ExtArgs>;

  /**
   * `prisma.challenge`: Exposes CRUD operations for the **Challenge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Challenges
    * const challenges = await prisma.challenge.findMany()
    * ```
    */
  get challenge(): Prisma.ChallengeDelegate<ExtArgs>;

  /**
   * `prisma.challengeCompletion`: Exposes CRUD operations for the **ChallengeCompletion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChallengeCompletions
    * const challengeCompletions = await prisma.challengeCompletion.findMany()
    * ```
    */
  get challengeCompletion(): Prisma.ChallengeCompletionDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.nudge`: Exposes CRUD operations for the **Nudge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nudges
    * const nudges = await prisma.nudge.findMany()
    * ```
    */
  get nudge(): Prisma.NudgeDelegate<ExtArgs>;

  /**
   * `prisma.inspirationPost`: Exposes CRUD operations for the **InspirationPost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InspirationPosts
    * const inspirationPosts = await prisma.inspirationPost.findMany()
    * ```
    */
  get inspirationPost(): Prisma.InspirationPostDelegate<ExtArgs>;

  /**
   * `prisma.inspirationReaction`: Exposes CRUD operations for the **InspirationReaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InspirationReactions
    * const inspirationReactions = await prisma.inspirationReaction.findMany()
    * ```
    */
  get inspirationReaction(): Prisma.InspirationReactionDelegate<ExtArgs>;

  /**
   * `prisma.badge`: Exposes CRUD operations for the **Badge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Badges
    * const badges = await prisma.badge.findMany()
    * ```
    */
  get badge(): Prisma.BadgeDelegate<ExtArgs>;

  /**
   * `prisma.userBadge`: Exposes CRUD operations for the **UserBadge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBadges
    * const userBadges = await prisma.userBadge.findMany()
    * ```
    */
  get userBadge(): Prisma.UserBadgeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Session: 'Session',
    User: 'User',
    VerificationToken: 'VerificationToken',
    Partnership: 'Partnership',
    Habit: 'Habit',
    Challenge: 'Challenge',
    ChallengeCompletion: 'ChallengeCompletion',
    Message: 'Message',
    Nudge: 'Nudge',
    InspirationPost: 'InspirationPost',
    InspirationReaction: 'InspirationReaction',
    Badge: 'Badge',
    UserBadge: 'UserBadge'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "account" | "session" | "user" | "verificationToken" | "partnership" | "habit" | "challenge" | "challengeCompletion" | "message" | "nudge" | "inspirationPost" | "inspirationReaction" | "badge" | "userBadge"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Partnership: {
        payload: Prisma.$PartnershipPayload<ExtArgs>
        fields: Prisma.PartnershipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartnershipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnershipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartnershipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnershipPayload>
          }
          findFirst: {
            args: Prisma.PartnershipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnershipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartnershipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnershipPayload>
          }
          findMany: {
            args: Prisma.PartnershipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnershipPayload>[]
          }
          create: {
            args: Prisma.PartnershipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnershipPayload>
          }
          createMany: {
            args: Prisma.PartnershipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartnershipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnershipPayload>[]
          }
          delete: {
            args: Prisma.PartnershipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnershipPayload>
          }
          update: {
            args: Prisma.PartnershipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnershipPayload>
          }
          deleteMany: {
            args: Prisma.PartnershipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartnershipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PartnershipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnershipPayload>
          }
          aggregate: {
            args: Prisma.PartnershipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartnership>
          }
          groupBy: {
            args: Prisma.PartnershipGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartnershipGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartnershipCountArgs<ExtArgs>
            result: $Utils.Optional<PartnershipCountAggregateOutputType> | number
          }
        }
      }
      Habit: {
        payload: Prisma.$HabitPayload<ExtArgs>
        fields: Prisma.HabitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HabitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HabitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          findFirst: {
            args: Prisma.HabitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HabitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          findMany: {
            args: Prisma.HabitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>[]
          }
          create: {
            args: Prisma.HabitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          createMany: {
            args: Prisma.HabitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HabitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>[]
          }
          delete: {
            args: Prisma.HabitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          update: {
            args: Prisma.HabitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          deleteMany: {
            args: Prisma.HabitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HabitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HabitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          aggregate: {
            args: Prisma.HabitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHabit>
          }
          groupBy: {
            args: Prisma.HabitGroupByArgs<ExtArgs>
            result: $Utils.Optional<HabitGroupByOutputType>[]
          }
          count: {
            args: Prisma.HabitCountArgs<ExtArgs>
            result: $Utils.Optional<HabitCountAggregateOutputType> | number
          }
        }
      }
      Challenge: {
        payload: Prisma.$ChallengePayload<ExtArgs>
        fields: Prisma.ChallengeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChallengeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChallengeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>
          }
          findFirst: {
            args: Prisma.ChallengeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChallengeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>
          }
          findMany: {
            args: Prisma.ChallengeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>[]
          }
          create: {
            args: Prisma.ChallengeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>
          }
          createMany: {
            args: Prisma.ChallengeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChallengeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>[]
          }
          delete: {
            args: Prisma.ChallengeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>
          }
          update: {
            args: Prisma.ChallengeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>
          }
          deleteMany: {
            args: Prisma.ChallengeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChallengeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChallengeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>
          }
          aggregate: {
            args: Prisma.ChallengeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChallenge>
          }
          groupBy: {
            args: Prisma.ChallengeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChallengeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChallengeCountArgs<ExtArgs>
            result: $Utils.Optional<ChallengeCountAggregateOutputType> | number
          }
        }
      }
      ChallengeCompletion: {
        payload: Prisma.$ChallengeCompletionPayload<ExtArgs>
        fields: Prisma.ChallengeCompletionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChallengeCompletionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengeCompletionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChallengeCompletionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengeCompletionPayload>
          }
          findFirst: {
            args: Prisma.ChallengeCompletionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengeCompletionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChallengeCompletionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengeCompletionPayload>
          }
          findMany: {
            args: Prisma.ChallengeCompletionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengeCompletionPayload>[]
          }
          create: {
            args: Prisma.ChallengeCompletionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengeCompletionPayload>
          }
          createMany: {
            args: Prisma.ChallengeCompletionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChallengeCompletionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengeCompletionPayload>[]
          }
          delete: {
            args: Prisma.ChallengeCompletionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengeCompletionPayload>
          }
          update: {
            args: Prisma.ChallengeCompletionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengeCompletionPayload>
          }
          deleteMany: {
            args: Prisma.ChallengeCompletionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChallengeCompletionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChallengeCompletionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengeCompletionPayload>
          }
          aggregate: {
            args: Prisma.ChallengeCompletionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChallengeCompletion>
          }
          groupBy: {
            args: Prisma.ChallengeCompletionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChallengeCompletionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChallengeCompletionCountArgs<ExtArgs>
            result: $Utils.Optional<ChallengeCompletionCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Nudge: {
        payload: Prisma.$NudgePayload<ExtArgs>
        fields: Prisma.NudgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NudgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NudgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NudgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NudgePayload>
          }
          findFirst: {
            args: Prisma.NudgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NudgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NudgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NudgePayload>
          }
          findMany: {
            args: Prisma.NudgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NudgePayload>[]
          }
          create: {
            args: Prisma.NudgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NudgePayload>
          }
          createMany: {
            args: Prisma.NudgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NudgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NudgePayload>[]
          }
          delete: {
            args: Prisma.NudgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NudgePayload>
          }
          update: {
            args: Prisma.NudgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NudgePayload>
          }
          deleteMany: {
            args: Prisma.NudgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NudgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NudgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NudgePayload>
          }
          aggregate: {
            args: Prisma.NudgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNudge>
          }
          groupBy: {
            args: Prisma.NudgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<NudgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.NudgeCountArgs<ExtArgs>
            result: $Utils.Optional<NudgeCountAggregateOutputType> | number
          }
        }
      }
      InspirationPost: {
        payload: Prisma.$InspirationPostPayload<ExtArgs>
        fields: Prisma.InspirationPostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InspirationPostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationPostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InspirationPostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationPostPayload>
          }
          findFirst: {
            args: Prisma.InspirationPostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationPostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InspirationPostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationPostPayload>
          }
          findMany: {
            args: Prisma.InspirationPostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationPostPayload>[]
          }
          create: {
            args: Prisma.InspirationPostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationPostPayload>
          }
          createMany: {
            args: Prisma.InspirationPostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InspirationPostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationPostPayload>[]
          }
          delete: {
            args: Prisma.InspirationPostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationPostPayload>
          }
          update: {
            args: Prisma.InspirationPostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationPostPayload>
          }
          deleteMany: {
            args: Prisma.InspirationPostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InspirationPostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InspirationPostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationPostPayload>
          }
          aggregate: {
            args: Prisma.InspirationPostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInspirationPost>
          }
          groupBy: {
            args: Prisma.InspirationPostGroupByArgs<ExtArgs>
            result: $Utils.Optional<InspirationPostGroupByOutputType>[]
          }
          count: {
            args: Prisma.InspirationPostCountArgs<ExtArgs>
            result: $Utils.Optional<InspirationPostCountAggregateOutputType> | number
          }
        }
      }
      InspirationReaction: {
        payload: Prisma.$InspirationReactionPayload<ExtArgs>
        fields: Prisma.InspirationReactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InspirationReactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationReactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InspirationReactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationReactionPayload>
          }
          findFirst: {
            args: Prisma.InspirationReactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationReactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InspirationReactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationReactionPayload>
          }
          findMany: {
            args: Prisma.InspirationReactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationReactionPayload>[]
          }
          create: {
            args: Prisma.InspirationReactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationReactionPayload>
          }
          createMany: {
            args: Prisma.InspirationReactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InspirationReactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationReactionPayload>[]
          }
          delete: {
            args: Prisma.InspirationReactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationReactionPayload>
          }
          update: {
            args: Prisma.InspirationReactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationReactionPayload>
          }
          deleteMany: {
            args: Prisma.InspirationReactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InspirationReactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InspirationReactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspirationReactionPayload>
          }
          aggregate: {
            args: Prisma.InspirationReactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInspirationReaction>
          }
          groupBy: {
            args: Prisma.InspirationReactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<InspirationReactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.InspirationReactionCountArgs<ExtArgs>
            result: $Utils.Optional<InspirationReactionCountAggregateOutputType> | number
          }
        }
      }
      Badge: {
        payload: Prisma.$BadgePayload<ExtArgs>
        fields: Prisma.BadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          findFirst: {
            args: Prisma.BadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          findMany: {
            args: Prisma.BadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          create: {
            args: Prisma.BadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          createMany: {
            args: Prisma.BadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          delete: {
            args: Prisma.BadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          update: {
            args: Prisma.BadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          deleteMany: {
            args: Prisma.BadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          aggregate: {
            args: Prisma.BadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBadge>
          }
          groupBy: {
            args: Prisma.BadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<BadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.BadgeCountArgs<ExtArgs>
            result: $Utils.Optional<BadgeCountAggregateOutputType> | number
          }
        }
      }
      UserBadge: {
        payload: Prisma.$UserBadgePayload<ExtArgs>
        fields: Prisma.UserBadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserBadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserBadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findFirst: {
            args: Prisma.UserBadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserBadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findMany: {
            args: Prisma.UserBadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          create: {
            args: Prisma.UserBadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          createMany: {
            args: Prisma.UserBadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserBadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          delete: {
            args: Prisma.UserBadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          update: {
            args: Prisma.UserBadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          deleteMany: {
            args: Prisma.UserBadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserBadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserBadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          aggregate: {
            args: Prisma.UserBadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserBadge>
          }
          groupBy: {
            args: Prisma.UserBadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserBadgeCountArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    initiatedPartnerships: number
    receivedPartnerships: number
    challengesCreated: number
    challengeCompletions: number
    sentMessages: number
    inspirationPosts: number
    inspirationReactions: number
    sentNudges: number
    receivedNudges: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    initiatedPartnerships?: boolean | UserCountOutputTypeCountInitiatedPartnershipsArgs
    receivedPartnerships?: boolean | UserCountOutputTypeCountReceivedPartnershipsArgs
    challengesCreated?: boolean | UserCountOutputTypeCountChallengesCreatedArgs
    challengeCompletions?: boolean | UserCountOutputTypeCountChallengeCompletionsArgs
    sentMessages?: boolean | UserCountOutputTypeCountSentMessagesArgs
    inspirationPosts?: boolean | UserCountOutputTypeCountInspirationPostsArgs
    inspirationReactions?: boolean | UserCountOutputTypeCountInspirationReactionsArgs
    sentNudges?: boolean | UserCountOutputTypeCountSentNudgesArgs
    receivedNudges?: boolean | UserCountOutputTypeCountReceivedNudgesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInitiatedPartnershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartnershipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedPartnershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartnershipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChallengesCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChallengeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChallengeCompletionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChallengeCompletionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInspirationPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InspirationPostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInspirationReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InspirationReactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentNudgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NudgeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedNudgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NudgeWhereInput
  }


  /**
   * Count Type PartnershipCountOutputType
   */

  export type PartnershipCountOutputType = {
    habits: number
    messages: number
  }

  export type PartnershipCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    habits?: boolean | PartnershipCountOutputTypeCountHabitsArgs
    messages?: boolean | PartnershipCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * PartnershipCountOutputType without action
   */
  export type PartnershipCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartnershipCountOutputType
     */
    select?: PartnershipCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PartnershipCountOutputType without action
   */
  export type PartnershipCountOutputTypeCountHabitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HabitWhereInput
  }

  /**
   * PartnershipCountOutputType without action
   */
  export type PartnershipCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type HabitCountOutputType
   */

  export type HabitCountOutputType = {
    challenges: number
  }

  export type HabitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    challenges?: boolean | HabitCountOutputTypeCountChallengesArgs
  }

  // Custom InputTypes
  /**
   * HabitCountOutputType without action
   */
  export type HabitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitCountOutputType
     */
    select?: HabitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HabitCountOutputType without action
   */
  export type HabitCountOutputTypeCountChallengesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChallengeWhereInput
  }


  /**
   * Count Type ChallengeCountOutputType
   */

  export type ChallengeCountOutputType = {
    completions: number
  }

  export type ChallengeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    completions?: boolean | ChallengeCountOutputTypeCountCompletionsArgs
  }

  // Custom InputTypes
  /**
   * ChallengeCountOutputType without action
   */
  export type ChallengeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCountOutputType
     */
    select?: ChallengeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChallengeCountOutputType without action
   */
  export type ChallengeCountOutputTypeCountCompletionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChallengeCompletionWhereInput
  }


  /**
   * Count Type InspirationPostCountOutputType
   */

  export type InspirationPostCountOutputType = {
    reactions: number
  }

  export type InspirationPostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reactions?: boolean | InspirationPostCountOutputTypeCountReactionsArgs
  }

  // Custom InputTypes
  /**
   * InspirationPostCountOutputType without action
   */
  export type InspirationPostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationPostCountOutputType
     */
    select?: InspirationPostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InspirationPostCountOutputType without action
   */
  export type InspirationPostCountOutputTypeCountReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InspirationReactionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    username: string | null
    password: string | null
    inviteCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
    timezone: string | null
    reminderTime: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    username: string | null
    password: string | null
    inviteCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
    timezone: string | null
    reminderTime: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    username: number
    password: number
    inviteCode: number
    createdAt: number
    updatedAt: number
    timezone: number
    reminderTime: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    username?: true
    password?: true
    inviteCode?: true
    createdAt?: true
    updatedAt?: true
    timezone?: true
    reminderTime?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    username?: true
    password?: true
    inviteCode?: true
    createdAt?: true
    updatedAt?: true
    timezone?: true
    reminderTime?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    username?: true
    password?: true
    inviteCode?: true
    createdAt?: true
    updatedAt?: true
    timezone?: true
    reminderTime?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string
    emailVerified: Date | null
    image: string | null
    username: string | null
    password: string | null
    inviteCode: string | null
    createdAt: Date
    updatedAt: Date
    timezone: string
    reminderTime: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    username?: boolean
    password?: boolean
    inviteCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    timezone?: boolean
    reminderTime?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    initiatedPartnerships?: boolean | User$initiatedPartnershipsArgs<ExtArgs>
    receivedPartnerships?: boolean | User$receivedPartnershipsArgs<ExtArgs>
    challengesCreated?: boolean | User$challengesCreatedArgs<ExtArgs>
    challengeCompletions?: boolean | User$challengeCompletionsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    inspirationPosts?: boolean | User$inspirationPostsArgs<ExtArgs>
    inspirationReactions?: boolean | User$inspirationReactionsArgs<ExtArgs>
    sentNudges?: boolean | User$sentNudgesArgs<ExtArgs>
    receivedNudges?: boolean | User$receivedNudgesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    username?: boolean
    password?: boolean
    inviteCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    timezone?: boolean
    reminderTime?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    username?: boolean
    password?: boolean
    inviteCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    timezone?: boolean
    reminderTime?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    initiatedPartnerships?: boolean | User$initiatedPartnershipsArgs<ExtArgs>
    receivedPartnerships?: boolean | User$receivedPartnershipsArgs<ExtArgs>
    challengesCreated?: boolean | User$challengesCreatedArgs<ExtArgs>
    challengeCompletions?: boolean | User$challengeCompletionsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    inspirationPosts?: boolean | User$inspirationPostsArgs<ExtArgs>
    inspirationReactions?: boolean | User$inspirationReactionsArgs<ExtArgs>
    sentNudges?: boolean | User$sentNudgesArgs<ExtArgs>
    receivedNudges?: boolean | User$receivedNudgesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      initiatedPartnerships: Prisma.$PartnershipPayload<ExtArgs>[]
      receivedPartnerships: Prisma.$PartnershipPayload<ExtArgs>[]
      challengesCreated: Prisma.$ChallengePayload<ExtArgs>[]
      challengeCompletions: Prisma.$ChallengeCompletionPayload<ExtArgs>[]
      sentMessages: Prisma.$MessagePayload<ExtArgs>[]
      inspirationPosts: Prisma.$InspirationPostPayload<ExtArgs>[]
      inspirationReactions: Prisma.$InspirationReactionPayload<ExtArgs>[]
      sentNudges: Prisma.$NudgePayload<ExtArgs>[]
      receivedNudges: Prisma.$NudgePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string
      emailVerified: Date | null
      image: string | null
      username: string | null
      password: string | null
      inviteCode: string | null
      createdAt: Date
      updatedAt: Date
      timezone: string
      reminderTime: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany"> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany"> | Null>
    initiatedPartnerships<T extends User$initiatedPartnershipsArgs<ExtArgs> = {}>(args?: Subset<T, User$initiatedPartnershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnershipPayload<ExtArgs>, T, "findMany"> | Null>
    receivedPartnerships<T extends User$receivedPartnershipsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedPartnershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnershipPayload<ExtArgs>, T, "findMany"> | Null>
    challengesCreated<T extends User$challengesCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$challengesCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findMany"> | Null>
    challengeCompletions<T extends User$challengeCompletionsArgs<ExtArgs> = {}>(args?: Subset<T, User$challengeCompletionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChallengeCompletionPayload<ExtArgs>, T, "findMany"> | Null>
    sentMessages<T extends User$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    inspirationPosts<T extends User$inspirationPostsArgs<ExtArgs> = {}>(args?: Subset<T, User$inspirationPostsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InspirationPostPayload<ExtArgs>, T, "findMany"> | Null>
    inspirationReactions<T extends User$inspirationReactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$inspirationReactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InspirationReactionPayload<ExtArgs>, T, "findMany"> | Null>
    sentNudges<T extends User$sentNudgesArgs<ExtArgs> = {}>(args?: Subset<T, User$sentNudgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NudgePayload<ExtArgs>, T, "findMany"> | Null>
    receivedNudges<T extends User$receivedNudgesArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedNudgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NudgePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly inviteCode: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly timezone: FieldRef<"User", 'String'>
    readonly reminderTime: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.initiatedPartnerships
   */
  export type User$initiatedPartnershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partnership
     */
    select?: PartnershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnershipInclude<ExtArgs> | null
    where?: PartnershipWhereInput
    orderBy?: PartnershipOrderByWithRelationInput | PartnershipOrderByWithRelationInput[]
    cursor?: PartnershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartnershipScalarFieldEnum | PartnershipScalarFieldEnum[]
  }

  /**
   * User.receivedPartnerships
   */
  export type User$receivedPartnershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partnership
     */
    select?: PartnershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnershipInclude<ExtArgs> | null
    where?: PartnershipWhereInput
    orderBy?: PartnershipOrderByWithRelationInput | PartnershipOrderByWithRelationInput[]
    cursor?: PartnershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartnershipScalarFieldEnum | PartnershipScalarFieldEnum[]
  }

  /**
   * User.challengesCreated
   */
  export type User$challengesCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    where?: ChallengeWhereInput
    orderBy?: ChallengeOrderByWithRelationInput | ChallengeOrderByWithRelationInput[]
    cursor?: ChallengeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChallengeScalarFieldEnum | ChallengeScalarFieldEnum[]
  }

  /**
   * User.challengeCompletions
   */
  export type User$challengeCompletionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCompletion
     */
    select?: ChallengeCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeCompletionInclude<ExtArgs> | null
    where?: ChallengeCompletionWhereInput
    orderBy?: ChallengeCompletionOrderByWithRelationInput | ChallengeCompletionOrderByWithRelationInput[]
    cursor?: ChallengeCompletionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChallengeCompletionScalarFieldEnum | ChallengeCompletionScalarFieldEnum[]
  }

  /**
   * User.sentMessages
   */
  export type User$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.inspirationPosts
   */
  export type User$inspirationPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationPost
     */
    select?: InspirationPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationPostInclude<ExtArgs> | null
    where?: InspirationPostWhereInput
    orderBy?: InspirationPostOrderByWithRelationInput | InspirationPostOrderByWithRelationInput[]
    cursor?: InspirationPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InspirationPostScalarFieldEnum | InspirationPostScalarFieldEnum[]
  }

  /**
   * User.inspirationReactions
   */
  export type User$inspirationReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationReaction
     */
    select?: InspirationReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationReactionInclude<ExtArgs> | null
    where?: InspirationReactionWhereInput
    orderBy?: InspirationReactionOrderByWithRelationInput | InspirationReactionOrderByWithRelationInput[]
    cursor?: InspirationReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InspirationReactionScalarFieldEnum | InspirationReactionScalarFieldEnum[]
  }

  /**
   * User.sentNudges
   */
  export type User$sentNudgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nudge
     */
    select?: NudgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NudgeInclude<ExtArgs> | null
    where?: NudgeWhereInput
    orderBy?: NudgeOrderByWithRelationInput | NudgeOrderByWithRelationInput[]
    cursor?: NudgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NudgeScalarFieldEnum | NudgeScalarFieldEnum[]
  }

  /**
   * User.receivedNudges
   */
  export type User$receivedNudgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nudge
     */
    select?: NudgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NudgeInclude<ExtArgs> | null
    where?: NudgeWhereInput
    orderBy?: NudgeOrderByWithRelationInput | NudgeOrderByWithRelationInput[]
    cursor?: NudgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NudgeScalarFieldEnum | NudgeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }


  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({ 
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */ 
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
  }


  /**
   * Model Partnership
   */

  export type AggregatePartnership = {
    _count: PartnershipCountAggregateOutputType | null
    _min: PartnershipMinAggregateOutputType | null
    _max: PartnershipMaxAggregateOutputType | null
  }

  export type PartnershipMinAggregateOutputType = {
    id: string | null
    initiatorId: string | null
    receiverId: string | null
    status: $Enums.PartnershipStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartnershipMaxAggregateOutputType = {
    id: string | null
    initiatorId: string | null
    receiverId: string | null
    status: $Enums.PartnershipStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartnershipCountAggregateOutputType = {
    id: number
    initiatorId: number
    receiverId: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PartnershipMinAggregateInputType = {
    id?: true
    initiatorId?: true
    receiverId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartnershipMaxAggregateInputType = {
    id?: true
    initiatorId?: true
    receiverId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartnershipCountAggregateInputType = {
    id?: true
    initiatorId?: true
    receiverId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PartnershipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partnership to aggregate.
     */
    where?: PartnershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partnerships to fetch.
     */
    orderBy?: PartnershipOrderByWithRelationInput | PartnershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartnershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partnerships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partnerships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Partnerships
    **/
    _count?: true | PartnershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartnershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartnershipMaxAggregateInputType
  }

  export type GetPartnershipAggregateType<T extends PartnershipAggregateArgs> = {
        [P in keyof T & keyof AggregatePartnership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartnership[P]>
      : GetScalarType<T[P], AggregatePartnership[P]>
  }




  export type PartnershipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartnershipWhereInput
    orderBy?: PartnershipOrderByWithAggregationInput | PartnershipOrderByWithAggregationInput[]
    by: PartnershipScalarFieldEnum[] | PartnershipScalarFieldEnum
    having?: PartnershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartnershipCountAggregateInputType | true
    _min?: PartnershipMinAggregateInputType
    _max?: PartnershipMaxAggregateInputType
  }

  export type PartnershipGroupByOutputType = {
    id: string
    initiatorId: string
    receiverId: string
    status: $Enums.PartnershipStatus
    createdAt: Date
    updatedAt: Date
    _count: PartnershipCountAggregateOutputType | null
    _min: PartnershipMinAggregateOutputType | null
    _max: PartnershipMaxAggregateOutputType | null
  }

  type GetPartnershipGroupByPayload<T extends PartnershipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartnershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartnershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartnershipGroupByOutputType[P]>
            : GetScalarType<T[P], PartnershipGroupByOutputType[P]>
        }
      >
    >


  export type PartnershipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    initiatorId?: boolean
    receiverId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    initiator?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
    habits?: boolean | Partnership$habitsArgs<ExtArgs>
    messages?: boolean | Partnership$messagesArgs<ExtArgs>
    _count?: boolean | PartnershipCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partnership"]>

  export type PartnershipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    initiatorId?: boolean
    receiverId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    initiator?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partnership"]>

  export type PartnershipSelectScalar = {
    id?: boolean
    initiatorId?: boolean
    receiverId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PartnershipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    initiator?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
    habits?: boolean | Partnership$habitsArgs<ExtArgs>
    messages?: boolean | Partnership$messagesArgs<ExtArgs>
    _count?: boolean | PartnershipCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PartnershipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    initiator?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PartnershipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Partnership"
    objects: {
      initiator: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
      habits: Prisma.$HabitPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      initiatorId: string
      receiverId: string
      status: $Enums.PartnershipStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["partnership"]>
    composites: {}
  }

  type PartnershipGetPayload<S extends boolean | null | undefined | PartnershipDefaultArgs> = $Result.GetResult<Prisma.$PartnershipPayload, S>

  type PartnershipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PartnershipFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PartnershipCountAggregateInputType | true
    }

  export interface PartnershipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Partnership'], meta: { name: 'Partnership' } }
    /**
     * Find zero or one Partnership that matches the filter.
     * @param {PartnershipFindUniqueArgs} args - Arguments to find a Partnership
     * @example
     * // Get one Partnership
     * const partnership = await prisma.partnership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartnershipFindUniqueArgs>(args: SelectSubset<T, PartnershipFindUniqueArgs<ExtArgs>>): Prisma__PartnershipClient<$Result.GetResult<Prisma.$PartnershipPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Partnership that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PartnershipFindUniqueOrThrowArgs} args - Arguments to find a Partnership
     * @example
     * // Get one Partnership
     * const partnership = await prisma.partnership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartnershipFindUniqueOrThrowArgs>(args: SelectSubset<T, PartnershipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartnershipClient<$Result.GetResult<Prisma.$PartnershipPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Partnership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnershipFindFirstArgs} args - Arguments to find a Partnership
     * @example
     * // Get one Partnership
     * const partnership = await prisma.partnership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartnershipFindFirstArgs>(args?: SelectSubset<T, PartnershipFindFirstArgs<ExtArgs>>): Prisma__PartnershipClient<$Result.GetResult<Prisma.$PartnershipPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Partnership that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnershipFindFirstOrThrowArgs} args - Arguments to find a Partnership
     * @example
     * // Get one Partnership
     * const partnership = await prisma.partnership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartnershipFindFirstOrThrowArgs>(args?: SelectSubset<T, PartnershipFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartnershipClient<$Result.GetResult<Prisma.$PartnershipPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Partnerships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnershipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partnerships
     * const partnerships = await prisma.partnership.findMany()
     * 
     * // Get first 10 Partnerships
     * const partnerships = await prisma.partnership.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partnershipWithIdOnly = await prisma.partnership.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartnershipFindManyArgs>(args?: SelectSubset<T, PartnershipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnershipPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Partnership.
     * @param {PartnershipCreateArgs} args - Arguments to create a Partnership.
     * @example
     * // Create one Partnership
     * const Partnership = await prisma.partnership.create({
     *   data: {
     *     // ... data to create a Partnership
     *   }
     * })
     * 
     */
    create<T extends PartnershipCreateArgs>(args: SelectSubset<T, PartnershipCreateArgs<ExtArgs>>): Prisma__PartnershipClient<$Result.GetResult<Prisma.$PartnershipPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Partnerships.
     * @param {PartnershipCreateManyArgs} args - Arguments to create many Partnerships.
     * @example
     * // Create many Partnerships
     * const partnership = await prisma.partnership.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartnershipCreateManyArgs>(args?: SelectSubset<T, PartnershipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Partnerships and returns the data saved in the database.
     * @param {PartnershipCreateManyAndReturnArgs} args - Arguments to create many Partnerships.
     * @example
     * // Create many Partnerships
     * const partnership = await prisma.partnership.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Partnerships and only return the `id`
     * const partnershipWithIdOnly = await prisma.partnership.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartnershipCreateManyAndReturnArgs>(args?: SelectSubset<T, PartnershipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnershipPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Partnership.
     * @param {PartnershipDeleteArgs} args - Arguments to delete one Partnership.
     * @example
     * // Delete one Partnership
     * const Partnership = await prisma.partnership.delete({
     *   where: {
     *     // ... filter to delete one Partnership
     *   }
     * })
     * 
     */
    delete<T extends PartnershipDeleteArgs>(args: SelectSubset<T, PartnershipDeleteArgs<ExtArgs>>): Prisma__PartnershipClient<$Result.GetResult<Prisma.$PartnershipPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Partnership.
     * @param {PartnershipUpdateArgs} args - Arguments to update one Partnership.
     * @example
     * // Update one Partnership
     * const partnership = await prisma.partnership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartnershipUpdateArgs>(args: SelectSubset<T, PartnershipUpdateArgs<ExtArgs>>): Prisma__PartnershipClient<$Result.GetResult<Prisma.$PartnershipPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Partnerships.
     * @param {PartnershipDeleteManyArgs} args - Arguments to filter Partnerships to delete.
     * @example
     * // Delete a few Partnerships
     * const { count } = await prisma.partnership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartnershipDeleteManyArgs>(args?: SelectSubset<T, PartnershipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partnerships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partnerships
     * const partnership = await prisma.partnership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartnershipUpdateManyArgs>(args: SelectSubset<T, PartnershipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Partnership.
     * @param {PartnershipUpsertArgs} args - Arguments to update or create a Partnership.
     * @example
     * // Update or create a Partnership
     * const partnership = await prisma.partnership.upsert({
     *   create: {
     *     // ... data to create a Partnership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partnership we want to update
     *   }
     * })
     */
    upsert<T extends PartnershipUpsertArgs>(args: SelectSubset<T, PartnershipUpsertArgs<ExtArgs>>): Prisma__PartnershipClient<$Result.GetResult<Prisma.$PartnershipPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Partnerships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnershipCountArgs} args - Arguments to filter Partnerships to count.
     * @example
     * // Count the number of Partnerships
     * const count = await prisma.partnership.count({
     *   where: {
     *     // ... the filter for the Partnerships we want to count
     *   }
     * })
    **/
    count<T extends PartnershipCountArgs>(
      args?: Subset<T, PartnershipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartnershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Partnership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartnershipAggregateArgs>(args: Subset<T, PartnershipAggregateArgs>): Prisma.PrismaPromise<GetPartnershipAggregateType<T>>

    /**
     * Group by Partnership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartnershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartnershipGroupByArgs['orderBy'] }
        : { orderBy?: PartnershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartnershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartnershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Partnership model
   */
  readonly fields: PartnershipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Partnership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartnershipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    initiator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    habits<T extends Partnership$habitsArgs<ExtArgs> = {}>(args?: Subset<T, Partnership$habitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends Partnership$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Partnership$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Partnership model
   */ 
  interface PartnershipFieldRefs {
    readonly id: FieldRef<"Partnership", 'String'>
    readonly initiatorId: FieldRef<"Partnership", 'String'>
    readonly receiverId: FieldRef<"Partnership", 'String'>
    readonly status: FieldRef<"Partnership", 'PartnershipStatus'>
    readonly createdAt: FieldRef<"Partnership", 'DateTime'>
    readonly updatedAt: FieldRef<"Partnership", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Partnership findUnique
   */
  export type PartnershipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partnership
     */
    select?: PartnershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnershipInclude<ExtArgs> | null
    /**
     * Filter, which Partnership to fetch.
     */
    where: PartnershipWhereUniqueInput
  }

  /**
   * Partnership findUniqueOrThrow
   */
  export type PartnershipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partnership
     */
    select?: PartnershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnershipInclude<ExtArgs> | null
    /**
     * Filter, which Partnership to fetch.
     */
    where: PartnershipWhereUniqueInput
  }

  /**
   * Partnership findFirst
   */
  export type PartnershipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partnership
     */
    select?: PartnershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnershipInclude<ExtArgs> | null
    /**
     * Filter, which Partnership to fetch.
     */
    where?: PartnershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partnerships to fetch.
     */
    orderBy?: PartnershipOrderByWithRelationInput | PartnershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partnerships.
     */
    cursor?: PartnershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partnerships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partnerships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partnerships.
     */
    distinct?: PartnershipScalarFieldEnum | PartnershipScalarFieldEnum[]
  }

  /**
   * Partnership findFirstOrThrow
   */
  export type PartnershipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partnership
     */
    select?: PartnershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnershipInclude<ExtArgs> | null
    /**
     * Filter, which Partnership to fetch.
     */
    where?: PartnershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partnerships to fetch.
     */
    orderBy?: PartnershipOrderByWithRelationInput | PartnershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partnerships.
     */
    cursor?: PartnershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partnerships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partnerships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partnerships.
     */
    distinct?: PartnershipScalarFieldEnum | PartnershipScalarFieldEnum[]
  }

  /**
   * Partnership findMany
   */
  export type PartnershipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partnership
     */
    select?: PartnershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnershipInclude<ExtArgs> | null
    /**
     * Filter, which Partnerships to fetch.
     */
    where?: PartnershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partnerships to fetch.
     */
    orderBy?: PartnershipOrderByWithRelationInput | PartnershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Partnerships.
     */
    cursor?: PartnershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partnerships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partnerships.
     */
    skip?: number
    distinct?: PartnershipScalarFieldEnum | PartnershipScalarFieldEnum[]
  }

  /**
   * Partnership create
   */
  export type PartnershipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partnership
     */
    select?: PartnershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnershipInclude<ExtArgs> | null
    /**
     * The data needed to create a Partnership.
     */
    data: XOR<PartnershipCreateInput, PartnershipUncheckedCreateInput>
  }

  /**
   * Partnership createMany
   */
  export type PartnershipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Partnerships.
     */
    data: PartnershipCreateManyInput | PartnershipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partnership createManyAndReturn
   */
  export type PartnershipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partnership
     */
    select?: PartnershipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Partnerships.
     */
    data: PartnershipCreateManyInput | PartnershipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnershipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Partnership update
   */
  export type PartnershipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partnership
     */
    select?: PartnershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnershipInclude<ExtArgs> | null
    /**
     * The data needed to update a Partnership.
     */
    data: XOR<PartnershipUpdateInput, PartnershipUncheckedUpdateInput>
    /**
     * Choose, which Partnership to update.
     */
    where: PartnershipWhereUniqueInput
  }

  /**
   * Partnership updateMany
   */
  export type PartnershipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Partnerships.
     */
    data: XOR<PartnershipUpdateManyMutationInput, PartnershipUncheckedUpdateManyInput>
    /**
     * Filter which Partnerships to update
     */
    where?: PartnershipWhereInput
  }

  /**
   * Partnership upsert
   */
  export type PartnershipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partnership
     */
    select?: PartnershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnershipInclude<ExtArgs> | null
    /**
     * The filter to search for the Partnership to update in case it exists.
     */
    where: PartnershipWhereUniqueInput
    /**
     * In case the Partnership found by the `where` argument doesn't exist, create a new Partnership with this data.
     */
    create: XOR<PartnershipCreateInput, PartnershipUncheckedCreateInput>
    /**
     * In case the Partnership was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartnershipUpdateInput, PartnershipUncheckedUpdateInput>
  }

  /**
   * Partnership delete
   */
  export type PartnershipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partnership
     */
    select?: PartnershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnershipInclude<ExtArgs> | null
    /**
     * Filter which Partnership to delete.
     */
    where: PartnershipWhereUniqueInput
  }

  /**
   * Partnership deleteMany
   */
  export type PartnershipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partnerships to delete
     */
    where?: PartnershipWhereInput
  }

  /**
   * Partnership.habits
   */
  export type Partnership$habitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    where?: HabitWhereInput
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    cursor?: HabitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HabitScalarFieldEnum | HabitScalarFieldEnum[]
  }

  /**
   * Partnership.messages
   */
  export type Partnership$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Partnership without action
   */
  export type PartnershipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partnership
     */
    select?: PartnershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnershipInclude<ExtArgs> | null
  }


  /**
   * Model Habit
   */

  export type AggregateHabit = {
    _count: HabitCountAggregateOutputType | null
    _avg: HabitAvgAggregateOutputType | null
    _sum: HabitSumAggregateOutputType | null
    _min: HabitMinAggregateOutputType | null
    _max: HabitMaxAggregateOutputType | null
  }

  export type HabitAvgAggregateOutputType = {
    duration: number | null
    streakCount: number | null
    totalDays: number | null
    mulligansUsed: number | null
    maxMulligans: number | null
  }

  export type HabitSumAggregateOutputType = {
    duration: number | null
    streakCount: number | null
    totalDays: number | null
    mulligansUsed: number | null
    maxMulligans: number | null
  }

  export type HabitMinAggregateOutputType = {
    id: string | null
    partnershipId: string | null
    name: string | null
    category: string | null
    frequency: string | null
    customDays: string | null
    duration: number | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.HabitStatus | null
    currentTurn: string | null
    streakCount: number | null
    totalDays: number | null
    mulligansUsed: number | null
    maxMulligans: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HabitMaxAggregateOutputType = {
    id: string | null
    partnershipId: string | null
    name: string | null
    category: string | null
    frequency: string | null
    customDays: string | null
    duration: number | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.HabitStatus | null
    currentTurn: string | null
    streakCount: number | null
    totalDays: number | null
    mulligansUsed: number | null
    maxMulligans: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HabitCountAggregateOutputType = {
    id: number
    partnershipId: number
    name: number
    category: number
    frequency: number
    customDays: number
    duration: number
    startDate: number
    endDate: number
    status: number
    currentTurn: number
    streakCount: number
    totalDays: number
    mulligansUsed: number
    maxMulligans: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HabitAvgAggregateInputType = {
    duration?: true
    streakCount?: true
    totalDays?: true
    mulligansUsed?: true
    maxMulligans?: true
  }

  export type HabitSumAggregateInputType = {
    duration?: true
    streakCount?: true
    totalDays?: true
    mulligansUsed?: true
    maxMulligans?: true
  }

  export type HabitMinAggregateInputType = {
    id?: true
    partnershipId?: true
    name?: true
    category?: true
    frequency?: true
    customDays?: true
    duration?: true
    startDate?: true
    endDate?: true
    status?: true
    currentTurn?: true
    streakCount?: true
    totalDays?: true
    mulligansUsed?: true
    maxMulligans?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HabitMaxAggregateInputType = {
    id?: true
    partnershipId?: true
    name?: true
    category?: true
    frequency?: true
    customDays?: true
    duration?: true
    startDate?: true
    endDate?: true
    status?: true
    currentTurn?: true
    streakCount?: true
    totalDays?: true
    mulligansUsed?: true
    maxMulligans?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HabitCountAggregateInputType = {
    id?: true
    partnershipId?: true
    name?: true
    category?: true
    frequency?: true
    customDays?: true
    duration?: true
    startDate?: true
    endDate?: true
    status?: true
    currentTurn?: true
    streakCount?: true
    totalDays?: true
    mulligansUsed?: true
    maxMulligans?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HabitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Habit to aggregate.
     */
    where?: HabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habits to fetch.
     */
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Habits
    **/
    _count?: true | HabitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HabitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HabitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HabitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HabitMaxAggregateInputType
  }

  export type GetHabitAggregateType<T extends HabitAggregateArgs> = {
        [P in keyof T & keyof AggregateHabit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHabit[P]>
      : GetScalarType<T[P], AggregateHabit[P]>
  }




  export type HabitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HabitWhereInput
    orderBy?: HabitOrderByWithAggregationInput | HabitOrderByWithAggregationInput[]
    by: HabitScalarFieldEnum[] | HabitScalarFieldEnum
    having?: HabitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HabitCountAggregateInputType | true
    _avg?: HabitAvgAggregateInputType
    _sum?: HabitSumAggregateInputType
    _min?: HabitMinAggregateInputType
    _max?: HabitMaxAggregateInputType
  }

  export type HabitGroupByOutputType = {
    id: string
    partnershipId: string
    name: string
    category: string | null
    frequency: string
    customDays: string | null
    duration: number | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.HabitStatus
    currentTurn: string | null
    streakCount: number
    totalDays: number
    mulligansUsed: number
    maxMulligans: number
    createdAt: Date
    updatedAt: Date
    _count: HabitCountAggregateOutputType | null
    _avg: HabitAvgAggregateOutputType | null
    _sum: HabitSumAggregateOutputType | null
    _min: HabitMinAggregateOutputType | null
    _max: HabitMaxAggregateOutputType | null
  }

  type GetHabitGroupByPayload<T extends HabitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HabitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HabitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HabitGroupByOutputType[P]>
            : GetScalarType<T[P], HabitGroupByOutputType[P]>
        }
      >
    >


  export type HabitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partnershipId?: boolean
    name?: boolean
    category?: boolean
    frequency?: boolean
    customDays?: boolean
    duration?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    currentTurn?: boolean
    streakCount?: boolean
    totalDays?: boolean
    mulligansUsed?: boolean
    maxMulligans?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    partnership?: boolean | PartnershipDefaultArgs<ExtArgs>
    challenges?: boolean | Habit$challengesArgs<ExtArgs>
    _count?: boolean | HabitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["habit"]>

  export type HabitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partnershipId?: boolean
    name?: boolean
    category?: boolean
    frequency?: boolean
    customDays?: boolean
    duration?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    currentTurn?: boolean
    streakCount?: boolean
    totalDays?: boolean
    mulligansUsed?: boolean
    maxMulligans?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    partnership?: boolean | PartnershipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["habit"]>

  export type HabitSelectScalar = {
    id?: boolean
    partnershipId?: boolean
    name?: boolean
    category?: boolean
    frequency?: boolean
    customDays?: boolean
    duration?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    currentTurn?: boolean
    streakCount?: boolean
    totalDays?: boolean
    mulligansUsed?: boolean
    maxMulligans?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HabitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partnership?: boolean | PartnershipDefaultArgs<ExtArgs>
    challenges?: boolean | Habit$challengesArgs<ExtArgs>
    _count?: boolean | HabitCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HabitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partnership?: boolean | PartnershipDefaultArgs<ExtArgs>
  }

  export type $HabitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Habit"
    objects: {
      partnership: Prisma.$PartnershipPayload<ExtArgs>
      challenges: Prisma.$ChallengePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      partnershipId: string
      name: string
      category: string | null
      frequency: string
      customDays: string | null
      duration: number | null
      startDate: Date | null
      endDate: Date | null
      status: $Enums.HabitStatus
      currentTurn: string | null
      streakCount: number
      totalDays: number
      mulligansUsed: number
      maxMulligans: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["habit"]>
    composites: {}
  }

  type HabitGetPayload<S extends boolean | null | undefined | HabitDefaultArgs> = $Result.GetResult<Prisma.$HabitPayload, S>

  type HabitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HabitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HabitCountAggregateInputType | true
    }

  export interface HabitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Habit'], meta: { name: 'Habit' } }
    /**
     * Find zero or one Habit that matches the filter.
     * @param {HabitFindUniqueArgs} args - Arguments to find a Habit
     * @example
     * // Get one Habit
     * const habit = await prisma.habit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HabitFindUniqueArgs>(args: SelectSubset<T, HabitFindUniqueArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Habit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HabitFindUniqueOrThrowArgs} args - Arguments to find a Habit
     * @example
     * // Get one Habit
     * const habit = await prisma.habit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HabitFindUniqueOrThrowArgs>(args: SelectSubset<T, HabitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Habit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitFindFirstArgs} args - Arguments to find a Habit
     * @example
     * // Get one Habit
     * const habit = await prisma.habit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HabitFindFirstArgs>(args?: SelectSubset<T, HabitFindFirstArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Habit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitFindFirstOrThrowArgs} args - Arguments to find a Habit
     * @example
     * // Get one Habit
     * const habit = await prisma.habit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HabitFindFirstOrThrowArgs>(args?: SelectSubset<T, HabitFindFirstOrThrowArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Habits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Habits
     * const habits = await prisma.habit.findMany()
     * 
     * // Get first 10 Habits
     * const habits = await prisma.habit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const habitWithIdOnly = await prisma.habit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HabitFindManyArgs>(args?: SelectSubset<T, HabitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Habit.
     * @param {HabitCreateArgs} args - Arguments to create a Habit.
     * @example
     * // Create one Habit
     * const Habit = await prisma.habit.create({
     *   data: {
     *     // ... data to create a Habit
     *   }
     * })
     * 
     */
    create<T extends HabitCreateArgs>(args: SelectSubset<T, HabitCreateArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Habits.
     * @param {HabitCreateManyArgs} args - Arguments to create many Habits.
     * @example
     * // Create many Habits
     * const habit = await prisma.habit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HabitCreateManyArgs>(args?: SelectSubset<T, HabitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Habits and returns the data saved in the database.
     * @param {HabitCreateManyAndReturnArgs} args - Arguments to create many Habits.
     * @example
     * // Create many Habits
     * const habit = await prisma.habit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Habits and only return the `id`
     * const habitWithIdOnly = await prisma.habit.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HabitCreateManyAndReturnArgs>(args?: SelectSubset<T, HabitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Habit.
     * @param {HabitDeleteArgs} args - Arguments to delete one Habit.
     * @example
     * // Delete one Habit
     * const Habit = await prisma.habit.delete({
     *   where: {
     *     // ... filter to delete one Habit
     *   }
     * })
     * 
     */
    delete<T extends HabitDeleteArgs>(args: SelectSubset<T, HabitDeleteArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Habit.
     * @param {HabitUpdateArgs} args - Arguments to update one Habit.
     * @example
     * // Update one Habit
     * const habit = await prisma.habit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HabitUpdateArgs>(args: SelectSubset<T, HabitUpdateArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Habits.
     * @param {HabitDeleteManyArgs} args - Arguments to filter Habits to delete.
     * @example
     * // Delete a few Habits
     * const { count } = await prisma.habit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HabitDeleteManyArgs>(args?: SelectSubset<T, HabitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Habits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Habits
     * const habit = await prisma.habit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HabitUpdateManyArgs>(args: SelectSubset<T, HabitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Habit.
     * @param {HabitUpsertArgs} args - Arguments to update or create a Habit.
     * @example
     * // Update or create a Habit
     * const habit = await prisma.habit.upsert({
     *   create: {
     *     // ... data to create a Habit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Habit we want to update
     *   }
     * })
     */
    upsert<T extends HabitUpsertArgs>(args: SelectSubset<T, HabitUpsertArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Habits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitCountArgs} args - Arguments to filter Habits to count.
     * @example
     * // Count the number of Habits
     * const count = await prisma.habit.count({
     *   where: {
     *     // ... the filter for the Habits we want to count
     *   }
     * })
    **/
    count<T extends HabitCountArgs>(
      args?: Subset<T, HabitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HabitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Habit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HabitAggregateArgs>(args: Subset<T, HabitAggregateArgs>): Prisma.PrismaPromise<GetHabitAggregateType<T>>

    /**
     * Group by Habit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HabitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HabitGroupByArgs['orderBy'] }
        : { orderBy?: HabitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HabitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHabitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Habit model
   */
  readonly fields: HabitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Habit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HabitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    partnership<T extends PartnershipDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PartnershipDefaultArgs<ExtArgs>>): Prisma__PartnershipClient<$Result.GetResult<Prisma.$PartnershipPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    challenges<T extends Habit$challengesArgs<ExtArgs> = {}>(args?: Subset<T, Habit$challengesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Habit model
   */ 
  interface HabitFieldRefs {
    readonly id: FieldRef<"Habit", 'String'>
    readonly partnershipId: FieldRef<"Habit", 'String'>
    readonly name: FieldRef<"Habit", 'String'>
    readonly category: FieldRef<"Habit", 'String'>
    readonly frequency: FieldRef<"Habit", 'String'>
    readonly customDays: FieldRef<"Habit", 'String'>
    readonly duration: FieldRef<"Habit", 'Int'>
    readonly startDate: FieldRef<"Habit", 'DateTime'>
    readonly endDate: FieldRef<"Habit", 'DateTime'>
    readonly status: FieldRef<"Habit", 'HabitStatus'>
    readonly currentTurn: FieldRef<"Habit", 'String'>
    readonly streakCount: FieldRef<"Habit", 'Int'>
    readonly totalDays: FieldRef<"Habit", 'Int'>
    readonly mulligansUsed: FieldRef<"Habit", 'Int'>
    readonly maxMulligans: FieldRef<"Habit", 'Int'>
    readonly createdAt: FieldRef<"Habit", 'DateTime'>
    readonly updatedAt: FieldRef<"Habit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Habit findUnique
   */
  export type HabitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habit to fetch.
     */
    where: HabitWhereUniqueInput
  }

  /**
   * Habit findUniqueOrThrow
   */
  export type HabitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habit to fetch.
     */
    where: HabitWhereUniqueInput
  }

  /**
   * Habit findFirst
   */
  export type HabitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habit to fetch.
     */
    where?: HabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habits to fetch.
     */
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Habits.
     */
    cursor?: HabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Habits.
     */
    distinct?: HabitScalarFieldEnum | HabitScalarFieldEnum[]
  }

  /**
   * Habit findFirstOrThrow
   */
  export type HabitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habit to fetch.
     */
    where?: HabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habits to fetch.
     */
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Habits.
     */
    cursor?: HabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Habits.
     */
    distinct?: HabitScalarFieldEnum | HabitScalarFieldEnum[]
  }

  /**
   * Habit findMany
   */
  export type HabitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habits to fetch.
     */
    where?: HabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habits to fetch.
     */
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Habits.
     */
    cursor?: HabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habits.
     */
    skip?: number
    distinct?: HabitScalarFieldEnum | HabitScalarFieldEnum[]
  }

  /**
   * Habit create
   */
  export type HabitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * The data needed to create a Habit.
     */
    data: XOR<HabitCreateInput, HabitUncheckedCreateInput>
  }

  /**
   * Habit createMany
   */
  export type HabitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Habits.
     */
    data: HabitCreateManyInput | HabitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Habit createManyAndReturn
   */
  export type HabitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Habits.
     */
    data: HabitCreateManyInput | HabitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Habit update
   */
  export type HabitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * The data needed to update a Habit.
     */
    data: XOR<HabitUpdateInput, HabitUncheckedUpdateInput>
    /**
     * Choose, which Habit to update.
     */
    where: HabitWhereUniqueInput
  }

  /**
   * Habit updateMany
   */
  export type HabitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Habits.
     */
    data: XOR<HabitUpdateManyMutationInput, HabitUncheckedUpdateManyInput>
    /**
     * Filter which Habits to update
     */
    where?: HabitWhereInput
  }

  /**
   * Habit upsert
   */
  export type HabitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * The filter to search for the Habit to update in case it exists.
     */
    where: HabitWhereUniqueInput
    /**
     * In case the Habit found by the `where` argument doesn't exist, create a new Habit with this data.
     */
    create: XOR<HabitCreateInput, HabitUncheckedCreateInput>
    /**
     * In case the Habit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HabitUpdateInput, HabitUncheckedUpdateInput>
  }

  /**
   * Habit delete
   */
  export type HabitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter which Habit to delete.
     */
    where: HabitWhereUniqueInput
  }

  /**
   * Habit deleteMany
   */
  export type HabitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Habits to delete
     */
    where?: HabitWhereInput
  }

  /**
   * Habit.challenges
   */
  export type Habit$challengesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    where?: ChallengeWhereInput
    orderBy?: ChallengeOrderByWithRelationInput | ChallengeOrderByWithRelationInput[]
    cursor?: ChallengeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChallengeScalarFieldEnum | ChallengeScalarFieldEnum[]
  }

  /**
   * Habit without action
   */
  export type HabitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
  }


  /**
   * Model Challenge
   */

  export type AggregateChallenge = {
    _count: ChallengeCountAggregateOutputType | null
    _min: ChallengeMinAggregateOutputType | null
    _max: ChallengeMaxAggregateOutputType | null
  }

  export type ChallengeMinAggregateOutputType = {
    id: string | null
    habitId: string | null
    creatorId: string | null
    title: string | null
    description: string | null
    dueDate: Date | null
    status: $Enums.ChallengeStatus | null
    createdAt: Date | null
  }

  export type ChallengeMaxAggregateOutputType = {
    id: string | null
    habitId: string | null
    creatorId: string | null
    title: string | null
    description: string | null
    dueDate: Date | null
    status: $Enums.ChallengeStatus | null
    createdAt: Date | null
  }

  export type ChallengeCountAggregateOutputType = {
    id: number
    habitId: number
    creatorId: number
    title: number
    description: number
    dueDate: number
    status: number
    createdAt: number
    _all: number
  }


  export type ChallengeMinAggregateInputType = {
    id?: true
    habitId?: true
    creatorId?: true
    title?: true
    description?: true
    dueDate?: true
    status?: true
    createdAt?: true
  }

  export type ChallengeMaxAggregateInputType = {
    id?: true
    habitId?: true
    creatorId?: true
    title?: true
    description?: true
    dueDate?: true
    status?: true
    createdAt?: true
  }

  export type ChallengeCountAggregateInputType = {
    id?: true
    habitId?: true
    creatorId?: true
    title?: true
    description?: true
    dueDate?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type ChallengeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Challenge to aggregate.
     */
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     */
    orderBy?: ChallengeOrderByWithRelationInput | ChallengeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Challenges
    **/
    _count?: true | ChallengeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChallengeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChallengeMaxAggregateInputType
  }

  export type GetChallengeAggregateType<T extends ChallengeAggregateArgs> = {
        [P in keyof T & keyof AggregateChallenge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChallenge[P]>
      : GetScalarType<T[P], AggregateChallenge[P]>
  }




  export type ChallengeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChallengeWhereInput
    orderBy?: ChallengeOrderByWithAggregationInput | ChallengeOrderByWithAggregationInput[]
    by: ChallengeScalarFieldEnum[] | ChallengeScalarFieldEnum
    having?: ChallengeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChallengeCountAggregateInputType | true
    _min?: ChallengeMinAggregateInputType
    _max?: ChallengeMaxAggregateInputType
  }

  export type ChallengeGroupByOutputType = {
    id: string
    habitId: string
    creatorId: string
    title: string
    description: string | null
    dueDate: Date
    status: $Enums.ChallengeStatus
    createdAt: Date
    _count: ChallengeCountAggregateOutputType | null
    _min: ChallengeMinAggregateOutputType | null
    _max: ChallengeMaxAggregateOutputType | null
  }

  type GetChallengeGroupByPayload<T extends ChallengeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChallengeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChallengeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChallengeGroupByOutputType[P]>
            : GetScalarType<T[P], ChallengeGroupByOutputType[P]>
        }
      >
    >


  export type ChallengeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    habitId?: boolean
    creatorId?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    status?: boolean
    createdAt?: boolean
    habit?: boolean | HabitDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    completions?: boolean | Challenge$completionsArgs<ExtArgs>
    _count?: boolean | ChallengeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["challenge"]>

  export type ChallengeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    habitId?: boolean
    creatorId?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    status?: boolean
    createdAt?: boolean
    habit?: boolean | HabitDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["challenge"]>

  export type ChallengeSelectScalar = {
    id?: boolean
    habitId?: boolean
    creatorId?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type ChallengeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    habit?: boolean | HabitDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    completions?: boolean | Challenge$completionsArgs<ExtArgs>
    _count?: boolean | ChallengeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChallengeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    habit?: boolean | HabitDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ChallengePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Challenge"
    objects: {
      habit: Prisma.$HabitPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
      completions: Prisma.$ChallengeCompletionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      habitId: string
      creatorId: string
      title: string
      description: string | null
      dueDate: Date
      status: $Enums.ChallengeStatus
      createdAt: Date
    }, ExtArgs["result"]["challenge"]>
    composites: {}
  }

  type ChallengeGetPayload<S extends boolean | null | undefined | ChallengeDefaultArgs> = $Result.GetResult<Prisma.$ChallengePayload, S>

  type ChallengeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChallengeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChallengeCountAggregateInputType | true
    }

  export interface ChallengeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Challenge'], meta: { name: 'Challenge' } }
    /**
     * Find zero or one Challenge that matches the filter.
     * @param {ChallengeFindUniqueArgs} args - Arguments to find a Challenge
     * @example
     * // Get one Challenge
     * const challenge = await prisma.challenge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChallengeFindUniqueArgs>(args: SelectSubset<T, ChallengeFindUniqueArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Challenge that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChallengeFindUniqueOrThrowArgs} args - Arguments to find a Challenge
     * @example
     * // Get one Challenge
     * const challenge = await prisma.challenge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChallengeFindUniqueOrThrowArgs>(args: SelectSubset<T, ChallengeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Challenge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeFindFirstArgs} args - Arguments to find a Challenge
     * @example
     * // Get one Challenge
     * const challenge = await prisma.challenge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChallengeFindFirstArgs>(args?: SelectSubset<T, ChallengeFindFirstArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Challenge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeFindFirstOrThrowArgs} args - Arguments to find a Challenge
     * @example
     * // Get one Challenge
     * const challenge = await prisma.challenge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChallengeFindFirstOrThrowArgs>(args?: SelectSubset<T, ChallengeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Challenges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Challenges
     * const challenges = await prisma.challenge.findMany()
     * 
     * // Get first 10 Challenges
     * const challenges = await prisma.challenge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const challengeWithIdOnly = await prisma.challenge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChallengeFindManyArgs>(args?: SelectSubset<T, ChallengeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Challenge.
     * @param {ChallengeCreateArgs} args - Arguments to create a Challenge.
     * @example
     * // Create one Challenge
     * const Challenge = await prisma.challenge.create({
     *   data: {
     *     // ... data to create a Challenge
     *   }
     * })
     * 
     */
    create<T extends ChallengeCreateArgs>(args: SelectSubset<T, ChallengeCreateArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Challenges.
     * @param {ChallengeCreateManyArgs} args - Arguments to create many Challenges.
     * @example
     * // Create many Challenges
     * const challenge = await prisma.challenge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChallengeCreateManyArgs>(args?: SelectSubset<T, ChallengeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Challenges and returns the data saved in the database.
     * @param {ChallengeCreateManyAndReturnArgs} args - Arguments to create many Challenges.
     * @example
     * // Create many Challenges
     * const challenge = await prisma.challenge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Challenges and only return the `id`
     * const challengeWithIdOnly = await prisma.challenge.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChallengeCreateManyAndReturnArgs>(args?: SelectSubset<T, ChallengeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Challenge.
     * @param {ChallengeDeleteArgs} args - Arguments to delete one Challenge.
     * @example
     * // Delete one Challenge
     * const Challenge = await prisma.challenge.delete({
     *   where: {
     *     // ... filter to delete one Challenge
     *   }
     * })
     * 
     */
    delete<T extends ChallengeDeleteArgs>(args: SelectSubset<T, ChallengeDeleteArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Challenge.
     * @param {ChallengeUpdateArgs} args - Arguments to update one Challenge.
     * @example
     * // Update one Challenge
     * const challenge = await prisma.challenge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChallengeUpdateArgs>(args: SelectSubset<T, ChallengeUpdateArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Challenges.
     * @param {ChallengeDeleteManyArgs} args - Arguments to filter Challenges to delete.
     * @example
     * // Delete a few Challenges
     * const { count } = await prisma.challenge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChallengeDeleteManyArgs>(args?: SelectSubset<T, ChallengeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Challenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Challenges
     * const challenge = await prisma.challenge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChallengeUpdateManyArgs>(args: SelectSubset<T, ChallengeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Challenge.
     * @param {ChallengeUpsertArgs} args - Arguments to update or create a Challenge.
     * @example
     * // Update or create a Challenge
     * const challenge = await prisma.challenge.upsert({
     *   create: {
     *     // ... data to create a Challenge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Challenge we want to update
     *   }
     * })
     */
    upsert<T extends ChallengeUpsertArgs>(args: SelectSubset<T, ChallengeUpsertArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Challenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeCountArgs} args - Arguments to filter Challenges to count.
     * @example
     * // Count the number of Challenges
     * const count = await prisma.challenge.count({
     *   where: {
     *     // ... the filter for the Challenges we want to count
     *   }
     * })
    **/
    count<T extends ChallengeCountArgs>(
      args?: Subset<T, ChallengeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChallengeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Challenge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChallengeAggregateArgs>(args: Subset<T, ChallengeAggregateArgs>): Prisma.PrismaPromise<GetChallengeAggregateType<T>>

    /**
     * Group by Challenge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChallengeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChallengeGroupByArgs['orderBy'] }
        : { orderBy?: ChallengeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChallengeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChallengeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Challenge model
   */
  readonly fields: ChallengeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Challenge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChallengeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    habit<T extends HabitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HabitDefaultArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    completions<T extends Challenge$completionsArgs<ExtArgs> = {}>(args?: Subset<T, Challenge$completionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChallengeCompletionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Challenge model
   */ 
  interface ChallengeFieldRefs {
    readonly id: FieldRef<"Challenge", 'String'>
    readonly habitId: FieldRef<"Challenge", 'String'>
    readonly creatorId: FieldRef<"Challenge", 'String'>
    readonly title: FieldRef<"Challenge", 'String'>
    readonly description: FieldRef<"Challenge", 'String'>
    readonly dueDate: FieldRef<"Challenge", 'DateTime'>
    readonly status: FieldRef<"Challenge", 'ChallengeStatus'>
    readonly createdAt: FieldRef<"Challenge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Challenge findUnique
   */
  export type ChallengeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenge to fetch.
     */
    where: ChallengeWhereUniqueInput
  }

  /**
   * Challenge findUniqueOrThrow
   */
  export type ChallengeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenge to fetch.
     */
    where: ChallengeWhereUniqueInput
  }

  /**
   * Challenge findFirst
   */
  export type ChallengeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenge to fetch.
     */
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     */
    orderBy?: ChallengeOrderByWithRelationInput | ChallengeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Challenges.
     */
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Challenges.
     */
    distinct?: ChallengeScalarFieldEnum | ChallengeScalarFieldEnum[]
  }

  /**
   * Challenge findFirstOrThrow
   */
  export type ChallengeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenge to fetch.
     */
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     */
    orderBy?: ChallengeOrderByWithRelationInput | ChallengeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Challenges.
     */
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Challenges.
     */
    distinct?: ChallengeScalarFieldEnum | ChallengeScalarFieldEnum[]
  }

  /**
   * Challenge findMany
   */
  export type ChallengeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenges to fetch.
     */
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     */
    orderBy?: ChallengeOrderByWithRelationInput | ChallengeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Challenges.
     */
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     */
    skip?: number
    distinct?: ChallengeScalarFieldEnum | ChallengeScalarFieldEnum[]
  }

  /**
   * Challenge create
   */
  export type ChallengeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * The data needed to create a Challenge.
     */
    data: XOR<ChallengeCreateInput, ChallengeUncheckedCreateInput>
  }

  /**
   * Challenge createMany
   */
  export type ChallengeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Challenges.
     */
    data: ChallengeCreateManyInput | ChallengeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Challenge createManyAndReturn
   */
  export type ChallengeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Challenges.
     */
    data: ChallengeCreateManyInput | ChallengeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Challenge update
   */
  export type ChallengeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * The data needed to update a Challenge.
     */
    data: XOR<ChallengeUpdateInput, ChallengeUncheckedUpdateInput>
    /**
     * Choose, which Challenge to update.
     */
    where: ChallengeWhereUniqueInput
  }

  /**
   * Challenge updateMany
   */
  export type ChallengeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Challenges.
     */
    data: XOR<ChallengeUpdateManyMutationInput, ChallengeUncheckedUpdateManyInput>
    /**
     * Filter which Challenges to update
     */
    where?: ChallengeWhereInput
  }

  /**
   * Challenge upsert
   */
  export type ChallengeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * The filter to search for the Challenge to update in case it exists.
     */
    where: ChallengeWhereUniqueInput
    /**
     * In case the Challenge found by the `where` argument doesn't exist, create a new Challenge with this data.
     */
    create: XOR<ChallengeCreateInput, ChallengeUncheckedCreateInput>
    /**
     * In case the Challenge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChallengeUpdateInput, ChallengeUncheckedUpdateInput>
  }

  /**
   * Challenge delete
   */
  export type ChallengeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter which Challenge to delete.
     */
    where: ChallengeWhereUniqueInput
  }

  /**
   * Challenge deleteMany
   */
  export type ChallengeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Challenges to delete
     */
    where?: ChallengeWhereInput
  }

  /**
   * Challenge.completions
   */
  export type Challenge$completionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCompletion
     */
    select?: ChallengeCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeCompletionInclude<ExtArgs> | null
    where?: ChallengeCompletionWhereInput
    orderBy?: ChallengeCompletionOrderByWithRelationInput | ChallengeCompletionOrderByWithRelationInput[]
    cursor?: ChallengeCompletionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChallengeCompletionScalarFieldEnum | ChallengeCompletionScalarFieldEnum[]
  }

  /**
   * Challenge without action
   */
  export type ChallengeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
  }


  /**
   * Model ChallengeCompletion
   */

  export type AggregateChallengeCompletion = {
    _count: ChallengeCompletionCountAggregateOutputType | null
    _min: ChallengeCompletionMinAggregateOutputType | null
    _max: ChallengeCompletionMaxAggregateOutputType | null
  }

  export type ChallengeCompletionMinAggregateOutputType = {
    id: string | null
    challengeId: string | null
    userId: string | null
    status: $Enums.CompletionStatus | null
    completedAt: Date | null
    feelingTags: string | null
    reflectionNote: string | null
    reflectionPrompt: string | null
  }

  export type ChallengeCompletionMaxAggregateOutputType = {
    id: string | null
    challengeId: string | null
    userId: string | null
    status: $Enums.CompletionStatus | null
    completedAt: Date | null
    feelingTags: string | null
    reflectionNote: string | null
    reflectionPrompt: string | null
  }

  export type ChallengeCompletionCountAggregateOutputType = {
    id: number
    challengeId: number
    userId: number
    status: number
    completedAt: number
    feelingTags: number
    reflectionNote: number
    reflectionPrompt: number
    _all: number
  }


  export type ChallengeCompletionMinAggregateInputType = {
    id?: true
    challengeId?: true
    userId?: true
    status?: true
    completedAt?: true
    feelingTags?: true
    reflectionNote?: true
    reflectionPrompt?: true
  }

  export type ChallengeCompletionMaxAggregateInputType = {
    id?: true
    challengeId?: true
    userId?: true
    status?: true
    completedAt?: true
    feelingTags?: true
    reflectionNote?: true
    reflectionPrompt?: true
  }

  export type ChallengeCompletionCountAggregateInputType = {
    id?: true
    challengeId?: true
    userId?: true
    status?: true
    completedAt?: true
    feelingTags?: true
    reflectionNote?: true
    reflectionPrompt?: true
    _all?: true
  }

  export type ChallengeCompletionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChallengeCompletion to aggregate.
     */
    where?: ChallengeCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChallengeCompletions to fetch.
     */
    orderBy?: ChallengeCompletionOrderByWithRelationInput | ChallengeCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChallengeCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChallengeCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChallengeCompletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChallengeCompletions
    **/
    _count?: true | ChallengeCompletionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChallengeCompletionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChallengeCompletionMaxAggregateInputType
  }

  export type GetChallengeCompletionAggregateType<T extends ChallengeCompletionAggregateArgs> = {
        [P in keyof T & keyof AggregateChallengeCompletion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChallengeCompletion[P]>
      : GetScalarType<T[P], AggregateChallengeCompletion[P]>
  }




  export type ChallengeCompletionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChallengeCompletionWhereInput
    orderBy?: ChallengeCompletionOrderByWithAggregationInput | ChallengeCompletionOrderByWithAggregationInput[]
    by: ChallengeCompletionScalarFieldEnum[] | ChallengeCompletionScalarFieldEnum
    having?: ChallengeCompletionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChallengeCompletionCountAggregateInputType | true
    _min?: ChallengeCompletionMinAggregateInputType
    _max?: ChallengeCompletionMaxAggregateInputType
  }

  export type ChallengeCompletionGroupByOutputType = {
    id: string
    challengeId: string
    userId: string
    status: $Enums.CompletionStatus
    completedAt: Date
    feelingTags: string | null
    reflectionNote: string | null
    reflectionPrompt: string | null
    _count: ChallengeCompletionCountAggregateOutputType | null
    _min: ChallengeCompletionMinAggregateOutputType | null
    _max: ChallengeCompletionMaxAggregateOutputType | null
  }

  type GetChallengeCompletionGroupByPayload<T extends ChallengeCompletionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChallengeCompletionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChallengeCompletionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChallengeCompletionGroupByOutputType[P]>
            : GetScalarType<T[P], ChallengeCompletionGroupByOutputType[P]>
        }
      >
    >


  export type ChallengeCompletionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    challengeId?: boolean
    userId?: boolean
    status?: boolean
    completedAt?: boolean
    feelingTags?: boolean
    reflectionNote?: boolean
    reflectionPrompt?: boolean
    challenge?: boolean | ChallengeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["challengeCompletion"]>

  export type ChallengeCompletionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    challengeId?: boolean
    userId?: boolean
    status?: boolean
    completedAt?: boolean
    feelingTags?: boolean
    reflectionNote?: boolean
    reflectionPrompt?: boolean
    challenge?: boolean | ChallengeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["challengeCompletion"]>

  export type ChallengeCompletionSelectScalar = {
    id?: boolean
    challengeId?: boolean
    userId?: boolean
    status?: boolean
    completedAt?: boolean
    feelingTags?: boolean
    reflectionNote?: boolean
    reflectionPrompt?: boolean
  }

  export type ChallengeCompletionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    challenge?: boolean | ChallengeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChallengeCompletionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    challenge?: boolean | ChallengeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ChallengeCompletionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChallengeCompletion"
    objects: {
      challenge: Prisma.$ChallengePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      challengeId: string
      userId: string
      status: $Enums.CompletionStatus
      completedAt: Date
      feelingTags: string | null
      reflectionNote: string | null
      reflectionPrompt: string | null
    }, ExtArgs["result"]["challengeCompletion"]>
    composites: {}
  }

  type ChallengeCompletionGetPayload<S extends boolean | null | undefined | ChallengeCompletionDefaultArgs> = $Result.GetResult<Prisma.$ChallengeCompletionPayload, S>

  type ChallengeCompletionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChallengeCompletionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChallengeCompletionCountAggregateInputType | true
    }

  export interface ChallengeCompletionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChallengeCompletion'], meta: { name: 'ChallengeCompletion' } }
    /**
     * Find zero or one ChallengeCompletion that matches the filter.
     * @param {ChallengeCompletionFindUniqueArgs} args - Arguments to find a ChallengeCompletion
     * @example
     * // Get one ChallengeCompletion
     * const challengeCompletion = await prisma.challengeCompletion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChallengeCompletionFindUniqueArgs>(args: SelectSubset<T, ChallengeCompletionFindUniqueArgs<ExtArgs>>): Prisma__ChallengeCompletionClient<$Result.GetResult<Prisma.$ChallengeCompletionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChallengeCompletion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChallengeCompletionFindUniqueOrThrowArgs} args - Arguments to find a ChallengeCompletion
     * @example
     * // Get one ChallengeCompletion
     * const challengeCompletion = await prisma.challengeCompletion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChallengeCompletionFindUniqueOrThrowArgs>(args: SelectSubset<T, ChallengeCompletionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChallengeCompletionClient<$Result.GetResult<Prisma.$ChallengeCompletionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChallengeCompletion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeCompletionFindFirstArgs} args - Arguments to find a ChallengeCompletion
     * @example
     * // Get one ChallengeCompletion
     * const challengeCompletion = await prisma.challengeCompletion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChallengeCompletionFindFirstArgs>(args?: SelectSubset<T, ChallengeCompletionFindFirstArgs<ExtArgs>>): Prisma__ChallengeCompletionClient<$Result.GetResult<Prisma.$ChallengeCompletionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChallengeCompletion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeCompletionFindFirstOrThrowArgs} args - Arguments to find a ChallengeCompletion
     * @example
     * // Get one ChallengeCompletion
     * const challengeCompletion = await prisma.challengeCompletion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChallengeCompletionFindFirstOrThrowArgs>(args?: SelectSubset<T, ChallengeCompletionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChallengeCompletionClient<$Result.GetResult<Prisma.$ChallengeCompletionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChallengeCompletions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeCompletionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChallengeCompletions
     * const challengeCompletions = await prisma.challengeCompletion.findMany()
     * 
     * // Get first 10 ChallengeCompletions
     * const challengeCompletions = await prisma.challengeCompletion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const challengeCompletionWithIdOnly = await prisma.challengeCompletion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChallengeCompletionFindManyArgs>(args?: SelectSubset<T, ChallengeCompletionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChallengeCompletionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChallengeCompletion.
     * @param {ChallengeCompletionCreateArgs} args - Arguments to create a ChallengeCompletion.
     * @example
     * // Create one ChallengeCompletion
     * const ChallengeCompletion = await prisma.challengeCompletion.create({
     *   data: {
     *     // ... data to create a ChallengeCompletion
     *   }
     * })
     * 
     */
    create<T extends ChallengeCompletionCreateArgs>(args: SelectSubset<T, ChallengeCompletionCreateArgs<ExtArgs>>): Prisma__ChallengeCompletionClient<$Result.GetResult<Prisma.$ChallengeCompletionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChallengeCompletions.
     * @param {ChallengeCompletionCreateManyArgs} args - Arguments to create many ChallengeCompletions.
     * @example
     * // Create many ChallengeCompletions
     * const challengeCompletion = await prisma.challengeCompletion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChallengeCompletionCreateManyArgs>(args?: SelectSubset<T, ChallengeCompletionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChallengeCompletions and returns the data saved in the database.
     * @param {ChallengeCompletionCreateManyAndReturnArgs} args - Arguments to create many ChallengeCompletions.
     * @example
     * // Create many ChallengeCompletions
     * const challengeCompletion = await prisma.challengeCompletion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChallengeCompletions and only return the `id`
     * const challengeCompletionWithIdOnly = await prisma.challengeCompletion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChallengeCompletionCreateManyAndReturnArgs>(args?: SelectSubset<T, ChallengeCompletionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChallengeCompletionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChallengeCompletion.
     * @param {ChallengeCompletionDeleteArgs} args - Arguments to delete one ChallengeCompletion.
     * @example
     * // Delete one ChallengeCompletion
     * const ChallengeCompletion = await prisma.challengeCompletion.delete({
     *   where: {
     *     // ... filter to delete one ChallengeCompletion
     *   }
     * })
     * 
     */
    delete<T extends ChallengeCompletionDeleteArgs>(args: SelectSubset<T, ChallengeCompletionDeleteArgs<ExtArgs>>): Prisma__ChallengeCompletionClient<$Result.GetResult<Prisma.$ChallengeCompletionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChallengeCompletion.
     * @param {ChallengeCompletionUpdateArgs} args - Arguments to update one ChallengeCompletion.
     * @example
     * // Update one ChallengeCompletion
     * const challengeCompletion = await prisma.challengeCompletion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChallengeCompletionUpdateArgs>(args: SelectSubset<T, ChallengeCompletionUpdateArgs<ExtArgs>>): Prisma__ChallengeCompletionClient<$Result.GetResult<Prisma.$ChallengeCompletionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChallengeCompletions.
     * @param {ChallengeCompletionDeleteManyArgs} args - Arguments to filter ChallengeCompletions to delete.
     * @example
     * // Delete a few ChallengeCompletions
     * const { count } = await prisma.challengeCompletion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChallengeCompletionDeleteManyArgs>(args?: SelectSubset<T, ChallengeCompletionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChallengeCompletions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeCompletionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChallengeCompletions
     * const challengeCompletion = await prisma.challengeCompletion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChallengeCompletionUpdateManyArgs>(args: SelectSubset<T, ChallengeCompletionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChallengeCompletion.
     * @param {ChallengeCompletionUpsertArgs} args - Arguments to update or create a ChallengeCompletion.
     * @example
     * // Update or create a ChallengeCompletion
     * const challengeCompletion = await prisma.challengeCompletion.upsert({
     *   create: {
     *     // ... data to create a ChallengeCompletion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChallengeCompletion we want to update
     *   }
     * })
     */
    upsert<T extends ChallengeCompletionUpsertArgs>(args: SelectSubset<T, ChallengeCompletionUpsertArgs<ExtArgs>>): Prisma__ChallengeCompletionClient<$Result.GetResult<Prisma.$ChallengeCompletionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChallengeCompletions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeCompletionCountArgs} args - Arguments to filter ChallengeCompletions to count.
     * @example
     * // Count the number of ChallengeCompletions
     * const count = await prisma.challengeCompletion.count({
     *   where: {
     *     // ... the filter for the ChallengeCompletions we want to count
     *   }
     * })
    **/
    count<T extends ChallengeCompletionCountArgs>(
      args?: Subset<T, ChallengeCompletionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChallengeCompletionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChallengeCompletion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeCompletionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChallengeCompletionAggregateArgs>(args: Subset<T, ChallengeCompletionAggregateArgs>): Prisma.PrismaPromise<GetChallengeCompletionAggregateType<T>>

    /**
     * Group by ChallengeCompletion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeCompletionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChallengeCompletionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChallengeCompletionGroupByArgs['orderBy'] }
        : { orderBy?: ChallengeCompletionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChallengeCompletionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChallengeCompletionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChallengeCompletion model
   */
  readonly fields: ChallengeCompletionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChallengeCompletion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChallengeCompletionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    challenge<T extends ChallengeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChallengeDefaultArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChallengeCompletion model
   */ 
  interface ChallengeCompletionFieldRefs {
    readonly id: FieldRef<"ChallengeCompletion", 'String'>
    readonly challengeId: FieldRef<"ChallengeCompletion", 'String'>
    readonly userId: FieldRef<"ChallengeCompletion", 'String'>
    readonly status: FieldRef<"ChallengeCompletion", 'CompletionStatus'>
    readonly completedAt: FieldRef<"ChallengeCompletion", 'DateTime'>
    readonly feelingTags: FieldRef<"ChallengeCompletion", 'String'>
    readonly reflectionNote: FieldRef<"ChallengeCompletion", 'String'>
    readonly reflectionPrompt: FieldRef<"ChallengeCompletion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ChallengeCompletion findUnique
   */
  export type ChallengeCompletionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCompletion
     */
    select?: ChallengeCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeCompletionInclude<ExtArgs> | null
    /**
     * Filter, which ChallengeCompletion to fetch.
     */
    where: ChallengeCompletionWhereUniqueInput
  }

  /**
   * ChallengeCompletion findUniqueOrThrow
   */
  export type ChallengeCompletionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCompletion
     */
    select?: ChallengeCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeCompletionInclude<ExtArgs> | null
    /**
     * Filter, which ChallengeCompletion to fetch.
     */
    where: ChallengeCompletionWhereUniqueInput
  }

  /**
   * ChallengeCompletion findFirst
   */
  export type ChallengeCompletionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCompletion
     */
    select?: ChallengeCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeCompletionInclude<ExtArgs> | null
    /**
     * Filter, which ChallengeCompletion to fetch.
     */
    where?: ChallengeCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChallengeCompletions to fetch.
     */
    orderBy?: ChallengeCompletionOrderByWithRelationInput | ChallengeCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChallengeCompletions.
     */
    cursor?: ChallengeCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChallengeCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChallengeCompletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChallengeCompletions.
     */
    distinct?: ChallengeCompletionScalarFieldEnum | ChallengeCompletionScalarFieldEnum[]
  }

  /**
   * ChallengeCompletion findFirstOrThrow
   */
  export type ChallengeCompletionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCompletion
     */
    select?: ChallengeCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeCompletionInclude<ExtArgs> | null
    /**
     * Filter, which ChallengeCompletion to fetch.
     */
    where?: ChallengeCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChallengeCompletions to fetch.
     */
    orderBy?: ChallengeCompletionOrderByWithRelationInput | ChallengeCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChallengeCompletions.
     */
    cursor?: ChallengeCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChallengeCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChallengeCompletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChallengeCompletions.
     */
    distinct?: ChallengeCompletionScalarFieldEnum | ChallengeCompletionScalarFieldEnum[]
  }

  /**
   * ChallengeCompletion findMany
   */
  export type ChallengeCompletionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCompletion
     */
    select?: ChallengeCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeCompletionInclude<ExtArgs> | null
    /**
     * Filter, which ChallengeCompletions to fetch.
     */
    where?: ChallengeCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChallengeCompletions to fetch.
     */
    orderBy?: ChallengeCompletionOrderByWithRelationInput | ChallengeCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChallengeCompletions.
     */
    cursor?: ChallengeCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChallengeCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChallengeCompletions.
     */
    skip?: number
    distinct?: ChallengeCompletionScalarFieldEnum | ChallengeCompletionScalarFieldEnum[]
  }

  /**
   * ChallengeCompletion create
   */
  export type ChallengeCompletionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCompletion
     */
    select?: ChallengeCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeCompletionInclude<ExtArgs> | null
    /**
     * The data needed to create a ChallengeCompletion.
     */
    data: XOR<ChallengeCompletionCreateInput, ChallengeCompletionUncheckedCreateInput>
  }

  /**
   * ChallengeCompletion createMany
   */
  export type ChallengeCompletionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChallengeCompletions.
     */
    data: ChallengeCompletionCreateManyInput | ChallengeCompletionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChallengeCompletion createManyAndReturn
   */
  export type ChallengeCompletionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCompletion
     */
    select?: ChallengeCompletionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChallengeCompletions.
     */
    data: ChallengeCompletionCreateManyInput | ChallengeCompletionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeCompletionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChallengeCompletion update
   */
  export type ChallengeCompletionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCompletion
     */
    select?: ChallengeCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeCompletionInclude<ExtArgs> | null
    /**
     * The data needed to update a ChallengeCompletion.
     */
    data: XOR<ChallengeCompletionUpdateInput, ChallengeCompletionUncheckedUpdateInput>
    /**
     * Choose, which ChallengeCompletion to update.
     */
    where: ChallengeCompletionWhereUniqueInput
  }

  /**
   * ChallengeCompletion updateMany
   */
  export type ChallengeCompletionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChallengeCompletions.
     */
    data: XOR<ChallengeCompletionUpdateManyMutationInput, ChallengeCompletionUncheckedUpdateManyInput>
    /**
     * Filter which ChallengeCompletions to update
     */
    where?: ChallengeCompletionWhereInput
  }

  /**
   * ChallengeCompletion upsert
   */
  export type ChallengeCompletionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCompletion
     */
    select?: ChallengeCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeCompletionInclude<ExtArgs> | null
    /**
     * The filter to search for the ChallengeCompletion to update in case it exists.
     */
    where: ChallengeCompletionWhereUniqueInput
    /**
     * In case the ChallengeCompletion found by the `where` argument doesn't exist, create a new ChallengeCompletion with this data.
     */
    create: XOR<ChallengeCompletionCreateInput, ChallengeCompletionUncheckedCreateInput>
    /**
     * In case the ChallengeCompletion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChallengeCompletionUpdateInput, ChallengeCompletionUncheckedUpdateInput>
  }

  /**
   * ChallengeCompletion delete
   */
  export type ChallengeCompletionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCompletion
     */
    select?: ChallengeCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeCompletionInclude<ExtArgs> | null
    /**
     * Filter which ChallengeCompletion to delete.
     */
    where: ChallengeCompletionWhereUniqueInput
  }

  /**
   * ChallengeCompletion deleteMany
   */
  export type ChallengeCompletionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChallengeCompletions to delete
     */
    where?: ChallengeCompletionWhereInput
  }

  /**
   * ChallengeCompletion without action
   */
  export type ChallengeCompletionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCompletion
     */
    select?: ChallengeCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeCompletionInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    partnershipId: string | null
    senderId: string | null
    content: string | null
    messageType: $Enums.MessageType | null
    createdAt: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    partnershipId: string | null
    senderId: string | null
    content: string | null
    messageType: $Enums.MessageType | null
    createdAt: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    partnershipId: number
    senderId: number
    content: number
    messageType: number
    createdAt: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    partnershipId?: true
    senderId?: true
    content?: true
    messageType?: true
    createdAt?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    partnershipId?: true
    senderId?: true
    content?: true
    messageType?: true
    createdAt?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    partnershipId?: true
    senderId?: true
    content?: true
    messageType?: true
    createdAt?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    partnershipId: string
    senderId: string
    content: string
    messageType: $Enums.MessageType
    createdAt: Date
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partnershipId?: boolean
    senderId?: boolean
    content?: boolean
    messageType?: boolean
    createdAt?: boolean
    partnership?: boolean | PartnershipDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partnershipId?: boolean
    senderId?: boolean
    content?: boolean
    messageType?: boolean
    createdAt?: boolean
    partnership?: boolean | PartnershipDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    partnershipId?: boolean
    senderId?: boolean
    content?: boolean
    messageType?: boolean
    createdAt?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partnership?: boolean | PartnershipDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partnership?: boolean | PartnershipDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      partnership: Prisma.$PartnershipPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      partnershipId: string
      senderId: string
      content: string
      messageType: $Enums.MessageType
      createdAt: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    partnership<T extends PartnershipDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PartnershipDefaultArgs<ExtArgs>>): Prisma__PartnershipClient<$Result.GetResult<Prisma.$PartnershipPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly partnershipId: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'String'>
    readonly content: FieldRef<"Message", 'String'>
    readonly messageType: FieldRef<"Message", 'MessageType'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model Nudge
   */

  export type AggregateNudge = {
    _count: NudgeCountAggregateOutputType | null
    _min: NudgeMinAggregateOutputType | null
    _max: NudgeMaxAggregateOutputType | null
  }

  export type NudgeMinAggregateOutputType = {
    id: string | null
    senderId: string | null
    receiverId: string | null
    nudgeType: $Enums.NudgeType | null
    message: string | null
    createdAt: Date | null
  }

  export type NudgeMaxAggregateOutputType = {
    id: string | null
    senderId: string | null
    receiverId: string | null
    nudgeType: $Enums.NudgeType | null
    message: string | null
    createdAt: Date | null
  }

  export type NudgeCountAggregateOutputType = {
    id: number
    senderId: number
    receiverId: number
    nudgeType: number
    message: number
    createdAt: number
    _all: number
  }


  export type NudgeMinAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    nudgeType?: true
    message?: true
    createdAt?: true
  }

  export type NudgeMaxAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    nudgeType?: true
    message?: true
    createdAt?: true
  }

  export type NudgeCountAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    nudgeType?: true
    message?: true
    createdAt?: true
    _all?: true
  }

  export type NudgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nudge to aggregate.
     */
    where?: NudgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nudges to fetch.
     */
    orderBy?: NudgeOrderByWithRelationInput | NudgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NudgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nudges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nudges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Nudges
    **/
    _count?: true | NudgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NudgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NudgeMaxAggregateInputType
  }

  export type GetNudgeAggregateType<T extends NudgeAggregateArgs> = {
        [P in keyof T & keyof AggregateNudge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNudge[P]>
      : GetScalarType<T[P], AggregateNudge[P]>
  }




  export type NudgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NudgeWhereInput
    orderBy?: NudgeOrderByWithAggregationInput | NudgeOrderByWithAggregationInput[]
    by: NudgeScalarFieldEnum[] | NudgeScalarFieldEnum
    having?: NudgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NudgeCountAggregateInputType | true
    _min?: NudgeMinAggregateInputType
    _max?: NudgeMaxAggregateInputType
  }

  export type NudgeGroupByOutputType = {
    id: string
    senderId: string
    receiverId: string
    nudgeType: $Enums.NudgeType
    message: string | null
    createdAt: Date
    _count: NudgeCountAggregateOutputType | null
    _min: NudgeMinAggregateOutputType | null
    _max: NudgeMaxAggregateOutputType | null
  }

  type GetNudgeGroupByPayload<T extends NudgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NudgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NudgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NudgeGroupByOutputType[P]>
            : GetScalarType<T[P], NudgeGroupByOutputType[P]>
        }
      >
    >


  export type NudgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    nudgeType?: boolean
    message?: boolean
    createdAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nudge"]>

  export type NudgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    nudgeType?: boolean
    message?: boolean
    createdAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nudge"]>

  export type NudgeSelectScalar = {
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    nudgeType?: boolean
    message?: boolean
    createdAt?: boolean
  }

  export type NudgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NudgeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NudgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Nudge"
    objects: {
      sender: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      senderId: string
      receiverId: string
      nudgeType: $Enums.NudgeType
      message: string | null
      createdAt: Date
    }, ExtArgs["result"]["nudge"]>
    composites: {}
  }

  type NudgeGetPayload<S extends boolean | null | undefined | NudgeDefaultArgs> = $Result.GetResult<Prisma.$NudgePayload, S>

  type NudgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NudgeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NudgeCountAggregateInputType | true
    }

  export interface NudgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Nudge'], meta: { name: 'Nudge' } }
    /**
     * Find zero or one Nudge that matches the filter.
     * @param {NudgeFindUniqueArgs} args - Arguments to find a Nudge
     * @example
     * // Get one Nudge
     * const nudge = await prisma.nudge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NudgeFindUniqueArgs>(args: SelectSubset<T, NudgeFindUniqueArgs<ExtArgs>>): Prisma__NudgeClient<$Result.GetResult<Prisma.$NudgePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Nudge that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NudgeFindUniqueOrThrowArgs} args - Arguments to find a Nudge
     * @example
     * // Get one Nudge
     * const nudge = await prisma.nudge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NudgeFindUniqueOrThrowArgs>(args: SelectSubset<T, NudgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NudgeClient<$Result.GetResult<Prisma.$NudgePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Nudge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NudgeFindFirstArgs} args - Arguments to find a Nudge
     * @example
     * // Get one Nudge
     * const nudge = await prisma.nudge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NudgeFindFirstArgs>(args?: SelectSubset<T, NudgeFindFirstArgs<ExtArgs>>): Prisma__NudgeClient<$Result.GetResult<Prisma.$NudgePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Nudge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NudgeFindFirstOrThrowArgs} args - Arguments to find a Nudge
     * @example
     * // Get one Nudge
     * const nudge = await prisma.nudge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NudgeFindFirstOrThrowArgs>(args?: SelectSubset<T, NudgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__NudgeClient<$Result.GetResult<Prisma.$NudgePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Nudges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NudgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nudges
     * const nudges = await prisma.nudge.findMany()
     * 
     * // Get first 10 Nudges
     * const nudges = await prisma.nudge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nudgeWithIdOnly = await prisma.nudge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NudgeFindManyArgs>(args?: SelectSubset<T, NudgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NudgePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Nudge.
     * @param {NudgeCreateArgs} args - Arguments to create a Nudge.
     * @example
     * // Create one Nudge
     * const Nudge = await prisma.nudge.create({
     *   data: {
     *     // ... data to create a Nudge
     *   }
     * })
     * 
     */
    create<T extends NudgeCreateArgs>(args: SelectSubset<T, NudgeCreateArgs<ExtArgs>>): Prisma__NudgeClient<$Result.GetResult<Prisma.$NudgePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Nudges.
     * @param {NudgeCreateManyArgs} args - Arguments to create many Nudges.
     * @example
     * // Create many Nudges
     * const nudge = await prisma.nudge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NudgeCreateManyArgs>(args?: SelectSubset<T, NudgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Nudges and returns the data saved in the database.
     * @param {NudgeCreateManyAndReturnArgs} args - Arguments to create many Nudges.
     * @example
     * // Create many Nudges
     * const nudge = await prisma.nudge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Nudges and only return the `id`
     * const nudgeWithIdOnly = await prisma.nudge.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NudgeCreateManyAndReturnArgs>(args?: SelectSubset<T, NudgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NudgePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Nudge.
     * @param {NudgeDeleteArgs} args - Arguments to delete one Nudge.
     * @example
     * // Delete one Nudge
     * const Nudge = await prisma.nudge.delete({
     *   where: {
     *     // ... filter to delete one Nudge
     *   }
     * })
     * 
     */
    delete<T extends NudgeDeleteArgs>(args: SelectSubset<T, NudgeDeleteArgs<ExtArgs>>): Prisma__NudgeClient<$Result.GetResult<Prisma.$NudgePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Nudge.
     * @param {NudgeUpdateArgs} args - Arguments to update one Nudge.
     * @example
     * // Update one Nudge
     * const nudge = await prisma.nudge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NudgeUpdateArgs>(args: SelectSubset<T, NudgeUpdateArgs<ExtArgs>>): Prisma__NudgeClient<$Result.GetResult<Prisma.$NudgePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Nudges.
     * @param {NudgeDeleteManyArgs} args - Arguments to filter Nudges to delete.
     * @example
     * // Delete a few Nudges
     * const { count } = await prisma.nudge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NudgeDeleteManyArgs>(args?: SelectSubset<T, NudgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nudges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NudgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nudges
     * const nudge = await prisma.nudge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NudgeUpdateManyArgs>(args: SelectSubset<T, NudgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Nudge.
     * @param {NudgeUpsertArgs} args - Arguments to update or create a Nudge.
     * @example
     * // Update or create a Nudge
     * const nudge = await prisma.nudge.upsert({
     *   create: {
     *     // ... data to create a Nudge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nudge we want to update
     *   }
     * })
     */
    upsert<T extends NudgeUpsertArgs>(args: SelectSubset<T, NudgeUpsertArgs<ExtArgs>>): Prisma__NudgeClient<$Result.GetResult<Prisma.$NudgePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Nudges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NudgeCountArgs} args - Arguments to filter Nudges to count.
     * @example
     * // Count the number of Nudges
     * const count = await prisma.nudge.count({
     *   where: {
     *     // ... the filter for the Nudges we want to count
     *   }
     * })
    **/
    count<T extends NudgeCountArgs>(
      args?: Subset<T, NudgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NudgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nudge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NudgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NudgeAggregateArgs>(args: Subset<T, NudgeAggregateArgs>): Prisma.PrismaPromise<GetNudgeAggregateType<T>>

    /**
     * Group by Nudge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NudgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NudgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NudgeGroupByArgs['orderBy'] }
        : { orderBy?: NudgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NudgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNudgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Nudge model
   */
  readonly fields: NudgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Nudge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NudgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Nudge model
   */ 
  interface NudgeFieldRefs {
    readonly id: FieldRef<"Nudge", 'String'>
    readonly senderId: FieldRef<"Nudge", 'String'>
    readonly receiverId: FieldRef<"Nudge", 'String'>
    readonly nudgeType: FieldRef<"Nudge", 'NudgeType'>
    readonly message: FieldRef<"Nudge", 'String'>
    readonly createdAt: FieldRef<"Nudge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Nudge findUnique
   */
  export type NudgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nudge
     */
    select?: NudgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NudgeInclude<ExtArgs> | null
    /**
     * Filter, which Nudge to fetch.
     */
    where: NudgeWhereUniqueInput
  }

  /**
   * Nudge findUniqueOrThrow
   */
  export type NudgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nudge
     */
    select?: NudgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NudgeInclude<ExtArgs> | null
    /**
     * Filter, which Nudge to fetch.
     */
    where: NudgeWhereUniqueInput
  }

  /**
   * Nudge findFirst
   */
  export type NudgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nudge
     */
    select?: NudgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NudgeInclude<ExtArgs> | null
    /**
     * Filter, which Nudge to fetch.
     */
    where?: NudgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nudges to fetch.
     */
    orderBy?: NudgeOrderByWithRelationInput | NudgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nudges.
     */
    cursor?: NudgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nudges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nudges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nudges.
     */
    distinct?: NudgeScalarFieldEnum | NudgeScalarFieldEnum[]
  }

  /**
   * Nudge findFirstOrThrow
   */
  export type NudgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nudge
     */
    select?: NudgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NudgeInclude<ExtArgs> | null
    /**
     * Filter, which Nudge to fetch.
     */
    where?: NudgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nudges to fetch.
     */
    orderBy?: NudgeOrderByWithRelationInput | NudgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nudges.
     */
    cursor?: NudgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nudges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nudges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nudges.
     */
    distinct?: NudgeScalarFieldEnum | NudgeScalarFieldEnum[]
  }

  /**
   * Nudge findMany
   */
  export type NudgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nudge
     */
    select?: NudgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NudgeInclude<ExtArgs> | null
    /**
     * Filter, which Nudges to fetch.
     */
    where?: NudgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nudges to fetch.
     */
    orderBy?: NudgeOrderByWithRelationInput | NudgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Nudges.
     */
    cursor?: NudgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nudges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nudges.
     */
    skip?: number
    distinct?: NudgeScalarFieldEnum | NudgeScalarFieldEnum[]
  }

  /**
   * Nudge create
   */
  export type NudgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nudge
     */
    select?: NudgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NudgeInclude<ExtArgs> | null
    /**
     * The data needed to create a Nudge.
     */
    data: XOR<NudgeCreateInput, NudgeUncheckedCreateInput>
  }

  /**
   * Nudge createMany
   */
  export type NudgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Nudges.
     */
    data: NudgeCreateManyInput | NudgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Nudge createManyAndReturn
   */
  export type NudgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nudge
     */
    select?: NudgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Nudges.
     */
    data: NudgeCreateManyInput | NudgeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NudgeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Nudge update
   */
  export type NudgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nudge
     */
    select?: NudgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NudgeInclude<ExtArgs> | null
    /**
     * The data needed to update a Nudge.
     */
    data: XOR<NudgeUpdateInput, NudgeUncheckedUpdateInput>
    /**
     * Choose, which Nudge to update.
     */
    where: NudgeWhereUniqueInput
  }

  /**
   * Nudge updateMany
   */
  export type NudgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Nudges.
     */
    data: XOR<NudgeUpdateManyMutationInput, NudgeUncheckedUpdateManyInput>
    /**
     * Filter which Nudges to update
     */
    where?: NudgeWhereInput
  }

  /**
   * Nudge upsert
   */
  export type NudgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nudge
     */
    select?: NudgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NudgeInclude<ExtArgs> | null
    /**
     * The filter to search for the Nudge to update in case it exists.
     */
    where: NudgeWhereUniqueInput
    /**
     * In case the Nudge found by the `where` argument doesn't exist, create a new Nudge with this data.
     */
    create: XOR<NudgeCreateInput, NudgeUncheckedCreateInput>
    /**
     * In case the Nudge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NudgeUpdateInput, NudgeUncheckedUpdateInput>
  }

  /**
   * Nudge delete
   */
  export type NudgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nudge
     */
    select?: NudgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NudgeInclude<ExtArgs> | null
    /**
     * Filter which Nudge to delete.
     */
    where: NudgeWhereUniqueInput
  }

  /**
   * Nudge deleteMany
   */
  export type NudgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nudges to delete
     */
    where?: NudgeWhereInput
  }

  /**
   * Nudge without action
   */
  export type NudgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nudge
     */
    select?: NudgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NudgeInclude<ExtArgs> | null
  }


  /**
   * Model InspirationPost
   */

  export type AggregateInspirationPost = {
    _count: InspirationPostCountAggregateOutputType | null
    _min: InspirationPostMinAggregateOutputType | null
    _max: InspirationPostMaxAggregateOutputType | null
  }

  export type InspirationPostMinAggregateOutputType = {
    id: string | null
    authorId: string | null
    content: string | null
    category: string | null
    isAnonymous: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type InspirationPostMaxAggregateOutputType = {
    id: string | null
    authorId: string | null
    content: string | null
    category: string | null
    isAnonymous: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type InspirationPostCountAggregateOutputType = {
    id: number
    authorId: number
    content: number
    category: number
    isAnonymous: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type InspirationPostMinAggregateInputType = {
    id?: true
    authorId?: true
    content?: true
    category?: true
    isAnonymous?: true
    expiresAt?: true
    createdAt?: true
  }

  export type InspirationPostMaxAggregateInputType = {
    id?: true
    authorId?: true
    content?: true
    category?: true
    isAnonymous?: true
    expiresAt?: true
    createdAt?: true
  }

  export type InspirationPostCountAggregateInputType = {
    id?: true
    authorId?: true
    content?: true
    category?: true
    isAnonymous?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type InspirationPostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InspirationPost to aggregate.
     */
    where?: InspirationPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InspirationPosts to fetch.
     */
    orderBy?: InspirationPostOrderByWithRelationInput | InspirationPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InspirationPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InspirationPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InspirationPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InspirationPosts
    **/
    _count?: true | InspirationPostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InspirationPostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InspirationPostMaxAggregateInputType
  }

  export type GetInspirationPostAggregateType<T extends InspirationPostAggregateArgs> = {
        [P in keyof T & keyof AggregateInspirationPost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInspirationPost[P]>
      : GetScalarType<T[P], AggregateInspirationPost[P]>
  }




  export type InspirationPostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InspirationPostWhereInput
    orderBy?: InspirationPostOrderByWithAggregationInput | InspirationPostOrderByWithAggregationInput[]
    by: InspirationPostScalarFieldEnum[] | InspirationPostScalarFieldEnum
    having?: InspirationPostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InspirationPostCountAggregateInputType | true
    _min?: InspirationPostMinAggregateInputType
    _max?: InspirationPostMaxAggregateInputType
  }

  export type InspirationPostGroupByOutputType = {
    id: string
    authorId: string
    content: string
    category: string | null
    isAnonymous: boolean
    expiresAt: Date
    createdAt: Date
    _count: InspirationPostCountAggregateOutputType | null
    _min: InspirationPostMinAggregateOutputType | null
    _max: InspirationPostMaxAggregateOutputType | null
  }

  type GetInspirationPostGroupByPayload<T extends InspirationPostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InspirationPostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InspirationPostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InspirationPostGroupByOutputType[P]>
            : GetScalarType<T[P], InspirationPostGroupByOutputType[P]>
        }
      >
    >


  export type InspirationPostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
    content?: boolean
    category?: boolean
    isAnonymous?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    reactions?: boolean | InspirationPost$reactionsArgs<ExtArgs>
    _count?: boolean | InspirationPostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inspirationPost"]>

  export type InspirationPostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
    content?: boolean
    category?: boolean
    isAnonymous?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inspirationPost"]>

  export type InspirationPostSelectScalar = {
    id?: boolean
    authorId?: boolean
    content?: boolean
    category?: boolean
    isAnonymous?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type InspirationPostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    reactions?: boolean | InspirationPost$reactionsArgs<ExtArgs>
    _count?: boolean | InspirationPostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InspirationPostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InspirationPostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InspirationPost"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      reactions: Prisma.$InspirationReactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      authorId: string
      content: string
      category: string | null
      isAnonymous: boolean
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["inspirationPost"]>
    composites: {}
  }

  type InspirationPostGetPayload<S extends boolean | null | undefined | InspirationPostDefaultArgs> = $Result.GetResult<Prisma.$InspirationPostPayload, S>

  type InspirationPostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InspirationPostFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InspirationPostCountAggregateInputType | true
    }

  export interface InspirationPostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InspirationPost'], meta: { name: 'InspirationPost' } }
    /**
     * Find zero or one InspirationPost that matches the filter.
     * @param {InspirationPostFindUniqueArgs} args - Arguments to find a InspirationPost
     * @example
     * // Get one InspirationPost
     * const inspirationPost = await prisma.inspirationPost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InspirationPostFindUniqueArgs>(args: SelectSubset<T, InspirationPostFindUniqueArgs<ExtArgs>>): Prisma__InspirationPostClient<$Result.GetResult<Prisma.$InspirationPostPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InspirationPost that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InspirationPostFindUniqueOrThrowArgs} args - Arguments to find a InspirationPost
     * @example
     * // Get one InspirationPost
     * const inspirationPost = await prisma.inspirationPost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InspirationPostFindUniqueOrThrowArgs>(args: SelectSubset<T, InspirationPostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InspirationPostClient<$Result.GetResult<Prisma.$InspirationPostPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InspirationPost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspirationPostFindFirstArgs} args - Arguments to find a InspirationPost
     * @example
     * // Get one InspirationPost
     * const inspirationPost = await prisma.inspirationPost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InspirationPostFindFirstArgs>(args?: SelectSubset<T, InspirationPostFindFirstArgs<ExtArgs>>): Prisma__InspirationPostClient<$Result.GetResult<Prisma.$InspirationPostPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InspirationPost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspirationPostFindFirstOrThrowArgs} args - Arguments to find a InspirationPost
     * @example
     * // Get one InspirationPost
     * const inspirationPost = await prisma.inspirationPost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InspirationPostFindFirstOrThrowArgs>(args?: SelectSubset<T, InspirationPostFindFirstOrThrowArgs<ExtArgs>>): Prisma__InspirationPostClient<$Result.GetResult<Prisma.$InspirationPostPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InspirationPosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspirationPostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InspirationPosts
     * const inspirationPosts = await prisma.inspirationPost.findMany()
     * 
     * // Get first 10 InspirationPosts
     * const inspirationPosts = await prisma.inspirationPost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inspirationPostWithIdOnly = await prisma.inspirationPost.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InspirationPostFindManyArgs>(args?: SelectSubset<T, InspirationPostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InspirationPostPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InspirationPost.
     * @param {InspirationPostCreateArgs} args - Arguments to create a InspirationPost.
     * @example
     * // Create one InspirationPost
     * const InspirationPost = await prisma.inspirationPost.create({
     *   data: {
     *     // ... data to create a InspirationPost
     *   }
     * })
     * 
     */
    create<T extends InspirationPostCreateArgs>(args: SelectSubset<T, InspirationPostCreateArgs<ExtArgs>>): Prisma__InspirationPostClient<$Result.GetResult<Prisma.$InspirationPostPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InspirationPosts.
     * @param {InspirationPostCreateManyArgs} args - Arguments to create many InspirationPosts.
     * @example
     * // Create many InspirationPosts
     * const inspirationPost = await prisma.inspirationPost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InspirationPostCreateManyArgs>(args?: SelectSubset<T, InspirationPostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InspirationPosts and returns the data saved in the database.
     * @param {InspirationPostCreateManyAndReturnArgs} args - Arguments to create many InspirationPosts.
     * @example
     * // Create many InspirationPosts
     * const inspirationPost = await prisma.inspirationPost.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InspirationPosts and only return the `id`
     * const inspirationPostWithIdOnly = await prisma.inspirationPost.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InspirationPostCreateManyAndReturnArgs>(args?: SelectSubset<T, InspirationPostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InspirationPostPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a InspirationPost.
     * @param {InspirationPostDeleteArgs} args - Arguments to delete one InspirationPost.
     * @example
     * // Delete one InspirationPost
     * const InspirationPost = await prisma.inspirationPost.delete({
     *   where: {
     *     // ... filter to delete one InspirationPost
     *   }
     * })
     * 
     */
    delete<T extends InspirationPostDeleteArgs>(args: SelectSubset<T, InspirationPostDeleteArgs<ExtArgs>>): Prisma__InspirationPostClient<$Result.GetResult<Prisma.$InspirationPostPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InspirationPost.
     * @param {InspirationPostUpdateArgs} args - Arguments to update one InspirationPost.
     * @example
     * // Update one InspirationPost
     * const inspirationPost = await prisma.inspirationPost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InspirationPostUpdateArgs>(args: SelectSubset<T, InspirationPostUpdateArgs<ExtArgs>>): Prisma__InspirationPostClient<$Result.GetResult<Prisma.$InspirationPostPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InspirationPosts.
     * @param {InspirationPostDeleteManyArgs} args - Arguments to filter InspirationPosts to delete.
     * @example
     * // Delete a few InspirationPosts
     * const { count } = await prisma.inspirationPost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InspirationPostDeleteManyArgs>(args?: SelectSubset<T, InspirationPostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InspirationPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspirationPostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InspirationPosts
     * const inspirationPost = await prisma.inspirationPost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InspirationPostUpdateManyArgs>(args: SelectSubset<T, InspirationPostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InspirationPost.
     * @param {InspirationPostUpsertArgs} args - Arguments to update or create a InspirationPost.
     * @example
     * // Update or create a InspirationPost
     * const inspirationPost = await prisma.inspirationPost.upsert({
     *   create: {
     *     // ... data to create a InspirationPost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InspirationPost we want to update
     *   }
     * })
     */
    upsert<T extends InspirationPostUpsertArgs>(args: SelectSubset<T, InspirationPostUpsertArgs<ExtArgs>>): Prisma__InspirationPostClient<$Result.GetResult<Prisma.$InspirationPostPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InspirationPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspirationPostCountArgs} args - Arguments to filter InspirationPosts to count.
     * @example
     * // Count the number of InspirationPosts
     * const count = await prisma.inspirationPost.count({
     *   where: {
     *     // ... the filter for the InspirationPosts we want to count
     *   }
     * })
    **/
    count<T extends InspirationPostCountArgs>(
      args?: Subset<T, InspirationPostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InspirationPostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InspirationPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspirationPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InspirationPostAggregateArgs>(args: Subset<T, InspirationPostAggregateArgs>): Prisma.PrismaPromise<GetInspirationPostAggregateType<T>>

    /**
     * Group by InspirationPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspirationPostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InspirationPostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InspirationPostGroupByArgs['orderBy'] }
        : { orderBy?: InspirationPostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InspirationPostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInspirationPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InspirationPost model
   */
  readonly fields: InspirationPostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InspirationPost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InspirationPostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reactions<T extends InspirationPost$reactionsArgs<ExtArgs> = {}>(args?: Subset<T, InspirationPost$reactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InspirationReactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InspirationPost model
   */ 
  interface InspirationPostFieldRefs {
    readonly id: FieldRef<"InspirationPost", 'String'>
    readonly authorId: FieldRef<"InspirationPost", 'String'>
    readonly content: FieldRef<"InspirationPost", 'String'>
    readonly category: FieldRef<"InspirationPost", 'String'>
    readonly isAnonymous: FieldRef<"InspirationPost", 'Boolean'>
    readonly expiresAt: FieldRef<"InspirationPost", 'DateTime'>
    readonly createdAt: FieldRef<"InspirationPost", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InspirationPost findUnique
   */
  export type InspirationPostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationPost
     */
    select?: InspirationPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationPostInclude<ExtArgs> | null
    /**
     * Filter, which InspirationPost to fetch.
     */
    where: InspirationPostWhereUniqueInput
  }

  /**
   * InspirationPost findUniqueOrThrow
   */
  export type InspirationPostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationPost
     */
    select?: InspirationPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationPostInclude<ExtArgs> | null
    /**
     * Filter, which InspirationPost to fetch.
     */
    where: InspirationPostWhereUniqueInput
  }

  /**
   * InspirationPost findFirst
   */
  export type InspirationPostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationPost
     */
    select?: InspirationPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationPostInclude<ExtArgs> | null
    /**
     * Filter, which InspirationPost to fetch.
     */
    where?: InspirationPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InspirationPosts to fetch.
     */
    orderBy?: InspirationPostOrderByWithRelationInput | InspirationPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InspirationPosts.
     */
    cursor?: InspirationPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InspirationPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InspirationPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InspirationPosts.
     */
    distinct?: InspirationPostScalarFieldEnum | InspirationPostScalarFieldEnum[]
  }

  /**
   * InspirationPost findFirstOrThrow
   */
  export type InspirationPostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationPost
     */
    select?: InspirationPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationPostInclude<ExtArgs> | null
    /**
     * Filter, which InspirationPost to fetch.
     */
    where?: InspirationPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InspirationPosts to fetch.
     */
    orderBy?: InspirationPostOrderByWithRelationInput | InspirationPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InspirationPosts.
     */
    cursor?: InspirationPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InspirationPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InspirationPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InspirationPosts.
     */
    distinct?: InspirationPostScalarFieldEnum | InspirationPostScalarFieldEnum[]
  }

  /**
   * InspirationPost findMany
   */
  export type InspirationPostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationPost
     */
    select?: InspirationPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationPostInclude<ExtArgs> | null
    /**
     * Filter, which InspirationPosts to fetch.
     */
    where?: InspirationPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InspirationPosts to fetch.
     */
    orderBy?: InspirationPostOrderByWithRelationInput | InspirationPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InspirationPosts.
     */
    cursor?: InspirationPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InspirationPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InspirationPosts.
     */
    skip?: number
    distinct?: InspirationPostScalarFieldEnum | InspirationPostScalarFieldEnum[]
  }

  /**
   * InspirationPost create
   */
  export type InspirationPostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationPost
     */
    select?: InspirationPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationPostInclude<ExtArgs> | null
    /**
     * The data needed to create a InspirationPost.
     */
    data: XOR<InspirationPostCreateInput, InspirationPostUncheckedCreateInput>
  }

  /**
   * InspirationPost createMany
   */
  export type InspirationPostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InspirationPosts.
     */
    data: InspirationPostCreateManyInput | InspirationPostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InspirationPost createManyAndReturn
   */
  export type InspirationPostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationPost
     */
    select?: InspirationPostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many InspirationPosts.
     */
    data: InspirationPostCreateManyInput | InspirationPostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationPostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InspirationPost update
   */
  export type InspirationPostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationPost
     */
    select?: InspirationPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationPostInclude<ExtArgs> | null
    /**
     * The data needed to update a InspirationPost.
     */
    data: XOR<InspirationPostUpdateInput, InspirationPostUncheckedUpdateInput>
    /**
     * Choose, which InspirationPost to update.
     */
    where: InspirationPostWhereUniqueInput
  }

  /**
   * InspirationPost updateMany
   */
  export type InspirationPostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InspirationPosts.
     */
    data: XOR<InspirationPostUpdateManyMutationInput, InspirationPostUncheckedUpdateManyInput>
    /**
     * Filter which InspirationPosts to update
     */
    where?: InspirationPostWhereInput
  }

  /**
   * InspirationPost upsert
   */
  export type InspirationPostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationPost
     */
    select?: InspirationPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationPostInclude<ExtArgs> | null
    /**
     * The filter to search for the InspirationPost to update in case it exists.
     */
    where: InspirationPostWhereUniqueInput
    /**
     * In case the InspirationPost found by the `where` argument doesn't exist, create a new InspirationPost with this data.
     */
    create: XOR<InspirationPostCreateInput, InspirationPostUncheckedCreateInput>
    /**
     * In case the InspirationPost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InspirationPostUpdateInput, InspirationPostUncheckedUpdateInput>
  }

  /**
   * InspirationPost delete
   */
  export type InspirationPostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationPost
     */
    select?: InspirationPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationPostInclude<ExtArgs> | null
    /**
     * Filter which InspirationPost to delete.
     */
    where: InspirationPostWhereUniqueInput
  }

  /**
   * InspirationPost deleteMany
   */
  export type InspirationPostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InspirationPosts to delete
     */
    where?: InspirationPostWhereInput
  }

  /**
   * InspirationPost.reactions
   */
  export type InspirationPost$reactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationReaction
     */
    select?: InspirationReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationReactionInclude<ExtArgs> | null
    where?: InspirationReactionWhereInput
    orderBy?: InspirationReactionOrderByWithRelationInput | InspirationReactionOrderByWithRelationInput[]
    cursor?: InspirationReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InspirationReactionScalarFieldEnum | InspirationReactionScalarFieldEnum[]
  }

  /**
   * InspirationPost without action
   */
  export type InspirationPostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationPost
     */
    select?: InspirationPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationPostInclude<ExtArgs> | null
  }


  /**
   * Model InspirationReaction
   */

  export type AggregateInspirationReaction = {
    _count: InspirationReactionCountAggregateOutputType | null
    _min: InspirationReactionMinAggregateOutputType | null
    _max: InspirationReactionMaxAggregateOutputType | null
  }

  export type InspirationReactionMinAggregateOutputType = {
    id: string | null
    postId: string | null
    userId: string | null
    reaction: $Enums.ReactionType | null
    createdAt: Date | null
  }

  export type InspirationReactionMaxAggregateOutputType = {
    id: string | null
    postId: string | null
    userId: string | null
    reaction: $Enums.ReactionType | null
    createdAt: Date | null
  }

  export type InspirationReactionCountAggregateOutputType = {
    id: number
    postId: number
    userId: number
    reaction: number
    createdAt: number
    _all: number
  }


  export type InspirationReactionMinAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    reaction?: true
    createdAt?: true
  }

  export type InspirationReactionMaxAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    reaction?: true
    createdAt?: true
  }

  export type InspirationReactionCountAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    reaction?: true
    createdAt?: true
    _all?: true
  }

  export type InspirationReactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InspirationReaction to aggregate.
     */
    where?: InspirationReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InspirationReactions to fetch.
     */
    orderBy?: InspirationReactionOrderByWithRelationInput | InspirationReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InspirationReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InspirationReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InspirationReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InspirationReactions
    **/
    _count?: true | InspirationReactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InspirationReactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InspirationReactionMaxAggregateInputType
  }

  export type GetInspirationReactionAggregateType<T extends InspirationReactionAggregateArgs> = {
        [P in keyof T & keyof AggregateInspirationReaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInspirationReaction[P]>
      : GetScalarType<T[P], AggregateInspirationReaction[P]>
  }




  export type InspirationReactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InspirationReactionWhereInput
    orderBy?: InspirationReactionOrderByWithAggregationInput | InspirationReactionOrderByWithAggregationInput[]
    by: InspirationReactionScalarFieldEnum[] | InspirationReactionScalarFieldEnum
    having?: InspirationReactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InspirationReactionCountAggregateInputType | true
    _min?: InspirationReactionMinAggregateInputType
    _max?: InspirationReactionMaxAggregateInputType
  }

  export type InspirationReactionGroupByOutputType = {
    id: string
    postId: string
    userId: string
    reaction: $Enums.ReactionType
    createdAt: Date
    _count: InspirationReactionCountAggregateOutputType | null
    _min: InspirationReactionMinAggregateOutputType | null
    _max: InspirationReactionMaxAggregateOutputType | null
  }

  type GetInspirationReactionGroupByPayload<T extends InspirationReactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InspirationReactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InspirationReactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InspirationReactionGroupByOutputType[P]>
            : GetScalarType<T[P], InspirationReactionGroupByOutputType[P]>
        }
      >
    >


  export type InspirationReactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    reaction?: boolean
    createdAt?: boolean
    post?: boolean | InspirationPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inspirationReaction"]>

  export type InspirationReactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    reaction?: boolean
    createdAt?: boolean
    post?: boolean | InspirationPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inspirationReaction"]>

  export type InspirationReactionSelectScalar = {
    id?: boolean
    postId?: boolean
    userId?: boolean
    reaction?: boolean
    createdAt?: boolean
  }

  export type InspirationReactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | InspirationPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InspirationReactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | InspirationPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InspirationReactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InspirationReaction"
    objects: {
      post: Prisma.$InspirationPostPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      postId: string
      userId: string
      reaction: $Enums.ReactionType
      createdAt: Date
    }, ExtArgs["result"]["inspirationReaction"]>
    composites: {}
  }

  type InspirationReactionGetPayload<S extends boolean | null | undefined | InspirationReactionDefaultArgs> = $Result.GetResult<Prisma.$InspirationReactionPayload, S>

  type InspirationReactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InspirationReactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InspirationReactionCountAggregateInputType | true
    }

  export interface InspirationReactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InspirationReaction'], meta: { name: 'InspirationReaction' } }
    /**
     * Find zero or one InspirationReaction that matches the filter.
     * @param {InspirationReactionFindUniqueArgs} args - Arguments to find a InspirationReaction
     * @example
     * // Get one InspirationReaction
     * const inspirationReaction = await prisma.inspirationReaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InspirationReactionFindUniqueArgs>(args: SelectSubset<T, InspirationReactionFindUniqueArgs<ExtArgs>>): Prisma__InspirationReactionClient<$Result.GetResult<Prisma.$InspirationReactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InspirationReaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InspirationReactionFindUniqueOrThrowArgs} args - Arguments to find a InspirationReaction
     * @example
     * // Get one InspirationReaction
     * const inspirationReaction = await prisma.inspirationReaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InspirationReactionFindUniqueOrThrowArgs>(args: SelectSubset<T, InspirationReactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InspirationReactionClient<$Result.GetResult<Prisma.$InspirationReactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InspirationReaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspirationReactionFindFirstArgs} args - Arguments to find a InspirationReaction
     * @example
     * // Get one InspirationReaction
     * const inspirationReaction = await prisma.inspirationReaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InspirationReactionFindFirstArgs>(args?: SelectSubset<T, InspirationReactionFindFirstArgs<ExtArgs>>): Prisma__InspirationReactionClient<$Result.GetResult<Prisma.$InspirationReactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InspirationReaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspirationReactionFindFirstOrThrowArgs} args - Arguments to find a InspirationReaction
     * @example
     * // Get one InspirationReaction
     * const inspirationReaction = await prisma.inspirationReaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InspirationReactionFindFirstOrThrowArgs>(args?: SelectSubset<T, InspirationReactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__InspirationReactionClient<$Result.GetResult<Prisma.$InspirationReactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InspirationReactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspirationReactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InspirationReactions
     * const inspirationReactions = await prisma.inspirationReaction.findMany()
     * 
     * // Get first 10 InspirationReactions
     * const inspirationReactions = await prisma.inspirationReaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inspirationReactionWithIdOnly = await prisma.inspirationReaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InspirationReactionFindManyArgs>(args?: SelectSubset<T, InspirationReactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InspirationReactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InspirationReaction.
     * @param {InspirationReactionCreateArgs} args - Arguments to create a InspirationReaction.
     * @example
     * // Create one InspirationReaction
     * const InspirationReaction = await prisma.inspirationReaction.create({
     *   data: {
     *     // ... data to create a InspirationReaction
     *   }
     * })
     * 
     */
    create<T extends InspirationReactionCreateArgs>(args: SelectSubset<T, InspirationReactionCreateArgs<ExtArgs>>): Prisma__InspirationReactionClient<$Result.GetResult<Prisma.$InspirationReactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InspirationReactions.
     * @param {InspirationReactionCreateManyArgs} args - Arguments to create many InspirationReactions.
     * @example
     * // Create many InspirationReactions
     * const inspirationReaction = await prisma.inspirationReaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InspirationReactionCreateManyArgs>(args?: SelectSubset<T, InspirationReactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InspirationReactions and returns the data saved in the database.
     * @param {InspirationReactionCreateManyAndReturnArgs} args - Arguments to create many InspirationReactions.
     * @example
     * // Create many InspirationReactions
     * const inspirationReaction = await prisma.inspirationReaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InspirationReactions and only return the `id`
     * const inspirationReactionWithIdOnly = await prisma.inspirationReaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InspirationReactionCreateManyAndReturnArgs>(args?: SelectSubset<T, InspirationReactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InspirationReactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a InspirationReaction.
     * @param {InspirationReactionDeleteArgs} args - Arguments to delete one InspirationReaction.
     * @example
     * // Delete one InspirationReaction
     * const InspirationReaction = await prisma.inspirationReaction.delete({
     *   where: {
     *     // ... filter to delete one InspirationReaction
     *   }
     * })
     * 
     */
    delete<T extends InspirationReactionDeleteArgs>(args: SelectSubset<T, InspirationReactionDeleteArgs<ExtArgs>>): Prisma__InspirationReactionClient<$Result.GetResult<Prisma.$InspirationReactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InspirationReaction.
     * @param {InspirationReactionUpdateArgs} args - Arguments to update one InspirationReaction.
     * @example
     * // Update one InspirationReaction
     * const inspirationReaction = await prisma.inspirationReaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InspirationReactionUpdateArgs>(args: SelectSubset<T, InspirationReactionUpdateArgs<ExtArgs>>): Prisma__InspirationReactionClient<$Result.GetResult<Prisma.$InspirationReactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InspirationReactions.
     * @param {InspirationReactionDeleteManyArgs} args - Arguments to filter InspirationReactions to delete.
     * @example
     * // Delete a few InspirationReactions
     * const { count } = await prisma.inspirationReaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InspirationReactionDeleteManyArgs>(args?: SelectSubset<T, InspirationReactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InspirationReactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspirationReactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InspirationReactions
     * const inspirationReaction = await prisma.inspirationReaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InspirationReactionUpdateManyArgs>(args: SelectSubset<T, InspirationReactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InspirationReaction.
     * @param {InspirationReactionUpsertArgs} args - Arguments to update or create a InspirationReaction.
     * @example
     * // Update or create a InspirationReaction
     * const inspirationReaction = await prisma.inspirationReaction.upsert({
     *   create: {
     *     // ... data to create a InspirationReaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InspirationReaction we want to update
     *   }
     * })
     */
    upsert<T extends InspirationReactionUpsertArgs>(args: SelectSubset<T, InspirationReactionUpsertArgs<ExtArgs>>): Prisma__InspirationReactionClient<$Result.GetResult<Prisma.$InspirationReactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InspirationReactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspirationReactionCountArgs} args - Arguments to filter InspirationReactions to count.
     * @example
     * // Count the number of InspirationReactions
     * const count = await prisma.inspirationReaction.count({
     *   where: {
     *     // ... the filter for the InspirationReactions we want to count
     *   }
     * })
    **/
    count<T extends InspirationReactionCountArgs>(
      args?: Subset<T, InspirationReactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InspirationReactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InspirationReaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspirationReactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InspirationReactionAggregateArgs>(args: Subset<T, InspirationReactionAggregateArgs>): Prisma.PrismaPromise<GetInspirationReactionAggregateType<T>>

    /**
     * Group by InspirationReaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspirationReactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InspirationReactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InspirationReactionGroupByArgs['orderBy'] }
        : { orderBy?: InspirationReactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InspirationReactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInspirationReactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InspirationReaction model
   */
  readonly fields: InspirationReactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InspirationReaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InspirationReactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends InspirationPostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InspirationPostDefaultArgs<ExtArgs>>): Prisma__InspirationPostClient<$Result.GetResult<Prisma.$InspirationPostPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InspirationReaction model
   */ 
  interface InspirationReactionFieldRefs {
    readonly id: FieldRef<"InspirationReaction", 'String'>
    readonly postId: FieldRef<"InspirationReaction", 'String'>
    readonly userId: FieldRef<"InspirationReaction", 'String'>
    readonly reaction: FieldRef<"InspirationReaction", 'ReactionType'>
    readonly createdAt: FieldRef<"InspirationReaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InspirationReaction findUnique
   */
  export type InspirationReactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationReaction
     */
    select?: InspirationReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationReactionInclude<ExtArgs> | null
    /**
     * Filter, which InspirationReaction to fetch.
     */
    where: InspirationReactionWhereUniqueInput
  }

  /**
   * InspirationReaction findUniqueOrThrow
   */
  export type InspirationReactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationReaction
     */
    select?: InspirationReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationReactionInclude<ExtArgs> | null
    /**
     * Filter, which InspirationReaction to fetch.
     */
    where: InspirationReactionWhereUniqueInput
  }

  /**
   * InspirationReaction findFirst
   */
  export type InspirationReactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationReaction
     */
    select?: InspirationReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationReactionInclude<ExtArgs> | null
    /**
     * Filter, which InspirationReaction to fetch.
     */
    where?: InspirationReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InspirationReactions to fetch.
     */
    orderBy?: InspirationReactionOrderByWithRelationInput | InspirationReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InspirationReactions.
     */
    cursor?: InspirationReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InspirationReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InspirationReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InspirationReactions.
     */
    distinct?: InspirationReactionScalarFieldEnum | InspirationReactionScalarFieldEnum[]
  }

  /**
   * InspirationReaction findFirstOrThrow
   */
  export type InspirationReactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationReaction
     */
    select?: InspirationReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationReactionInclude<ExtArgs> | null
    /**
     * Filter, which InspirationReaction to fetch.
     */
    where?: InspirationReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InspirationReactions to fetch.
     */
    orderBy?: InspirationReactionOrderByWithRelationInput | InspirationReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InspirationReactions.
     */
    cursor?: InspirationReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InspirationReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InspirationReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InspirationReactions.
     */
    distinct?: InspirationReactionScalarFieldEnum | InspirationReactionScalarFieldEnum[]
  }

  /**
   * InspirationReaction findMany
   */
  export type InspirationReactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationReaction
     */
    select?: InspirationReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationReactionInclude<ExtArgs> | null
    /**
     * Filter, which InspirationReactions to fetch.
     */
    where?: InspirationReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InspirationReactions to fetch.
     */
    orderBy?: InspirationReactionOrderByWithRelationInput | InspirationReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InspirationReactions.
     */
    cursor?: InspirationReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InspirationReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InspirationReactions.
     */
    skip?: number
    distinct?: InspirationReactionScalarFieldEnum | InspirationReactionScalarFieldEnum[]
  }

  /**
   * InspirationReaction create
   */
  export type InspirationReactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationReaction
     */
    select?: InspirationReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationReactionInclude<ExtArgs> | null
    /**
     * The data needed to create a InspirationReaction.
     */
    data: XOR<InspirationReactionCreateInput, InspirationReactionUncheckedCreateInput>
  }

  /**
   * InspirationReaction createMany
   */
  export type InspirationReactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InspirationReactions.
     */
    data: InspirationReactionCreateManyInput | InspirationReactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InspirationReaction createManyAndReturn
   */
  export type InspirationReactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationReaction
     */
    select?: InspirationReactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many InspirationReactions.
     */
    data: InspirationReactionCreateManyInput | InspirationReactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationReactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InspirationReaction update
   */
  export type InspirationReactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationReaction
     */
    select?: InspirationReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationReactionInclude<ExtArgs> | null
    /**
     * The data needed to update a InspirationReaction.
     */
    data: XOR<InspirationReactionUpdateInput, InspirationReactionUncheckedUpdateInput>
    /**
     * Choose, which InspirationReaction to update.
     */
    where: InspirationReactionWhereUniqueInput
  }

  /**
   * InspirationReaction updateMany
   */
  export type InspirationReactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InspirationReactions.
     */
    data: XOR<InspirationReactionUpdateManyMutationInput, InspirationReactionUncheckedUpdateManyInput>
    /**
     * Filter which InspirationReactions to update
     */
    where?: InspirationReactionWhereInput
  }

  /**
   * InspirationReaction upsert
   */
  export type InspirationReactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationReaction
     */
    select?: InspirationReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationReactionInclude<ExtArgs> | null
    /**
     * The filter to search for the InspirationReaction to update in case it exists.
     */
    where: InspirationReactionWhereUniqueInput
    /**
     * In case the InspirationReaction found by the `where` argument doesn't exist, create a new InspirationReaction with this data.
     */
    create: XOR<InspirationReactionCreateInput, InspirationReactionUncheckedCreateInput>
    /**
     * In case the InspirationReaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InspirationReactionUpdateInput, InspirationReactionUncheckedUpdateInput>
  }

  /**
   * InspirationReaction delete
   */
  export type InspirationReactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationReaction
     */
    select?: InspirationReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationReactionInclude<ExtArgs> | null
    /**
     * Filter which InspirationReaction to delete.
     */
    where: InspirationReactionWhereUniqueInput
  }

  /**
   * InspirationReaction deleteMany
   */
  export type InspirationReactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InspirationReactions to delete
     */
    where?: InspirationReactionWhereInput
  }

  /**
   * InspirationReaction without action
   */
  export type InspirationReactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspirationReaction
     */
    select?: InspirationReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspirationReactionInclude<ExtArgs> | null
  }


  /**
   * Model Badge
   */

  export type AggregateBadge = {
    _count: BadgeCountAggregateOutputType | null
    _min: BadgeMinAggregateOutputType | null
    _max: BadgeMaxAggregateOutputType | null
  }

  export type BadgeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    iconName: string | null
    category: $Enums.BadgeCategory | null
    requirement: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type BadgeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    iconName: string | null
    category: $Enums.BadgeCategory | null
    requirement: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type BadgeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    iconName: number
    category: number
    requirement: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type BadgeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    iconName?: true
    category?: true
    requirement?: true
    isActive?: true
    createdAt?: true
  }

  export type BadgeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    iconName?: true
    category?: true
    requirement?: true
    isActive?: true
    createdAt?: true
  }

  export type BadgeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    iconName?: true
    category?: true
    requirement?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type BadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Badge to aggregate.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Badges
    **/
    _count?: true | BadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BadgeMaxAggregateInputType
  }

  export type GetBadgeAggregateType<T extends BadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBadge[P]>
      : GetScalarType<T[P], AggregateBadge[P]>
  }




  export type BadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BadgeWhereInput
    orderBy?: BadgeOrderByWithAggregationInput | BadgeOrderByWithAggregationInput[]
    by: BadgeScalarFieldEnum[] | BadgeScalarFieldEnum
    having?: BadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BadgeCountAggregateInputType | true
    _min?: BadgeMinAggregateInputType
    _max?: BadgeMaxAggregateInputType
  }

  export type BadgeGroupByOutputType = {
    id: string
    name: string
    description: string
    iconName: string
    category: $Enums.BadgeCategory
    requirement: string
    isActive: boolean
    createdAt: Date
    _count: BadgeCountAggregateOutputType | null
    _min: BadgeMinAggregateOutputType | null
    _max: BadgeMaxAggregateOutputType | null
  }

  type GetBadgeGroupByPayload<T extends BadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BadgeGroupByOutputType[P]>
            : GetScalarType<T[P], BadgeGroupByOutputType[P]>
        }
      >
    >


  export type BadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    iconName?: boolean
    category?: boolean
    requirement?: boolean
    isActive?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    iconName?: boolean
    category?: boolean
    requirement?: boolean
    isActive?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    iconName?: boolean
    category?: boolean
    requirement?: boolean
    isActive?: boolean
    createdAt?: boolean
  }


  export type $BadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Badge"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      iconName: string
      category: $Enums.BadgeCategory
      requirement: string
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["badge"]>
    composites: {}
  }

  type BadgeGetPayload<S extends boolean | null | undefined | BadgeDefaultArgs> = $Result.GetResult<Prisma.$BadgePayload, S>

  type BadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BadgeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BadgeCountAggregateInputType | true
    }

  export interface BadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Badge'], meta: { name: 'Badge' } }
    /**
     * Find zero or one Badge that matches the filter.
     * @param {BadgeFindUniqueArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BadgeFindUniqueArgs>(args: SelectSubset<T, BadgeFindUniqueArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Badge that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BadgeFindUniqueOrThrowArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, BadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Badge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindFirstArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BadgeFindFirstArgs>(args?: SelectSubset<T, BadgeFindFirstArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Badge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindFirstOrThrowArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, BadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Badges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Badges
     * const badges = await prisma.badge.findMany()
     * 
     * // Get first 10 Badges
     * const badges = await prisma.badge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const badgeWithIdOnly = await prisma.badge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BadgeFindManyArgs>(args?: SelectSubset<T, BadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Badge.
     * @param {BadgeCreateArgs} args - Arguments to create a Badge.
     * @example
     * // Create one Badge
     * const Badge = await prisma.badge.create({
     *   data: {
     *     // ... data to create a Badge
     *   }
     * })
     * 
     */
    create<T extends BadgeCreateArgs>(args: SelectSubset<T, BadgeCreateArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Badges.
     * @param {BadgeCreateManyArgs} args - Arguments to create many Badges.
     * @example
     * // Create many Badges
     * const badge = await prisma.badge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BadgeCreateManyArgs>(args?: SelectSubset<T, BadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Badges and returns the data saved in the database.
     * @param {BadgeCreateManyAndReturnArgs} args - Arguments to create many Badges.
     * @example
     * // Create many Badges
     * const badge = await prisma.badge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Badges and only return the `id`
     * const badgeWithIdOnly = await prisma.badge.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, BadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Badge.
     * @param {BadgeDeleteArgs} args - Arguments to delete one Badge.
     * @example
     * // Delete one Badge
     * const Badge = await prisma.badge.delete({
     *   where: {
     *     // ... filter to delete one Badge
     *   }
     * })
     * 
     */
    delete<T extends BadgeDeleteArgs>(args: SelectSubset<T, BadgeDeleteArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Badge.
     * @param {BadgeUpdateArgs} args - Arguments to update one Badge.
     * @example
     * // Update one Badge
     * const badge = await prisma.badge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BadgeUpdateArgs>(args: SelectSubset<T, BadgeUpdateArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Badges.
     * @param {BadgeDeleteManyArgs} args - Arguments to filter Badges to delete.
     * @example
     * // Delete a few Badges
     * const { count } = await prisma.badge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BadgeDeleteManyArgs>(args?: SelectSubset<T, BadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Badges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Badges
     * const badge = await prisma.badge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BadgeUpdateManyArgs>(args: SelectSubset<T, BadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Badge.
     * @param {BadgeUpsertArgs} args - Arguments to update or create a Badge.
     * @example
     * // Update or create a Badge
     * const badge = await prisma.badge.upsert({
     *   create: {
     *     // ... data to create a Badge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Badge we want to update
     *   }
     * })
     */
    upsert<T extends BadgeUpsertArgs>(args: SelectSubset<T, BadgeUpsertArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Badges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeCountArgs} args - Arguments to filter Badges to count.
     * @example
     * // Count the number of Badges
     * const count = await prisma.badge.count({
     *   where: {
     *     // ... the filter for the Badges we want to count
     *   }
     * })
    **/
    count<T extends BadgeCountArgs>(
      args?: Subset<T, BadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Badge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BadgeAggregateArgs>(args: Subset<T, BadgeAggregateArgs>): Prisma.PrismaPromise<GetBadgeAggregateType<T>>

    /**
     * Group by Badge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BadgeGroupByArgs['orderBy'] }
        : { orderBy?: BadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Badge model
   */
  readonly fields: BadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Badge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Badge model
   */ 
  interface BadgeFieldRefs {
    readonly id: FieldRef<"Badge", 'String'>
    readonly name: FieldRef<"Badge", 'String'>
    readonly description: FieldRef<"Badge", 'String'>
    readonly iconName: FieldRef<"Badge", 'String'>
    readonly category: FieldRef<"Badge", 'BadgeCategory'>
    readonly requirement: FieldRef<"Badge", 'String'>
    readonly isActive: FieldRef<"Badge", 'Boolean'>
    readonly createdAt: FieldRef<"Badge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Badge findUnique
   */
  export type BadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge findUniqueOrThrow
   */
  export type BadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge findFirst
   */
  export type BadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Badges.
     */
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge findFirstOrThrow
   */
  export type BadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Badges.
     */
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge findMany
   */
  export type BadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Filter, which Badges to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge create
   */
  export type BadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * The data needed to create a Badge.
     */
    data: XOR<BadgeCreateInput, BadgeUncheckedCreateInput>
  }

  /**
   * Badge createMany
   */
  export type BadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Badges.
     */
    data: BadgeCreateManyInput | BadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Badge createManyAndReturn
   */
  export type BadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Badges.
     */
    data: BadgeCreateManyInput | BadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Badge update
   */
  export type BadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * The data needed to update a Badge.
     */
    data: XOR<BadgeUpdateInput, BadgeUncheckedUpdateInput>
    /**
     * Choose, which Badge to update.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge updateMany
   */
  export type BadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Badges.
     */
    data: XOR<BadgeUpdateManyMutationInput, BadgeUncheckedUpdateManyInput>
    /**
     * Filter which Badges to update
     */
    where?: BadgeWhereInput
  }

  /**
   * Badge upsert
   */
  export type BadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * The filter to search for the Badge to update in case it exists.
     */
    where: BadgeWhereUniqueInput
    /**
     * In case the Badge found by the `where` argument doesn't exist, create a new Badge with this data.
     */
    create: XOR<BadgeCreateInput, BadgeUncheckedCreateInput>
    /**
     * In case the Badge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BadgeUpdateInput, BadgeUncheckedUpdateInput>
  }

  /**
   * Badge delete
   */
  export type BadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Filter which Badge to delete.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge deleteMany
   */
  export type BadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Badges to delete
     */
    where?: BadgeWhereInput
  }

  /**
   * Badge without action
   */
  export type BadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
  }


  /**
   * Model UserBadge
   */

  export type AggregateUserBadge = {
    _count: UserBadgeCountAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  export type UserBadgeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    badgeId: string | null
    earnedAt: Date | null
  }

  export type UserBadgeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    badgeId: string | null
    earnedAt: Date | null
  }

  export type UserBadgeCountAggregateOutputType = {
    id: number
    userId: number
    badgeId: number
    earnedAt: number
    _all: number
  }


  export type UserBadgeMinAggregateInputType = {
    id?: true
    userId?: true
    badgeId?: true
    earnedAt?: true
  }

  export type UserBadgeMaxAggregateInputType = {
    id?: true
    userId?: true
    badgeId?: true
    earnedAt?: true
  }

  export type UserBadgeCountAggregateInputType = {
    id?: true
    userId?: true
    badgeId?: true
    earnedAt?: true
    _all?: true
  }

  export type UserBadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadge to aggregate.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBadges
    **/
    _count?: true | UserBadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBadgeMaxAggregateInputType
  }

  export type GetUserBadgeAggregateType<T extends UserBadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBadge[P]>
      : GetScalarType<T[P], AggregateUserBadge[P]>
  }




  export type UserBadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithAggregationInput | UserBadgeOrderByWithAggregationInput[]
    by: UserBadgeScalarFieldEnum[] | UserBadgeScalarFieldEnum
    having?: UserBadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBadgeCountAggregateInputType | true
    _min?: UserBadgeMinAggregateInputType
    _max?: UserBadgeMaxAggregateInputType
  }

  export type UserBadgeGroupByOutputType = {
    id: string
    userId: string
    badgeId: string
    earnedAt: Date
    _count: UserBadgeCountAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  type GetUserBadgeGroupByPayload<T extends UserBadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserBadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserBadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
            : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
        }
      >
    >


  export type UserBadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    badgeId?: boolean
    earnedAt?: boolean
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    badgeId?: boolean
    earnedAt?: boolean
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectScalar = {
    id?: boolean
    userId?: boolean
    badgeId?: boolean
    earnedAt?: boolean
  }


  export type $UserBadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserBadge"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      badgeId: string
      earnedAt: Date
    }, ExtArgs["result"]["userBadge"]>
    composites: {}
  }

  type UserBadgeGetPayload<S extends boolean | null | undefined | UserBadgeDefaultArgs> = $Result.GetResult<Prisma.$UserBadgePayload, S>

  type UserBadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserBadgeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserBadgeCountAggregateInputType | true
    }

  export interface UserBadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserBadge'], meta: { name: 'UserBadge' } }
    /**
     * Find zero or one UserBadge that matches the filter.
     * @param {UserBadgeFindUniqueArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserBadgeFindUniqueArgs>(args: SelectSubset<T, UserBadgeFindUniqueArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserBadge that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserBadgeFindUniqueOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserBadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserBadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserBadge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserBadgeFindFirstArgs>(args?: SelectSubset<T, UserBadgeFindFirstArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserBadge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserBadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserBadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserBadges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBadges
     * const userBadges = await prisma.userBadge.findMany()
     * 
     * // Get first 10 UserBadges
     * const userBadges = await prisma.userBadge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserBadgeFindManyArgs>(args?: SelectSubset<T, UserBadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserBadge.
     * @param {UserBadgeCreateArgs} args - Arguments to create a UserBadge.
     * @example
     * // Create one UserBadge
     * const UserBadge = await prisma.userBadge.create({
     *   data: {
     *     // ... data to create a UserBadge
     *   }
     * })
     * 
     */
    create<T extends UserBadgeCreateArgs>(args: SelectSubset<T, UserBadgeCreateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserBadges.
     * @param {UserBadgeCreateManyArgs} args - Arguments to create many UserBadges.
     * @example
     * // Create many UserBadges
     * const userBadge = await prisma.userBadge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserBadgeCreateManyArgs>(args?: SelectSubset<T, UserBadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserBadges and returns the data saved in the database.
     * @param {UserBadgeCreateManyAndReturnArgs} args - Arguments to create many UserBadges.
     * @example
     * // Create many UserBadges
     * const userBadge = await prisma.userBadge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserBadges and only return the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserBadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, UserBadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserBadge.
     * @param {UserBadgeDeleteArgs} args - Arguments to delete one UserBadge.
     * @example
     * // Delete one UserBadge
     * const UserBadge = await prisma.userBadge.delete({
     *   where: {
     *     // ... filter to delete one UserBadge
     *   }
     * })
     * 
     */
    delete<T extends UserBadgeDeleteArgs>(args: SelectSubset<T, UserBadgeDeleteArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserBadge.
     * @param {UserBadgeUpdateArgs} args - Arguments to update one UserBadge.
     * @example
     * // Update one UserBadge
     * const userBadge = await prisma.userBadge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserBadgeUpdateArgs>(args: SelectSubset<T, UserBadgeUpdateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserBadges.
     * @param {UserBadgeDeleteManyArgs} args - Arguments to filter UserBadges to delete.
     * @example
     * // Delete a few UserBadges
     * const { count } = await prisma.userBadge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserBadgeDeleteManyArgs>(args?: SelectSubset<T, UserBadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBadges
     * const userBadge = await prisma.userBadge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserBadgeUpdateManyArgs>(args: SelectSubset<T, UserBadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserBadge.
     * @param {UserBadgeUpsertArgs} args - Arguments to update or create a UserBadge.
     * @example
     * // Update or create a UserBadge
     * const userBadge = await prisma.userBadge.upsert({
     *   create: {
     *     // ... data to create a UserBadge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBadge we want to update
     *   }
     * })
     */
    upsert<T extends UserBadgeUpsertArgs>(args: SelectSubset<T, UserBadgeUpsertArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeCountArgs} args - Arguments to filter UserBadges to count.
     * @example
     * // Count the number of UserBadges
     * const count = await prisma.userBadge.count({
     *   where: {
     *     // ... the filter for the UserBadges we want to count
     *   }
     * })
    **/
    count<T extends UserBadgeCountArgs>(
      args?: Subset<T, UserBadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBadgeAggregateArgs>(args: Subset<T, UserBadgeAggregateArgs>): Prisma.PrismaPromise<GetUserBadgeAggregateType<T>>

    /**
     * Group by UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBadgeGroupByArgs['orderBy'] }
        : { orderBy?: UserBadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserBadge model
   */
  readonly fields: UserBadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBadge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserBadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserBadge model
   */ 
  interface UserBadgeFieldRefs {
    readonly id: FieldRef<"UserBadge", 'String'>
    readonly userId: FieldRef<"UserBadge", 'String'>
    readonly badgeId: FieldRef<"UserBadge", 'String'>
    readonly earnedAt: FieldRef<"UserBadge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserBadge findUnique
   */
  export type UserBadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findUniqueOrThrow
   */
  export type UserBadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findFirst
   */
  export type UserBadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findFirstOrThrow
   */
  export type UserBadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findMany
   */
  export type UserBadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Filter, which UserBadges to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge create
   */
  export type UserBadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * The data needed to create a UserBadge.
     */
    data: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
  }

  /**
   * UserBadge createMany
   */
  export type UserBadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserBadges.
     */
    data: UserBadgeCreateManyInput | UserBadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserBadge createManyAndReturn
   */
  export type UserBadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserBadges.
     */
    data: UserBadgeCreateManyInput | UserBadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserBadge update
   */
  export type UserBadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * The data needed to update a UserBadge.
     */
    data: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
    /**
     * Choose, which UserBadge to update.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge updateMany
   */
  export type UserBadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserBadges.
     */
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyInput>
    /**
     * Filter which UserBadges to update
     */
    where?: UserBadgeWhereInput
  }

  /**
   * UserBadge upsert
   */
  export type UserBadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * The filter to search for the UserBadge to update in case it exists.
     */
    where: UserBadgeWhereUniqueInput
    /**
     * In case the UserBadge found by the `where` argument doesn't exist, create a new UserBadge with this data.
     */
    create: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
    /**
     * In case the UserBadge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
  }

  /**
   * UserBadge delete
   */
  export type UserBadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Filter which UserBadge to delete.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge deleteMany
   */
  export type UserBadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadges to delete
     */
    where?: UserBadgeWhereInput
  }

  /**
   * UserBadge without action
   */
  export type UserBadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    username: 'username',
    password: 'password',
    inviteCode: 'inviteCode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    timezone: 'timezone',
    reminderTime: 'reminderTime'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const PartnershipScalarFieldEnum: {
    id: 'id',
    initiatorId: 'initiatorId',
    receiverId: 'receiverId',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PartnershipScalarFieldEnum = (typeof PartnershipScalarFieldEnum)[keyof typeof PartnershipScalarFieldEnum]


  export const HabitScalarFieldEnum: {
    id: 'id',
    partnershipId: 'partnershipId',
    name: 'name',
    category: 'category',
    frequency: 'frequency',
    customDays: 'customDays',
    duration: 'duration',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    currentTurn: 'currentTurn',
    streakCount: 'streakCount',
    totalDays: 'totalDays',
    mulligansUsed: 'mulligansUsed',
    maxMulligans: 'maxMulligans',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HabitScalarFieldEnum = (typeof HabitScalarFieldEnum)[keyof typeof HabitScalarFieldEnum]


  export const ChallengeScalarFieldEnum: {
    id: 'id',
    habitId: 'habitId',
    creatorId: 'creatorId',
    title: 'title',
    description: 'description',
    dueDate: 'dueDate',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type ChallengeScalarFieldEnum = (typeof ChallengeScalarFieldEnum)[keyof typeof ChallengeScalarFieldEnum]


  export const ChallengeCompletionScalarFieldEnum: {
    id: 'id',
    challengeId: 'challengeId',
    userId: 'userId',
    status: 'status',
    completedAt: 'completedAt',
    feelingTags: 'feelingTags',
    reflectionNote: 'reflectionNote',
    reflectionPrompt: 'reflectionPrompt'
  };

  export type ChallengeCompletionScalarFieldEnum = (typeof ChallengeCompletionScalarFieldEnum)[keyof typeof ChallengeCompletionScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    partnershipId: 'partnershipId',
    senderId: 'senderId',
    content: 'content',
    messageType: 'messageType',
    createdAt: 'createdAt'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const NudgeScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    receiverId: 'receiverId',
    nudgeType: 'nudgeType',
    message: 'message',
    createdAt: 'createdAt'
  };

  export type NudgeScalarFieldEnum = (typeof NudgeScalarFieldEnum)[keyof typeof NudgeScalarFieldEnum]


  export const InspirationPostScalarFieldEnum: {
    id: 'id',
    authorId: 'authorId',
    content: 'content',
    category: 'category',
    isAnonymous: 'isAnonymous',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type InspirationPostScalarFieldEnum = (typeof InspirationPostScalarFieldEnum)[keyof typeof InspirationPostScalarFieldEnum]


  export const InspirationReactionScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    userId: 'userId',
    reaction: 'reaction',
    createdAt: 'createdAt'
  };

  export type InspirationReactionScalarFieldEnum = (typeof InspirationReactionScalarFieldEnum)[keyof typeof InspirationReactionScalarFieldEnum]


  export const BadgeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    iconName: 'iconName',
    category: 'category',
    requirement: 'requirement',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type BadgeScalarFieldEnum = (typeof BadgeScalarFieldEnum)[keyof typeof BadgeScalarFieldEnum]


  export const UserBadgeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    badgeId: 'badgeId',
    earnedAt: 'earnedAt'
  };

  export type UserBadgeScalarFieldEnum = (typeof UserBadgeScalarFieldEnum)[keyof typeof UserBadgeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'PartnershipStatus'
   */
  export type EnumPartnershipStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PartnershipStatus'>
    


  /**
   * Reference to a field of type 'PartnershipStatus[]'
   */
  export type ListEnumPartnershipStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PartnershipStatus[]'>
    


  /**
   * Reference to a field of type 'HabitStatus'
   */
  export type EnumHabitStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HabitStatus'>
    


  /**
   * Reference to a field of type 'HabitStatus[]'
   */
  export type ListEnumHabitStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HabitStatus[]'>
    


  /**
   * Reference to a field of type 'ChallengeStatus'
   */
  export type EnumChallengeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChallengeStatus'>
    


  /**
   * Reference to a field of type 'ChallengeStatus[]'
   */
  export type ListEnumChallengeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChallengeStatus[]'>
    


  /**
   * Reference to a field of type 'CompletionStatus'
   */
  export type EnumCompletionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompletionStatus'>
    


  /**
   * Reference to a field of type 'CompletionStatus[]'
   */
  export type ListEnumCompletionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompletionStatus[]'>
    


  /**
   * Reference to a field of type 'MessageType'
   */
  export type EnumMessageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageType'>
    


  /**
   * Reference to a field of type 'MessageType[]'
   */
  export type ListEnumMessageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageType[]'>
    


  /**
   * Reference to a field of type 'NudgeType'
   */
  export type EnumNudgeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NudgeType'>
    


  /**
   * Reference to a field of type 'NudgeType[]'
   */
  export type ListEnumNudgeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NudgeType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ReactionType'
   */
  export type EnumReactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReactionType'>
    


  /**
   * Reference to a field of type 'ReactionType[]'
   */
  export type ListEnumReactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReactionType[]'>
    


  /**
   * Reference to a field of type 'BadgeCategory'
   */
  export type EnumBadgeCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BadgeCategory'>
    


  /**
   * Reference to a field of type 'BadgeCategory[]'
   */
  export type ListEnumBadgeCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BadgeCategory[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    inviteCode?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    timezone?: StringFilter<"User"> | string
    reminderTime?: StringNullableFilter<"User"> | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    initiatedPartnerships?: PartnershipListRelationFilter
    receivedPartnerships?: PartnershipListRelationFilter
    challengesCreated?: ChallengeListRelationFilter
    challengeCompletions?: ChallengeCompletionListRelationFilter
    sentMessages?: MessageListRelationFilter
    inspirationPosts?: InspirationPostListRelationFilter
    inspirationReactions?: InspirationReactionListRelationFilter
    sentNudges?: NudgeListRelationFilter
    receivedNudges?: NudgeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    inviteCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    timezone?: SortOrder
    reminderTime?: SortOrderInput | SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    initiatedPartnerships?: PartnershipOrderByRelationAggregateInput
    receivedPartnerships?: PartnershipOrderByRelationAggregateInput
    challengesCreated?: ChallengeOrderByRelationAggregateInput
    challengeCompletions?: ChallengeCompletionOrderByRelationAggregateInput
    sentMessages?: MessageOrderByRelationAggregateInput
    inspirationPosts?: InspirationPostOrderByRelationAggregateInput
    inspirationReactions?: InspirationReactionOrderByRelationAggregateInput
    sentNudges?: NudgeOrderByRelationAggregateInput
    receivedNudges?: NudgeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    inviteCode?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    timezone?: StringFilter<"User"> | string
    reminderTime?: StringNullableFilter<"User"> | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    initiatedPartnerships?: PartnershipListRelationFilter
    receivedPartnerships?: PartnershipListRelationFilter
    challengesCreated?: ChallengeListRelationFilter
    challengeCompletions?: ChallengeCompletionListRelationFilter
    sentMessages?: MessageListRelationFilter
    inspirationPosts?: InspirationPostListRelationFilter
    inspirationReactions?: InspirationReactionListRelationFilter
    sentNudges?: NudgeListRelationFilter
    receivedNudges?: NudgeListRelationFilter
  }, "id" | "email" | "username" | "inviteCode">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    inviteCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    timezone?: SortOrder
    reminderTime?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    inviteCode?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    timezone?: StringWithAggregatesFilter<"User"> | string
    reminderTime?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type PartnershipWhereInput = {
    AND?: PartnershipWhereInput | PartnershipWhereInput[]
    OR?: PartnershipWhereInput[]
    NOT?: PartnershipWhereInput | PartnershipWhereInput[]
    id?: StringFilter<"Partnership"> | string
    initiatorId?: StringFilter<"Partnership"> | string
    receiverId?: StringFilter<"Partnership"> | string
    status?: EnumPartnershipStatusFilter<"Partnership"> | $Enums.PartnershipStatus
    createdAt?: DateTimeFilter<"Partnership"> | Date | string
    updatedAt?: DateTimeFilter<"Partnership"> | Date | string
    initiator?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    habits?: HabitListRelationFilter
    messages?: MessageListRelationFilter
  }

  export type PartnershipOrderByWithRelationInput = {
    id?: SortOrder
    initiatorId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    initiator?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
    habits?: HabitOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type PartnershipWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    initiatorId_receiverId?: PartnershipInitiatorIdReceiverIdCompoundUniqueInput
    AND?: PartnershipWhereInput | PartnershipWhereInput[]
    OR?: PartnershipWhereInput[]
    NOT?: PartnershipWhereInput | PartnershipWhereInput[]
    initiatorId?: StringFilter<"Partnership"> | string
    receiverId?: StringFilter<"Partnership"> | string
    status?: EnumPartnershipStatusFilter<"Partnership"> | $Enums.PartnershipStatus
    createdAt?: DateTimeFilter<"Partnership"> | Date | string
    updatedAt?: DateTimeFilter<"Partnership"> | Date | string
    initiator?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    habits?: HabitListRelationFilter
    messages?: MessageListRelationFilter
  }, "id" | "initiatorId_receiverId">

  export type PartnershipOrderByWithAggregationInput = {
    id?: SortOrder
    initiatorId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PartnershipCountOrderByAggregateInput
    _max?: PartnershipMaxOrderByAggregateInput
    _min?: PartnershipMinOrderByAggregateInput
  }

  export type PartnershipScalarWhereWithAggregatesInput = {
    AND?: PartnershipScalarWhereWithAggregatesInput | PartnershipScalarWhereWithAggregatesInput[]
    OR?: PartnershipScalarWhereWithAggregatesInput[]
    NOT?: PartnershipScalarWhereWithAggregatesInput | PartnershipScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Partnership"> | string
    initiatorId?: StringWithAggregatesFilter<"Partnership"> | string
    receiverId?: StringWithAggregatesFilter<"Partnership"> | string
    status?: EnumPartnershipStatusWithAggregatesFilter<"Partnership"> | $Enums.PartnershipStatus
    createdAt?: DateTimeWithAggregatesFilter<"Partnership"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Partnership"> | Date | string
  }

  export type HabitWhereInput = {
    AND?: HabitWhereInput | HabitWhereInput[]
    OR?: HabitWhereInput[]
    NOT?: HabitWhereInput | HabitWhereInput[]
    id?: StringFilter<"Habit"> | string
    partnershipId?: StringFilter<"Habit"> | string
    name?: StringFilter<"Habit"> | string
    category?: StringNullableFilter<"Habit"> | string | null
    frequency?: StringFilter<"Habit"> | string
    customDays?: StringNullableFilter<"Habit"> | string | null
    duration?: IntNullableFilter<"Habit"> | number | null
    startDate?: DateTimeNullableFilter<"Habit"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Habit"> | Date | string | null
    status?: EnumHabitStatusFilter<"Habit"> | $Enums.HabitStatus
    currentTurn?: StringNullableFilter<"Habit"> | string | null
    streakCount?: IntFilter<"Habit"> | number
    totalDays?: IntFilter<"Habit"> | number
    mulligansUsed?: IntFilter<"Habit"> | number
    maxMulligans?: IntFilter<"Habit"> | number
    createdAt?: DateTimeFilter<"Habit"> | Date | string
    updatedAt?: DateTimeFilter<"Habit"> | Date | string
    partnership?: XOR<PartnershipRelationFilter, PartnershipWhereInput>
    challenges?: ChallengeListRelationFilter
  }

  export type HabitOrderByWithRelationInput = {
    id?: SortOrder
    partnershipId?: SortOrder
    name?: SortOrder
    category?: SortOrderInput | SortOrder
    frequency?: SortOrder
    customDays?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    status?: SortOrder
    currentTurn?: SortOrderInput | SortOrder
    streakCount?: SortOrder
    totalDays?: SortOrder
    mulligansUsed?: SortOrder
    maxMulligans?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    partnership?: PartnershipOrderByWithRelationInput
    challenges?: ChallengeOrderByRelationAggregateInput
  }

  export type HabitWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HabitWhereInput | HabitWhereInput[]
    OR?: HabitWhereInput[]
    NOT?: HabitWhereInput | HabitWhereInput[]
    partnershipId?: StringFilter<"Habit"> | string
    name?: StringFilter<"Habit"> | string
    category?: StringNullableFilter<"Habit"> | string | null
    frequency?: StringFilter<"Habit"> | string
    customDays?: StringNullableFilter<"Habit"> | string | null
    duration?: IntNullableFilter<"Habit"> | number | null
    startDate?: DateTimeNullableFilter<"Habit"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Habit"> | Date | string | null
    status?: EnumHabitStatusFilter<"Habit"> | $Enums.HabitStatus
    currentTurn?: StringNullableFilter<"Habit"> | string | null
    streakCount?: IntFilter<"Habit"> | number
    totalDays?: IntFilter<"Habit"> | number
    mulligansUsed?: IntFilter<"Habit"> | number
    maxMulligans?: IntFilter<"Habit"> | number
    createdAt?: DateTimeFilter<"Habit"> | Date | string
    updatedAt?: DateTimeFilter<"Habit"> | Date | string
    partnership?: XOR<PartnershipRelationFilter, PartnershipWhereInput>
    challenges?: ChallengeListRelationFilter
  }, "id">

  export type HabitOrderByWithAggregationInput = {
    id?: SortOrder
    partnershipId?: SortOrder
    name?: SortOrder
    category?: SortOrderInput | SortOrder
    frequency?: SortOrder
    customDays?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    status?: SortOrder
    currentTurn?: SortOrderInput | SortOrder
    streakCount?: SortOrder
    totalDays?: SortOrder
    mulligansUsed?: SortOrder
    maxMulligans?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HabitCountOrderByAggregateInput
    _avg?: HabitAvgOrderByAggregateInput
    _max?: HabitMaxOrderByAggregateInput
    _min?: HabitMinOrderByAggregateInput
    _sum?: HabitSumOrderByAggregateInput
  }

  export type HabitScalarWhereWithAggregatesInput = {
    AND?: HabitScalarWhereWithAggregatesInput | HabitScalarWhereWithAggregatesInput[]
    OR?: HabitScalarWhereWithAggregatesInput[]
    NOT?: HabitScalarWhereWithAggregatesInput | HabitScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Habit"> | string
    partnershipId?: StringWithAggregatesFilter<"Habit"> | string
    name?: StringWithAggregatesFilter<"Habit"> | string
    category?: StringNullableWithAggregatesFilter<"Habit"> | string | null
    frequency?: StringWithAggregatesFilter<"Habit"> | string
    customDays?: StringNullableWithAggregatesFilter<"Habit"> | string | null
    duration?: IntNullableWithAggregatesFilter<"Habit"> | number | null
    startDate?: DateTimeNullableWithAggregatesFilter<"Habit"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Habit"> | Date | string | null
    status?: EnumHabitStatusWithAggregatesFilter<"Habit"> | $Enums.HabitStatus
    currentTurn?: StringNullableWithAggregatesFilter<"Habit"> | string | null
    streakCount?: IntWithAggregatesFilter<"Habit"> | number
    totalDays?: IntWithAggregatesFilter<"Habit"> | number
    mulligansUsed?: IntWithAggregatesFilter<"Habit"> | number
    maxMulligans?: IntWithAggregatesFilter<"Habit"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Habit"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Habit"> | Date | string
  }

  export type ChallengeWhereInput = {
    AND?: ChallengeWhereInput | ChallengeWhereInput[]
    OR?: ChallengeWhereInput[]
    NOT?: ChallengeWhereInput | ChallengeWhereInput[]
    id?: StringFilter<"Challenge"> | string
    habitId?: StringFilter<"Challenge"> | string
    creatorId?: StringFilter<"Challenge"> | string
    title?: StringFilter<"Challenge"> | string
    description?: StringNullableFilter<"Challenge"> | string | null
    dueDate?: DateTimeFilter<"Challenge"> | Date | string
    status?: EnumChallengeStatusFilter<"Challenge"> | $Enums.ChallengeStatus
    createdAt?: DateTimeFilter<"Challenge"> | Date | string
    habit?: XOR<HabitRelationFilter, HabitWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    completions?: ChallengeCompletionListRelationFilter
  }

  export type ChallengeOrderByWithRelationInput = {
    id?: SortOrder
    habitId?: SortOrder
    creatorId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    habit?: HabitOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    completions?: ChallengeCompletionOrderByRelationAggregateInput
  }

  export type ChallengeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChallengeWhereInput | ChallengeWhereInput[]
    OR?: ChallengeWhereInput[]
    NOT?: ChallengeWhereInput | ChallengeWhereInput[]
    habitId?: StringFilter<"Challenge"> | string
    creatorId?: StringFilter<"Challenge"> | string
    title?: StringFilter<"Challenge"> | string
    description?: StringNullableFilter<"Challenge"> | string | null
    dueDate?: DateTimeFilter<"Challenge"> | Date | string
    status?: EnumChallengeStatusFilter<"Challenge"> | $Enums.ChallengeStatus
    createdAt?: DateTimeFilter<"Challenge"> | Date | string
    habit?: XOR<HabitRelationFilter, HabitWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    completions?: ChallengeCompletionListRelationFilter
  }, "id">

  export type ChallengeOrderByWithAggregationInput = {
    id?: SortOrder
    habitId?: SortOrder
    creatorId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: ChallengeCountOrderByAggregateInput
    _max?: ChallengeMaxOrderByAggregateInput
    _min?: ChallengeMinOrderByAggregateInput
  }

  export type ChallengeScalarWhereWithAggregatesInput = {
    AND?: ChallengeScalarWhereWithAggregatesInput | ChallengeScalarWhereWithAggregatesInput[]
    OR?: ChallengeScalarWhereWithAggregatesInput[]
    NOT?: ChallengeScalarWhereWithAggregatesInput | ChallengeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Challenge"> | string
    habitId?: StringWithAggregatesFilter<"Challenge"> | string
    creatorId?: StringWithAggregatesFilter<"Challenge"> | string
    title?: StringWithAggregatesFilter<"Challenge"> | string
    description?: StringNullableWithAggregatesFilter<"Challenge"> | string | null
    dueDate?: DateTimeWithAggregatesFilter<"Challenge"> | Date | string
    status?: EnumChallengeStatusWithAggregatesFilter<"Challenge"> | $Enums.ChallengeStatus
    createdAt?: DateTimeWithAggregatesFilter<"Challenge"> | Date | string
  }

  export type ChallengeCompletionWhereInput = {
    AND?: ChallengeCompletionWhereInput | ChallengeCompletionWhereInput[]
    OR?: ChallengeCompletionWhereInput[]
    NOT?: ChallengeCompletionWhereInput | ChallengeCompletionWhereInput[]
    id?: StringFilter<"ChallengeCompletion"> | string
    challengeId?: StringFilter<"ChallengeCompletion"> | string
    userId?: StringFilter<"ChallengeCompletion"> | string
    status?: EnumCompletionStatusFilter<"ChallengeCompletion"> | $Enums.CompletionStatus
    completedAt?: DateTimeFilter<"ChallengeCompletion"> | Date | string
    feelingTags?: StringNullableFilter<"ChallengeCompletion"> | string | null
    reflectionNote?: StringNullableFilter<"ChallengeCompletion"> | string | null
    reflectionPrompt?: StringNullableFilter<"ChallengeCompletion"> | string | null
    challenge?: XOR<ChallengeRelationFilter, ChallengeWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ChallengeCompletionOrderByWithRelationInput = {
    id?: SortOrder
    challengeId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    completedAt?: SortOrder
    feelingTags?: SortOrderInput | SortOrder
    reflectionNote?: SortOrderInput | SortOrder
    reflectionPrompt?: SortOrderInput | SortOrder
    challenge?: ChallengeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ChallengeCompletionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    challengeId_userId?: ChallengeCompletionChallengeIdUserIdCompoundUniqueInput
    AND?: ChallengeCompletionWhereInput | ChallengeCompletionWhereInput[]
    OR?: ChallengeCompletionWhereInput[]
    NOT?: ChallengeCompletionWhereInput | ChallengeCompletionWhereInput[]
    challengeId?: StringFilter<"ChallengeCompletion"> | string
    userId?: StringFilter<"ChallengeCompletion"> | string
    status?: EnumCompletionStatusFilter<"ChallengeCompletion"> | $Enums.CompletionStatus
    completedAt?: DateTimeFilter<"ChallengeCompletion"> | Date | string
    feelingTags?: StringNullableFilter<"ChallengeCompletion"> | string | null
    reflectionNote?: StringNullableFilter<"ChallengeCompletion"> | string | null
    reflectionPrompt?: StringNullableFilter<"ChallengeCompletion"> | string | null
    challenge?: XOR<ChallengeRelationFilter, ChallengeWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "challengeId_userId">

  export type ChallengeCompletionOrderByWithAggregationInput = {
    id?: SortOrder
    challengeId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    completedAt?: SortOrder
    feelingTags?: SortOrderInput | SortOrder
    reflectionNote?: SortOrderInput | SortOrder
    reflectionPrompt?: SortOrderInput | SortOrder
    _count?: ChallengeCompletionCountOrderByAggregateInput
    _max?: ChallengeCompletionMaxOrderByAggregateInput
    _min?: ChallengeCompletionMinOrderByAggregateInput
  }

  export type ChallengeCompletionScalarWhereWithAggregatesInput = {
    AND?: ChallengeCompletionScalarWhereWithAggregatesInput | ChallengeCompletionScalarWhereWithAggregatesInput[]
    OR?: ChallengeCompletionScalarWhereWithAggregatesInput[]
    NOT?: ChallengeCompletionScalarWhereWithAggregatesInput | ChallengeCompletionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChallengeCompletion"> | string
    challengeId?: StringWithAggregatesFilter<"ChallengeCompletion"> | string
    userId?: StringWithAggregatesFilter<"ChallengeCompletion"> | string
    status?: EnumCompletionStatusWithAggregatesFilter<"ChallengeCompletion"> | $Enums.CompletionStatus
    completedAt?: DateTimeWithAggregatesFilter<"ChallengeCompletion"> | Date | string
    feelingTags?: StringNullableWithAggregatesFilter<"ChallengeCompletion"> | string | null
    reflectionNote?: StringNullableWithAggregatesFilter<"ChallengeCompletion"> | string | null
    reflectionPrompt?: StringNullableWithAggregatesFilter<"ChallengeCompletion"> | string | null
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    partnershipId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    messageType?: EnumMessageTypeFilter<"Message"> | $Enums.MessageType
    createdAt?: DateTimeFilter<"Message"> | Date | string
    partnership?: XOR<PartnershipRelationFilter, PartnershipWhereInput>
    sender?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    partnershipId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    createdAt?: SortOrder
    partnership?: PartnershipOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    partnershipId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    messageType?: EnumMessageTypeFilter<"Message"> | $Enums.MessageType
    createdAt?: DateTimeFilter<"Message"> | Date | string
    partnership?: XOR<PartnershipRelationFilter, PartnershipWhereInput>
    sender?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    partnershipId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    createdAt?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    partnershipId?: StringWithAggregatesFilter<"Message"> | string
    senderId?: StringWithAggregatesFilter<"Message"> | string
    content?: StringWithAggregatesFilter<"Message"> | string
    messageType?: EnumMessageTypeWithAggregatesFilter<"Message"> | $Enums.MessageType
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type NudgeWhereInput = {
    AND?: NudgeWhereInput | NudgeWhereInput[]
    OR?: NudgeWhereInput[]
    NOT?: NudgeWhereInput | NudgeWhereInput[]
    id?: StringFilter<"Nudge"> | string
    senderId?: StringFilter<"Nudge"> | string
    receiverId?: StringFilter<"Nudge"> | string
    nudgeType?: EnumNudgeTypeFilter<"Nudge"> | $Enums.NudgeType
    message?: StringNullableFilter<"Nudge"> | string | null
    createdAt?: DateTimeFilter<"Nudge"> | Date | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NudgeOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    nudgeType?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    sender?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
  }

  export type NudgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NudgeWhereInput | NudgeWhereInput[]
    OR?: NudgeWhereInput[]
    NOT?: NudgeWhereInput | NudgeWhereInput[]
    senderId?: StringFilter<"Nudge"> | string
    receiverId?: StringFilter<"Nudge"> | string
    nudgeType?: EnumNudgeTypeFilter<"Nudge"> | $Enums.NudgeType
    message?: StringNullableFilter<"Nudge"> | string | null
    createdAt?: DateTimeFilter<"Nudge"> | Date | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NudgeOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    nudgeType?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NudgeCountOrderByAggregateInput
    _max?: NudgeMaxOrderByAggregateInput
    _min?: NudgeMinOrderByAggregateInput
  }

  export type NudgeScalarWhereWithAggregatesInput = {
    AND?: NudgeScalarWhereWithAggregatesInput | NudgeScalarWhereWithAggregatesInput[]
    OR?: NudgeScalarWhereWithAggregatesInput[]
    NOT?: NudgeScalarWhereWithAggregatesInput | NudgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Nudge"> | string
    senderId?: StringWithAggregatesFilter<"Nudge"> | string
    receiverId?: StringWithAggregatesFilter<"Nudge"> | string
    nudgeType?: EnumNudgeTypeWithAggregatesFilter<"Nudge"> | $Enums.NudgeType
    message?: StringNullableWithAggregatesFilter<"Nudge"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Nudge"> | Date | string
  }

  export type InspirationPostWhereInput = {
    AND?: InspirationPostWhereInput | InspirationPostWhereInput[]
    OR?: InspirationPostWhereInput[]
    NOT?: InspirationPostWhereInput | InspirationPostWhereInput[]
    id?: StringFilter<"InspirationPost"> | string
    authorId?: StringFilter<"InspirationPost"> | string
    content?: StringFilter<"InspirationPost"> | string
    category?: StringNullableFilter<"InspirationPost"> | string | null
    isAnonymous?: BoolFilter<"InspirationPost"> | boolean
    expiresAt?: DateTimeFilter<"InspirationPost"> | Date | string
    createdAt?: DateTimeFilter<"InspirationPost"> | Date | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    reactions?: InspirationReactionListRelationFilter
  }

  export type InspirationPostOrderByWithRelationInput = {
    id?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    category?: SortOrderInput | SortOrder
    isAnonymous?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    author?: UserOrderByWithRelationInput
    reactions?: InspirationReactionOrderByRelationAggregateInput
  }

  export type InspirationPostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InspirationPostWhereInput | InspirationPostWhereInput[]
    OR?: InspirationPostWhereInput[]
    NOT?: InspirationPostWhereInput | InspirationPostWhereInput[]
    authorId?: StringFilter<"InspirationPost"> | string
    content?: StringFilter<"InspirationPost"> | string
    category?: StringNullableFilter<"InspirationPost"> | string | null
    isAnonymous?: BoolFilter<"InspirationPost"> | boolean
    expiresAt?: DateTimeFilter<"InspirationPost"> | Date | string
    createdAt?: DateTimeFilter<"InspirationPost"> | Date | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    reactions?: InspirationReactionListRelationFilter
  }, "id">

  export type InspirationPostOrderByWithAggregationInput = {
    id?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    category?: SortOrderInput | SortOrder
    isAnonymous?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: InspirationPostCountOrderByAggregateInput
    _max?: InspirationPostMaxOrderByAggregateInput
    _min?: InspirationPostMinOrderByAggregateInput
  }

  export type InspirationPostScalarWhereWithAggregatesInput = {
    AND?: InspirationPostScalarWhereWithAggregatesInput | InspirationPostScalarWhereWithAggregatesInput[]
    OR?: InspirationPostScalarWhereWithAggregatesInput[]
    NOT?: InspirationPostScalarWhereWithAggregatesInput | InspirationPostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InspirationPost"> | string
    authorId?: StringWithAggregatesFilter<"InspirationPost"> | string
    content?: StringWithAggregatesFilter<"InspirationPost"> | string
    category?: StringNullableWithAggregatesFilter<"InspirationPost"> | string | null
    isAnonymous?: BoolWithAggregatesFilter<"InspirationPost"> | boolean
    expiresAt?: DateTimeWithAggregatesFilter<"InspirationPost"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"InspirationPost"> | Date | string
  }

  export type InspirationReactionWhereInput = {
    AND?: InspirationReactionWhereInput | InspirationReactionWhereInput[]
    OR?: InspirationReactionWhereInput[]
    NOT?: InspirationReactionWhereInput | InspirationReactionWhereInput[]
    id?: StringFilter<"InspirationReaction"> | string
    postId?: StringFilter<"InspirationReaction"> | string
    userId?: StringFilter<"InspirationReaction"> | string
    reaction?: EnumReactionTypeFilter<"InspirationReaction"> | $Enums.ReactionType
    createdAt?: DateTimeFilter<"InspirationReaction"> | Date | string
    post?: XOR<InspirationPostRelationFilter, InspirationPostWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type InspirationReactionOrderByWithRelationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    reaction?: SortOrder
    createdAt?: SortOrder
    post?: InspirationPostOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type InspirationReactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    postId_userId?: InspirationReactionPostIdUserIdCompoundUniqueInput
    AND?: InspirationReactionWhereInput | InspirationReactionWhereInput[]
    OR?: InspirationReactionWhereInput[]
    NOT?: InspirationReactionWhereInput | InspirationReactionWhereInput[]
    postId?: StringFilter<"InspirationReaction"> | string
    userId?: StringFilter<"InspirationReaction"> | string
    reaction?: EnumReactionTypeFilter<"InspirationReaction"> | $Enums.ReactionType
    createdAt?: DateTimeFilter<"InspirationReaction"> | Date | string
    post?: XOR<InspirationPostRelationFilter, InspirationPostWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "postId_userId">

  export type InspirationReactionOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    reaction?: SortOrder
    createdAt?: SortOrder
    _count?: InspirationReactionCountOrderByAggregateInput
    _max?: InspirationReactionMaxOrderByAggregateInput
    _min?: InspirationReactionMinOrderByAggregateInput
  }

  export type InspirationReactionScalarWhereWithAggregatesInput = {
    AND?: InspirationReactionScalarWhereWithAggregatesInput | InspirationReactionScalarWhereWithAggregatesInput[]
    OR?: InspirationReactionScalarWhereWithAggregatesInput[]
    NOT?: InspirationReactionScalarWhereWithAggregatesInput | InspirationReactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InspirationReaction"> | string
    postId?: StringWithAggregatesFilter<"InspirationReaction"> | string
    userId?: StringWithAggregatesFilter<"InspirationReaction"> | string
    reaction?: EnumReactionTypeWithAggregatesFilter<"InspirationReaction"> | $Enums.ReactionType
    createdAt?: DateTimeWithAggregatesFilter<"InspirationReaction"> | Date | string
  }

  export type BadgeWhereInput = {
    AND?: BadgeWhereInput | BadgeWhereInput[]
    OR?: BadgeWhereInput[]
    NOT?: BadgeWhereInput | BadgeWhereInput[]
    id?: StringFilter<"Badge"> | string
    name?: StringFilter<"Badge"> | string
    description?: StringFilter<"Badge"> | string
    iconName?: StringFilter<"Badge"> | string
    category?: EnumBadgeCategoryFilter<"Badge"> | $Enums.BadgeCategory
    requirement?: StringFilter<"Badge"> | string
    isActive?: BoolFilter<"Badge"> | boolean
    createdAt?: DateTimeFilter<"Badge"> | Date | string
  }

  export type BadgeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    iconName?: SortOrder
    category?: SortOrder
    requirement?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type BadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: BadgeWhereInput | BadgeWhereInput[]
    OR?: BadgeWhereInput[]
    NOT?: BadgeWhereInput | BadgeWhereInput[]
    description?: StringFilter<"Badge"> | string
    iconName?: StringFilter<"Badge"> | string
    category?: EnumBadgeCategoryFilter<"Badge"> | $Enums.BadgeCategory
    requirement?: StringFilter<"Badge"> | string
    isActive?: BoolFilter<"Badge"> | boolean
    createdAt?: DateTimeFilter<"Badge"> | Date | string
  }, "id" | "name">

  export type BadgeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    iconName?: SortOrder
    category?: SortOrder
    requirement?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: BadgeCountOrderByAggregateInput
    _max?: BadgeMaxOrderByAggregateInput
    _min?: BadgeMinOrderByAggregateInput
  }

  export type BadgeScalarWhereWithAggregatesInput = {
    AND?: BadgeScalarWhereWithAggregatesInput | BadgeScalarWhereWithAggregatesInput[]
    OR?: BadgeScalarWhereWithAggregatesInput[]
    NOT?: BadgeScalarWhereWithAggregatesInput | BadgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Badge"> | string
    name?: StringWithAggregatesFilter<"Badge"> | string
    description?: StringWithAggregatesFilter<"Badge"> | string
    iconName?: StringWithAggregatesFilter<"Badge"> | string
    category?: EnumBadgeCategoryWithAggregatesFilter<"Badge"> | $Enums.BadgeCategory
    requirement?: StringWithAggregatesFilter<"Badge"> | string
    isActive?: BoolWithAggregatesFilter<"Badge"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Badge"> | Date | string
  }

  export type UserBadgeWhereInput = {
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    id?: StringFilter<"UserBadge"> | string
    userId?: StringFilter<"UserBadge"> | string
    badgeId?: StringFilter<"UserBadge"> | string
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
  }

  export type UserBadgeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
  }

  export type UserBadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_badgeId?: UserBadgeUserIdBadgeIdCompoundUniqueInput
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    userId?: StringFilter<"UserBadge"> | string
    badgeId?: StringFilter<"UserBadge"> | string
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
  }, "id" | "userId_badgeId">

  export type UserBadgeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
    _count?: UserBadgeCountOrderByAggregateInput
    _max?: UserBadgeMaxOrderByAggregateInput
    _min?: UserBadgeMinOrderByAggregateInput
  }

  export type UserBadgeScalarWhereWithAggregatesInput = {
    AND?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    OR?: UserBadgeScalarWhereWithAggregatesInput[]
    NOT?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserBadge"> | string
    userId?: StringWithAggregatesFilter<"UserBadge"> | string
    badgeId?: StringWithAggregatesFilter<"UserBadge"> | string
    earnedAt?: DateTimeWithAggregatesFilter<"UserBadge"> | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionCreateNestedManyWithoutUserInput
    sentNudges?: NudgeCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeUncheckedCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostUncheckedCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionUncheckedCreateNestedManyWithoutUserInput
    sentNudges?: NudgeUncheckedCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUncheckedUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUncheckedUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUncheckedUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUncheckedUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUncheckedUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUncheckedUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnershipCreateInput = {
    id?: string
    status?: $Enums.PartnershipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    initiator: UserCreateNestedOneWithoutInitiatedPartnershipsInput
    receiver: UserCreateNestedOneWithoutReceivedPartnershipsInput
    habits?: HabitCreateNestedManyWithoutPartnershipInput
    messages?: MessageCreateNestedManyWithoutPartnershipInput
  }

  export type PartnershipUncheckedCreateInput = {
    id?: string
    initiatorId: string
    receiverId: string
    status?: $Enums.PartnershipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitUncheckedCreateNestedManyWithoutPartnershipInput
    messages?: MessageUncheckedCreateNestedManyWithoutPartnershipInput
  }

  export type PartnershipUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumPartnershipStatusFieldUpdateOperationsInput | $Enums.PartnershipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiator?: UserUpdateOneRequiredWithoutInitiatedPartnershipsNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedPartnershipsNestedInput
    habits?: HabitUpdateManyWithoutPartnershipNestedInput
    messages?: MessageUpdateManyWithoutPartnershipNestedInput
  }

  export type PartnershipUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: EnumPartnershipStatusFieldUpdateOperationsInput | $Enums.PartnershipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUncheckedUpdateManyWithoutPartnershipNestedInput
    messages?: MessageUncheckedUpdateManyWithoutPartnershipNestedInput
  }

  export type PartnershipCreateManyInput = {
    id?: string
    initiatorId: string
    receiverId: string
    status?: $Enums.PartnershipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartnershipUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumPartnershipStatusFieldUpdateOperationsInput | $Enums.PartnershipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnershipUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: EnumPartnershipStatusFieldUpdateOperationsInput | $Enums.PartnershipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitCreateInput = {
    id?: string
    name: string
    category?: string | null
    frequency?: string
    customDays?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.HabitStatus
    currentTurn?: string | null
    streakCount?: number
    totalDays?: number
    mulligansUsed?: number
    maxMulligans?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    partnership: PartnershipCreateNestedOneWithoutHabitsInput
    challenges?: ChallengeCreateNestedManyWithoutHabitInput
  }

  export type HabitUncheckedCreateInput = {
    id?: string
    partnershipId: string
    name: string
    category?: string | null
    frequency?: string
    customDays?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.HabitStatus
    currentTurn?: string | null
    streakCount?: number
    totalDays?: number
    mulligansUsed?: number
    maxMulligans?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    challenges?: ChallengeUncheckedCreateNestedManyWithoutHabitInput
  }

  export type HabitUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    customDays?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHabitStatusFieldUpdateOperationsInput | $Enums.HabitStatus
    currentTurn?: NullableStringFieldUpdateOperationsInput | string | null
    streakCount?: IntFieldUpdateOperationsInput | number
    totalDays?: IntFieldUpdateOperationsInput | number
    mulligansUsed?: IntFieldUpdateOperationsInput | number
    maxMulligans?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    partnership?: PartnershipUpdateOneRequiredWithoutHabitsNestedInput
    challenges?: ChallengeUpdateManyWithoutHabitNestedInput
  }

  export type HabitUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    partnershipId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    customDays?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHabitStatusFieldUpdateOperationsInput | $Enums.HabitStatus
    currentTurn?: NullableStringFieldUpdateOperationsInput | string | null
    streakCount?: IntFieldUpdateOperationsInput | number
    totalDays?: IntFieldUpdateOperationsInput | number
    mulligansUsed?: IntFieldUpdateOperationsInput | number
    maxMulligans?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    challenges?: ChallengeUncheckedUpdateManyWithoutHabitNestedInput
  }

  export type HabitCreateManyInput = {
    id?: string
    partnershipId: string
    name: string
    category?: string | null
    frequency?: string
    customDays?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.HabitStatus
    currentTurn?: string | null
    streakCount?: number
    totalDays?: number
    mulligansUsed?: number
    maxMulligans?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HabitUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    customDays?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHabitStatusFieldUpdateOperationsInput | $Enums.HabitStatus
    currentTurn?: NullableStringFieldUpdateOperationsInput | string | null
    streakCount?: IntFieldUpdateOperationsInput | number
    totalDays?: IntFieldUpdateOperationsInput | number
    mulligansUsed?: IntFieldUpdateOperationsInput | number
    maxMulligans?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    partnershipId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    customDays?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHabitStatusFieldUpdateOperationsInput | $Enums.HabitStatus
    currentTurn?: NullableStringFieldUpdateOperationsInput | string | null
    streakCount?: IntFieldUpdateOperationsInput | number
    totalDays?: IntFieldUpdateOperationsInput | number
    mulligansUsed?: IntFieldUpdateOperationsInput | number
    maxMulligans?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeCreateInput = {
    id?: string
    title: string
    description?: string | null
    dueDate: Date | string
    status?: $Enums.ChallengeStatus
    createdAt?: Date | string
    habit: HabitCreateNestedOneWithoutChallengesInput
    creator: UserCreateNestedOneWithoutChallengesCreatedInput
    completions?: ChallengeCompletionCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeUncheckedCreateInput = {
    id?: string
    habitId: string
    creatorId: string
    title: string
    description?: string | null
    dueDate: Date | string
    status?: $Enums.ChallengeStatus
    createdAt?: Date | string
    completions?: ChallengeCompletionUncheckedCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumChallengeStatusFieldUpdateOperationsInput | $Enums.ChallengeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habit?: HabitUpdateOneRequiredWithoutChallengesNestedInput
    creator?: UserUpdateOneRequiredWithoutChallengesCreatedNestedInput
    completions?: ChallengeCompletionUpdateManyWithoutChallengeNestedInput
  }

  export type ChallengeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    habitId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumChallengeStatusFieldUpdateOperationsInput | $Enums.ChallengeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completions?: ChallengeCompletionUncheckedUpdateManyWithoutChallengeNestedInput
  }

  export type ChallengeCreateManyInput = {
    id?: string
    habitId: string
    creatorId: string
    title: string
    description?: string | null
    dueDate: Date | string
    status?: $Enums.ChallengeStatus
    createdAt?: Date | string
  }

  export type ChallengeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumChallengeStatusFieldUpdateOperationsInput | $Enums.ChallengeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    habitId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumChallengeStatusFieldUpdateOperationsInput | $Enums.ChallengeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeCompletionCreateInput = {
    id?: string
    status?: $Enums.CompletionStatus
    completedAt?: Date | string
    feelingTags?: string | null
    reflectionNote?: string | null
    reflectionPrompt?: string | null
    challenge: ChallengeCreateNestedOneWithoutCompletionsInput
    user: UserCreateNestedOneWithoutChallengeCompletionsInput
  }

  export type ChallengeCompletionUncheckedCreateInput = {
    id?: string
    challengeId: string
    userId: string
    status?: $Enums.CompletionStatus
    completedAt?: Date | string
    feelingTags?: string | null
    reflectionNote?: string | null
    reflectionPrompt?: string | null
  }

  export type ChallengeCompletionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumCompletionStatusFieldUpdateOperationsInput | $Enums.CompletionStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feelingTags?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionNote?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    challenge?: ChallengeUpdateOneRequiredWithoutCompletionsNestedInput
    user?: UserUpdateOneRequiredWithoutChallengeCompletionsNestedInput
  }

  export type ChallengeCompletionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumCompletionStatusFieldUpdateOperationsInput | $Enums.CompletionStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feelingTags?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionNote?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionPrompt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChallengeCompletionCreateManyInput = {
    id?: string
    challengeId: string
    userId: string
    status?: $Enums.CompletionStatus
    completedAt?: Date | string
    feelingTags?: string | null
    reflectionNote?: string | null
    reflectionPrompt?: string | null
  }

  export type ChallengeCompletionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumCompletionStatusFieldUpdateOperationsInput | $Enums.CompletionStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feelingTags?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionNote?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionPrompt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChallengeCompletionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumCompletionStatusFieldUpdateOperationsInput | $Enums.CompletionStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feelingTags?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionNote?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionPrompt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageCreateInput = {
    id?: string
    content: string
    messageType?: $Enums.MessageType
    createdAt?: Date | string
    partnership: PartnershipCreateNestedOneWithoutMessagesInput
    sender: UserCreateNestedOneWithoutSentMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    partnershipId: string
    senderId: string
    content: string
    messageType?: $Enums.MessageType
    createdAt?: Date | string
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    partnership?: PartnershipUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    partnershipId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyInput = {
    id?: string
    partnershipId: string
    senderId: string
    content: string
    messageType?: $Enums.MessageType
    createdAt?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    partnershipId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NudgeCreateInput = {
    id?: string
    nudgeType: $Enums.NudgeType
    message?: string | null
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutSentNudgesInput
    receiver: UserCreateNestedOneWithoutReceivedNudgesInput
  }

  export type NudgeUncheckedCreateInput = {
    id?: string
    senderId: string
    receiverId: string
    nudgeType: $Enums.NudgeType
    message?: string | null
    createdAt?: Date | string
  }

  export type NudgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nudgeType?: EnumNudgeTypeFieldUpdateOperationsInput | $Enums.NudgeType
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentNudgesNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedNudgesNestedInput
  }

  export type NudgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    nudgeType?: EnumNudgeTypeFieldUpdateOperationsInput | $Enums.NudgeType
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NudgeCreateManyInput = {
    id?: string
    senderId: string
    receiverId: string
    nudgeType: $Enums.NudgeType
    message?: string | null
    createdAt?: Date | string
  }

  export type NudgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nudgeType?: EnumNudgeTypeFieldUpdateOperationsInput | $Enums.NudgeType
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NudgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    nudgeType?: EnumNudgeTypeFieldUpdateOperationsInput | $Enums.NudgeType
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InspirationPostCreateInput = {
    id?: string
    content: string
    category?: string | null
    isAnonymous?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutInspirationPostsInput
    reactions?: InspirationReactionCreateNestedManyWithoutPostInput
  }

  export type InspirationPostUncheckedCreateInput = {
    id?: string
    authorId: string
    content: string
    category?: string | null
    isAnonymous?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    reactions?: InspirationReactionUncheckedCreateNestedManyWithoutPostInput
  }

  export type InspirationPostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutInspirationPostsNestedInput
    reactions?: InspirationReactionUpdateManyWithoutPostNestedInput
  }

  export type InspirationPostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reactions?: InspirationReactionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type InspirationPostCreateManyInput = {
    id?: string
    authorId: string
    content: string
    category?: string | null
    isAnonymous?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type InspirationPostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InspirationPostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InspirationReactionCreateInput = {
    id?: string
    reaction: $Enums.ReactionType
    createdAt?: Date | string
    post: InspirationPostCreateNestedOneWithoutReactionsInput
    user: UserCreateNestedOneWithoutInspirationReactionsInput
  }

  export type InspirationReactionUncheckedCreateInput = {
    id?: string
    postId: string
    userId: string
    reaction: $Enums.ReactionType
    createdAt?: Date | string
  }

  export type InspirationReactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reaction?: EnumReactionTypeFieldUpdateOperationsInput | $Enums.ReactionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: InspirationPostUpdateOneRequiredWithoutReactionsNestedInput
    user?: UserUpdateOneRequiredWithoutInspirationReactionsNestedInput
  }

  export type InspirationReactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reaction?: EnumReactionTypeFieldUpdateOperationsInput | $Enums.ReactionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InspirationReactionCreateManyInput = {
    id?: string
    postId: string
    userId: string
    reaction: $Enums.ReactionType
    createdAt?: Date | string
  }

  export type InspirationReactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reaction?: EnumReactionTypeFieldUpdateOperationsInput | $Enums.ReactionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InspirationReactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reaction?: EnumReactionTypeFieldUpdateOperationsInput | $Enums.ReactionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeCreateInput = {
    id?: string
    name: string
    description: string
    iconName: string
    category: $Enums.BadgeCategory
    requirement: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type BadgeUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    iconName: string
    category: $Enums.BadgeCategory
    requirement: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type BadgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    iconName?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
    requirement?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    iconName?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
    requirement?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeCreateManyInput = {
    id?: string
    name: string
    description: string
    iconName: string
    category: $Enums.BadgeCategory
    requirement: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type BadgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    iconName?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
    requirement?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    iconName?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
    requirement?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeCreateInput = {
    id?: string
    userId: string
    badgeId: string
    earnedAt?: Date | string
  }

  export type UserBadgeUncheckedCreateInput = {
    id?: string
    userId: string
    badgeId: string
    earnedAt?: Date | string
  }

  export type UserBadgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeCreateManyInput = {
    id?: string
    userId: string
    badgeId: string
    earnedAt?: Date | string
  }

  export type UserBadgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type PartnershipListRelationFilter = {
    every?: PartnershipWhereInput
    some?: PartnershipWhereInput
    none?: PartnershipWhereInput
  }

  export type ChallengeListRelationFilter = {
    every?: ChallengeWhereInput
    some?: ChallengeWhereInput
    none?: ChallengeWhereInput
  }

  export type ChallengeCompletionListRelationFilter = {
    every?: ChallengeCompletionWhereInput
    some?: ChallengeCompletionWhereInput
    none?: ChallengeCompletionWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type InspirationPostListRelationFilter = {
    every?: InspirationPostWhereInput
    some?: InspirationPostWhereInput
    none?: InspirationPostWhereInput
  }

  export type InspirationReactionListRelationFilter = {
    every?: InspirationReactionWhereInput
    some?: InspirationReactionWhereInput
    none?: InspirationReactionWhereInput
  }

  export type NudgeListRelationFilter = {
    every?: NudgeWhereInput
    some?: NudgeWhereInput
    none?: NudgeWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PartnershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChallengeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChallengeCompletionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InspirationPostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InspirationReactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NudgeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    username?: SortOrder
    password?: SortOrder
    inviteCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    timezone?: SortOrder
    reminderTime?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    username?: SortOrder
    password?: SortOrder
    inviteCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    timezone?: SortOrder
    reminderTime?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    username?: SortOrder
    password?: SortOrder
    inviteCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    timezone?: SortOrder
    reminderTime?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type EnumPartnershipStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PartnershipStatus | EnumPartnershipStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PartnershipStatus[] | ListEnumPartnershipStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PartnershipStatus[] | ListEnumPartnershipStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPartnershipStatusFilter<$PrismaModel> | $Enums.PartnershipStatus
  }

  export type HabitListRelationFilter = {
    every?: HabitWhereInput
    some?: HabitWhereInput
    none?: HabitWhereInput
  }

  export type HabitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PartnershipInitiatorIdReceiverIdCompoundUniqueInput = {
    initiatorId: string
    receiverId: string
  }

  export type PartnershipCountOrderByAggregateInput = {
    id?: SortOrder
    initiatorId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartnershipMaxOrderByAggregateInput = {
    id?: SortOrder
    initiatorId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartnershipMinOrderByAggregateInput = {
    id?: SortOrder
    initiatorId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPartnershipStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PartnershipStatus | EnumPartnershipStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PartnershipStatus[] | ListEnumPartnershipStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PartnershipStatus[] | ListEnumPartnershipStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPartnershipStatusWithAggregatesFilter<$PrismaModel> | $Enums.PartnershipStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPartnershipStatusFilter<$PrismaModel>
    _max?: NestedEnumPartnershipStatusFilter<$PrismaModel>
  }

  export type EnumHabitStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HabitStatus | EnumHabitStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HabitStatus[] | ListEnumHabitStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HabitStatus[] | ListEnumHabitStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHabitStatusFilter<$PrismaModel> | $Enums.HabitStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type PartnershipRelationFilter = {
    is?: PartnershipWhereInput
    isNot?: PartnershipWhereInput
  }

  export type HabitCountOrderByAggregateInput = {
    id?: SortOrder
    partnershipId?: SortOrder
    name?: SortOrder
    category?: SortOrder
    frequency?: SortOrder
    customDays?: SortOrder
    duration?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    currentTurn?: SortOrder
    streakCount?: SortOrder
    totalDays?: SortOrder
    mulligansUsed?: SortOrder
    maxMulligans?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HabitAvgOrderByAggregateInput = {
    duration?: SortOrder
    streakCount?: SortOrder
    totalDays?: SortOrder
    mulligansUsed?: SortOrder
    maxMulligans?: SortOrder
  }

  export type HabitMaxOrderByAggregateInput = {
    id?: SortOrder
    partnershipId?: SortOrder
    name?: SortOrder
    category?: SortOrder
    frequency?: SortOrder
    customDays?: SortOrder
    duration?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    currentTurn?: SortOrder
    streakCount?: SortOrder
    totalDays?: SortOrder
    mulligansUsed?: SortOrder
    maxMulligans?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HabitMinOrderByAggregateInput = {
    id?: SortOrder
    partnershipId?: SortOrder
    name?: SortOrder
    category?: SortOrder
    frequency?: SortOrder
    customDays?: SortOrder
    duration?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    currentTurn?: SortOrder
    streakCount?: SortOrder
    totalDays?: SortOrder
    mulligansUsed?: SortOrder
    maxMulligans?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HabitSumOrderByAggregateInput = {
    duration?: SortOrder
    streakCount?: SortOrder
    totalDays?: SortOrder
    mulligansUsed?: SortOrder
    maxMulligans?: SortOrder
  }

  export type EnumHabitStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HabitStatus | EnumHabitStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HabitStatus[] | ListEnumHabitStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HabitStatus[] | ListEnumHabitStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHabitStatusWithAggregatesFilter<$PrismaModel> | $Enums.HabitStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHabitStatusFilter<$PrismaModel>
    _max?: NestedEnumHabitStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumChallengeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ChallengeStatus | EnumChallengeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ChallengeStatus[] | ListEnumChallengeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChallengeStatus[] | ListEnumChallengeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumChallengeStatusFilter<$PrismaModel> | $Enums.ChallengeStatus
  }

  export type HabitRelationFilter = {
    is?: HabitWhereInput
    isNot?: HabitWhereInput
  }

  export type ChallengeCountOrderByAggregateInput = {
    id?: SortOrder
    habitId?: SortOrder
    creatorId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type ChallengeMaxOrderByAggregateInput = {
    id?: SortOrder
    habitId?: SortOrder
    creatorId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type ChallengeMinOrderByAggregateInput = {
    id?: SortOrder
    habitId?: SortOrder
    creatorId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumChallengeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChallengeStatus | EnumChallengeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ChallengeStatus[] | ListEnumChallengeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChallengeStatus[] | ListEnumChallengeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumChallengeStatusWithAggregatesFilter<$PrismaModel> | $Enums.ChallengeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChallengeStatusFilter<$PrismaModel>
    _max?: NestedEnumChallengeStatusFilter<$PrismaModel>
  }

  export type EnumCompletionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CompletionStatus | EnumCompletionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompletionStatus[] | ListEnumCompletionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompletionStatus[] | ListEnumCompletionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompletionStatusFilter<$PrismaModel> | $Enums.CompletionStatus
  }

  export type ChallengeRelationFilter = {
    is?: ChallengeWhereInput
    isNot?: ChallengeWhereInput
  }

  export type ChallengeCompletionChallengeIdUserIdCompoundUniqueInput = {
    challengeId: string
    userId: string
  }

  export type ChallengeCompletionCountOrderByAggregateInput = {
    id?: SortOrder
    challengeId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    completedAt?: SortOrder
    feelingTags?: SortOrder
    reflectionNote?: SortOrder
    reflectionPrompt?: SortOrder
  }

  export type ChallengeCompletionMaxOrderByAggregateInput = {
    id?: SortOrder
    challengeId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    completedAt?: SortOrder
    feelingTags?: SortOrder
    reflectionNote?: SortOrder
    reflectionPrompt?: SortOrder
  }

  export type ChallengeCompletionMinOrderByAggregateInput = {
    id?: SortOrder
    challengeId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    completedAt?: SortOrder
    feelingTags?: SortOrder
    reflectionNote?: SortOrder
    reflectionPrompt?: SortOrder
  }

  export type EnumCompletionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompletionStatus | EnumCompletionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompletionStatus[] | ListEnumCompletionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompletionStatus[] | ListEnumCompletionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompletionStatusWithAggregatesFilter<$PrismaModel> | $Enums.CompletionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompletionStatusFilter<$PrismaModel>
    _max?: NestedEnumCompletionStatusFilter<$PrismaModel>
  }

  export type EnumMessageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageType | EnumMessageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MessageType[] | ListEnumMessageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageType[] | ListEnumMessageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageTypeFilter<$PrismaModel> | $Enums.MessageType
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    partnershipId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    partnershipId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    partnershipId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumMessageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageType | EnumMessageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MessageType[] | ListEnumMessageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageType[] | ListEnumMessageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageTypeWithAggregatesFilter<$PrismaModel> | $Enums.MessageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMessageTypeFilter<$PrismaModel>
    _max?: NestedEnumMessageTypeFilter<$PrismaModel>
  }

  export type EnumNudgeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NudgeType | EnumNudgeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NudgeType[] | ListEnumNudgeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NudgeType[] | ListEnumNudgeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNudgeTypeFilter<$PrismaModel> | $Enums.NudgeType
  }

  export type NudgeCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    nudgeType?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type NudgeMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    nudgeType?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type NudgeMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    nudgeType?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumNudgeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NudgeType | EnumNudgeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NudgeType[] | ListEnumNudgeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NudgeType[] | ListEnumNudgeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNudgeTypeWithAggregatesFilter<$PrismaModel> | $Enums.NudgeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNudgeTypeFilter<$PrismaModel>
    _max?: NestedEnumNudgeTypeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type InspirationPostCountOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    category?: SortOrder
    isAnonymous?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type InspirationPostMaxOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    category?: SortOrder
    isAnonymous?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type InspirationPostMinOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    category?: SortOrder
    isAnonymous?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumReactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ReactionType | EnumReactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReactionType[] | ListEnumReactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReactionType[] | ListEnumReactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReactionTypeFilter<$PrismaModel> | $Enums.ReactionType
  }

  export type InspirationPostRelationFilter = {
    is?: InspirationPostWhereInput
    isNot?: InspirationPostWhereInput
  }

  export type InspirationReactionPostIdUserIdCompoundUniqueInput = {
    postId: string
    userId: string
  }

  export type InspirationReactionCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    reaction?: SortOrder
    createdAt?: SortOrder
  }

  export type InspirationReactionMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    reaction?: SortOrder
    createdAt?: SortOrder
  }

  export type InspirationReactionMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    reaction?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumReactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReactionType | EnumReactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReactionType[] | ListEnumReactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReactionType[] | ListEnumReactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.ReactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReactionTypeFilter<$PrismaModel>
    _max?: NestedEnumReactionTypeFilter<$PrismaModel>
  }

  export type EnumBadgeCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeCategory | EnumBadgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeCategoryFilter<$PrismaModel> | $Enums.BadgeCategory
  }

  export type BadgeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    iconName?: SortOrder
    category?: SortOrder
    requirement?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type BadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    iconName?: SortOrder
    category?: SortOrder
    requirement?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type BadgeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    iconName?: SortOrder
    category?: SortOrder
    requirement?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumBadgeCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeCategory | EnumBadgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeCategoryWithAggregatesFilter<$PrismaModel> | $Enums.BadgeCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBadgeCategoryFilter<$PrismaModel>
    _max?: NestedEnumBadgeCategoryFilter<$PrismaModel>
  }

  export type UserBadgeUserIdBadgeIdCompoundUniqueInput = {
    userId: string
    badgeId: string
  }

  export type UserBadgeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
  }

  export type UserBadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
  }

  export type UserBadgeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type PartnershipCreateNestedManyWithoutInitiatorInput = {
    create?: XOR<PartnershipCreateWithoutInitiatorInput, PartnershipUncheckedCreateWithoutInitiatorInput> | PartnershipCreateWithoutInitiatorInput[] | PartnershipUncheckedCreateWithoutInitiatorInput[]
    connectOrCreate?: PartnershipCreateOrConnectWithoutInitiatorInput | PartnershipCreateOrConnectWithoutInitiatorInput[]
    createMany?: PartnershipCreateManyInitiatorInputEnvelope
    connect?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
  }

  export type PartnershipCreateNestedManyWithoutReceiverInput = {
    create?: XOR<PartnershipCreateWithoutReceiverInput, PartnershipUncheckedCreateWithoutReceiverInput> | PartnershipCreateWithoutReceiverInput[] | PartnershipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: PartnershipCreateOrConnectWithoutReceiverInput | PartnershipCreateOrConnectWithoutReceiverInput[]
    createMany?: PartnershipCreateManyReceiverInputEnvelope
    connect?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
  }

  export type ChallengeCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ChallengeCreateWithoutCreatorInput, ChallengeUncheckedCreateWithoutCreatorInput> | ChallengeCreateWithoutCreatorInput[] | ChallengeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ChallengeCreateOrConnectWithoutCreatorInput | ChallengeCreateOrConnectWithoutCreatorInput[]
    createMany?: ChallengeCreateManyCreatorInputEnvelope
    connect?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
  }

  export type ChallengeCompletionCreateNestedManyWithoutUserInput = {
    create?: XOR<ChallengeCompletionCreateWithoutUserInput, ChallengeCompletionUncheckedCreateWithoutUserInput> | ChallengeCompletionCreateWithoutUserInput[] | ChallengeCompletionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChallengeCompletionCreateOrConnectWithoutUserInput | ChallengeCompletionCreateOrConnectWithoutUserInput[]
    createMany?: ChallengeCompletionCreateManyUserInputEnvelope
    connect?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type InspirationPostCreateNestedManyWithoutAuthorInput = {
    create?: XOR<InspirationPostCreateWithoutAuthorInput, InspirationPostUncheckedCreateWithoutAuthorInput> | InspirationPostCreateWithoutAuthorInput[] | InspirationPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: InspirationPostCreateOrConnectWithoutAuthorInput | InspirationPostCreateOrConnectWithoutAuthorInput[]
    createMany?: InspirationPostCreateManyAuthorInputEnvelope
    connect?: InspirationPostWhereUniqueInput | InspirationPostWhereUniqueInput[]
  }

  export type InspirationReactionCreateNestedManyWithoutUserInput = {
    create?: XOR<InspirationReactionCreateWithoutUserInput, InspirationReactionUncheckedCreateWithoutUserInput> | InspirationReactionCreateWithoutUserInput[] | InspirationReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InspirationReactionCreateOrConnectWithoutUserInput | InspirationReactionCreateOrConnectWithoutUserInput[]
    createMany?: InspirationReactionCreateManyUserInputEnvelope
    connect?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
  }

  export type NudgeCreateNestedManyWithoutSenderInput = {
    create?: XOR<NudgeCreateWithoutSenderInput, NudgeUncheckedCreateWithoutSenderInput> | NudgeCreateWithoutSenderInput[] | NudgeUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: NudgeCreateOrConnectWithoutSenderInput | NudgeCreateOrConnectWithoutSenderInput[]
    createMany?: NudgeCreateManySenderInputEnvelope
    connect?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
  }

  export type NudgeCreateNestedManyWithoutReceiverInput = {
    create?: XOR<NudgeCreateWithoutReceiverInput, NudgeUncheckedCreateWithoutReceiverInput> | NudgeCreateWithoutReceiverInput[] | NudgeUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: NudgeCreateOrConnectWithoutReceiverInput | NudgeCreateOrConnectWithoutReceiverInput[]
    createMany?: NudgeCreateManyReceiverInputEnvelope
    connect?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type PartnershipUncheckedCreateNestedManyWithoutInitiatorInput = {
    create?: XOR<PartnershipCreateWithoutInitiatorInput, PartnershipUncheckedCreateWithoutInitiatorInput> | PartnershipCreateWithoutInitiatorInput[] | PartnershipUncheckedCreateWithoutInitiatorInput[]
    connectOrCreate?: PartnershipCreateOrConnectWithoutInitiatorInput | PartnershipCreateOrConnectWithoutInitiatorInput[]
    createMany?: PartnershipCreateManyInitiatorInputEnvelope
    connect?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
  }

  export type PartnershipUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<PartnershipCreateWithoutReceiverInput, PartnershipUncheckedCreateWithoutReceiverInput> | PartnershipCreateWithoutReceiverInput[] | PartnershipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: PartnershipCreateOrConnectWithoutReceiverInput | PartnershipCreateOrConnectWithoutReceiverInput[]
    createMany?: PartnershipCreateManyReceiverInputEnvelope
    connect?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
  }

  export type ChallengeUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ChallengeCreateWithoutCreatorInput, ChallengeUncheckedCreateWithoutCreatorInput> | ChallengeCreateWithoutCreatorInput[] | ChallengeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ChallengeCreateOrConnectWithoutCreatorInput | ChallengeCreateOrConnectWithoutCreatorInput[]
    createMany?: ChallengeCreateManyCreatorInputEnvelope
    connect?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
  }

  export type ChallengeCompletionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChallengeCompletionCreateWithoutUserInput, ChallengeCompletionUncheckedCreateWithoutUserInput> | ChallengeCompletionCreateWithoutUserInput[] | ChallengeCompletionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChallengeCompletionCreateOrConnectWithoutUserInput | ChallengeCompletionCreateOrConnectWithoutUserInput[]
    createMany?: ChallengeCompletionCreateManyUserInputEnvelope
    connect?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type InspirationPostUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<InspirationPostCreateWithoutAuthorInput, InspirationPostUncheckedCreateWithoutAuthorInput> | InspirationPostCreateWithoutAuthorInput[] | InspirationPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: InspirationPostCreateOrConnectWithoutAuthorInput | InspirationPostCreateOrConnectWithoutAuthorInput[]
    createMany?: InspirationPostCreateManyAuthorInputEnvelope
    connect?: InspirationPostWhereUniqueInput | InspirationPostWhereUniqueInput[]
  }

  export type InspirationReactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InspirationReactionCreateWithoutUserInput, InspirationReactionUncheckedCreateWithoutUserInput> | InspirationReactionCreateWithoutUserInput[] | InspirationReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InspirationReactionCreateOrConnectWithoutUserInput | InspirationReactionCreateOrConnectWithoutUserInput[]
    createMany?: InspirationReactionCreateManyUserInputEnvelope
    connect?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
  }

  export type NudgeUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<NudgeCreateWithoutSenderInput, NudgeUncheckedCreateWithoutSenderInput> | NudgeCreateWithoutSenderInput[] | NudgeUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: NudgeCreateOrConnectWithoutSenderInput | NudgeCreateOrConnectWithoutSenderInput[]
    createMany?: NudgeCreateManySenderInputEnvelope
    connect?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
  }

  export type NudgeUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<NudgeCreateWithoutReceiverInput, NudgeUncheckedCreateWithoutReceiverInput> | NudgeCreateWithoutReceiverInput[] | NudgeUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: NudgeCreateOrConnectWithoutReceiverInput | NudgeCreateOrConnectWithoutReceiverInput[]
    createMany?: NudgeCreateManyReceiverInputEnvelope
    connect?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type PartnershipUpdateManyWithoutInitiatorNestedInput = {
    create?: XOR<PartnershipCreateWithoutInitiatorInput, PartnershipUncheckedCreateWithoutInitiatorInput> | PartnershipCreateWithoutInitiatorInput[] | PartnershipUncheckedCreateWithoutInitiatorInput[]
    connectOrCreate?: PartnershipCreateOrConnectWithoutInitiatorInput | PartnershipCreateOrConnectWithoutInitiatorInput[]
    upsert?: PartnershipUpsertWithWhereUniqueWithoutInitiatorInput | PartnershipUpsertWithWhereUniqueWithoutInitiatorInput[]
    createMany?: PartnershipCreateManyInitiatorInputEnvelope
    set?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    disconnect?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    delete?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    connect?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    update?: PartnershipUpdateWithWhereUniqueWithoutInitiatorInput | PartnershipUpdateWithWhereUniqueWithoutInitiatorInput[]
    updateMany?: PartnershipUpdateManyWithWhereWithoutInitiatorInput | PartnershipUpdateManyWithWhereWithoutInitiatorInput[]
    deleteMany?: PartnershipScalarWhereInput | PartnershipScalarWhereInput[]
  }

  export type PartnershipUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<PartnershipCreateWithoutReceiverInput, PartnershipUncheckedCreateWithoutReceiverInput> | PartnershipCreateWithoutReceiverInput[] | PartnershipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: PartnershipCreateOrConnectWithoutReceiverInput | PartnershipCreateOrConnectWithoutReceiverInput[]
    upsert?: PartnershipUpsertWithWhereUniqueWithoutReceiverInput | PartnershipUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: PartnershipCreateManyReceiverInputEnvelope
    set?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    disconnect?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    delete?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    connect?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    update?: PartnershipUpdateWithWhereUniqueWithoutReceiverInput | PartnershipUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: PartnershipUpdateManyWithWhereWithoutReceiverInput | PartnershipUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: PartnershipScalarWhereInput | PartnershipScalarWhereInput[]
  }

  export type ChallengeUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ChallengeCreateWithoutCreatorInput, ChallengeUncheckedCreateWithoutCreatorInput> | ChallengeCreateWithoutCreatorInput[] | ChallengeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ChallengeCreateOrConnectWithoutCreatorInput | ChallengeCreateOrConnectWithoutCreatorInput[]
    upsert?: ChallengeUpsertWithWhereUniqueWithoutCreatorInput | ChallengeUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ChallengeCreateManyCreatorInputEnvelope
    set?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    disconnect?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    delete?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    connect?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    update?: ChallengeUpdateWithWhereUniqueWithoutCreatorInput | ChallengeUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ChallengeUpdateManyWithWhereWithoutCreatorInput | ChallengeUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ChallengeScalarWhereInput | ChallengeScalarWhereInput[]
  }

  export type ChallengeCompletionUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChallengeCompletionCreateWithoutUserInput, ChallengeCompletionUncheckedCreateWithoutUserInput> | ChallengeCompletionCreateWithoutUserInput[] | ChallengeCompletionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChallengeCompletionCreateOrConnectWithoutUserInput | ChallengeCompletionCreateOrConnectWithoutUserInput[]
    upsert?: ChallengeCompletionUpsertWithWhereUniqueWithoutUserInput | ChallengeCompletionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChallengeCompletionCreateManyUserInputEnvelope
    set?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    disconnect?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    delete?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    connect?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    update?: ChallengeCompletionUpdateWithWhereUniqueWithoutUserInput | ChallengeCompletionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChallengeCompletionUpdateManyWithWhereWithoutUserInput | ChallengeCompletionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChallengeCompletionScalarWhereInput | ChallengeCompletionScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type InspirationPostUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<InspirationPostCreateWithoutAuthorInput, InspirationPostUncheckedCreateWithoutAuthorInput> | InspirationPostCreateWithoutAuthorInput[] | InspirationPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: InspirationPostCreateOrConnectWithoutAuthorInput | InspirationPostCreateOrConnectWithoutAuthorInput[]
    upsert?: InspirationPostUpsertWithWhereUniqueWithoutAuthorInput | InspirationPostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: InspirationPostCreateManyAuthorInputEnvelope
    set?: InspirationPostWhereUniqueInput | InspirationPostWhereUniqueInput[]
    disconnect?: InspirationPostWhereUniqueInput | InspirationPostWhereUniqueInput[]
    delete?: InspirationPostWhereUniqueInput | InspirationPostWhereUniqueInput[]
    connect?: InspirationPostWhereUniqueInput | InspirationPostWhereUniqueInput[]
    update?: InspirationPostUpdateWithWhereUniqueWithoutAuthorInput | InspirationPostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: InspirationPostUpdateManyWithWhereWithoutAuthorInput | InspirationPostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: InspirationPostScalarWhereInput | InspirationPostScalarWhereInput[]
  }

  export type InspirationReactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<InspirationReactionCreateWithoutUserInput, InspirationReactionUncheckedCreateWithoutUserInput> | InspirationReactionCreateWithoutUserInput[] | InspirationReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InspirationReactionCreateOrConnectWithoutUserInput | InspirationReactionCreateOrConnectWithoutUserInput[]
    upsert?: InspirationReactionUpsertWithWhereUniqueWithoutUserInput | InspirationReactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InspirationReactionCreateManyUserInputEnvelope
    set?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    disconnect?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    delete?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    connect?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    update?: InspirationReactionUpdateWithWhereUniqueWithoutUserInput | InspirationReactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InspirationReactionUpdateManyWithWhereWithoutUserInput | InspirationReactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InspirationReactionScalarWhereInput | InspirationReactionScalarWhereInput[]
  }

  export type NudgeUpdateManyWithoutSenderNestedInput = {
    create?: XOR<NudgeCreateWithoutSenderInput, NudgeUncheckedCreateWithoutSenderInput> | NudgeCreateWithoutSenderInput[] | NudgeUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: NudgeCreateOrConnectWithoutSenderInput | NudgeCreateOrConnectWithoutSenderInput[]
    upsert?: NudgeUpsertWithWhereUniqueWithoutSenderInput | NudgeUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: NudgeCreateManySenderInputEnvelope
    set?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    disconnect?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    delete?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    connect?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    update?: NudgeUpdateWithWhereUniqueWithoutSenderInput | NudgeUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: NudgeUpdateManyWithWhereWithoutSenderInput | NudgeUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: NudgeScalarWhereInput | NudgeScalarWhereInput[]
  }

  export type NudgeUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<NudgeCreateWithoutReceiverInput, NudgeUncheckedCreateWithoutReceiverInput> | NudgeCreateWithoutReceiverInput[] | NudgeUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: NudgeCreateOrConnectWithoutReceiverInput | NudgeCreateOrConnectWithoutReceiverInput[]
    upsert?: NudgeUpsertWithWhereUniqueWithoutReceiverInput | NudgeUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: NudgeCreateManyReceiverInputEnvelope
    set?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    disconnect?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    delete?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    connect?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    update?: NudgeUpdateWithWhereUniqueWithoutReceiverInput | NudgeUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: NudgeUpdateManyWithWhereWithoutReceiverInput | NudgeUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: NudgeScalarWhereInput | NudgeScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type PartnershipUncheckedUpdateManyWithoutInitiatorNestedInput = {
    create?: XOR<PartnershipCreateWithoutInitiatorInput, PartnershipUncheckedCreateWithoutInitiatorInput> | PartnershipCreateWithoutInitiatorInput[] | PartnershipUncheckedCreateWithoutInitiatorInput[]
    connectOrCreate?: PartnershipCreateOrConnectWithoutInitiatorInput | PartnershipCreateOrConnectWithoutInitiatorInput[]
    upsert?: PartnershipUpsertWithWhereUniqueWithoutInitiatorInput | PartnershipUpsertWithWhereUniqueWithoutInitiatorInput[]
    createMany?: PartnershipCreateManyInitiatorInputEnvelope
    set?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    disconnect?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    delete?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    connect?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    update?: PartnershipUpdateWithWhereUniqueWithoutInitiatorInput | PartnershipUpdateWithWhereUniqueWithoutInitiatorInput[]
    updateMany?: PartnershipUpdateManyWithWhereWithoutInitiatorInput | PartnershipUpdateManyWithWhereWithoutInitiatorInput[]
    deleteMany?: PartnershipScalarWhereInput | PartnershipScalarWhereInput[]
  }

  export type PartnershipUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<PartnershipCreateWithoutReceiverInput, PartnershipUncheckedCreateWithoutReceiverInput> | PartnershipCreateWithoutReceiverInput[] | PartnershipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: PartnershipCreateOrConnectWithoutReceiverInput | PartnershipCreateOrConnectWithoutReceiverInput[]
    upsert?: PartnershipUpsertWithWhereUniqueWithoutReceiverInput | PartnershipUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: PartnershipCreateManyReceiverInputEnvelope
    set?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    disconnect?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    delete?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    connect?: PartnershipWhereUniqueInput | PartnershipWhereUniqueInput[]
    update?: PartnershipUpdateWithWhereUniqueWithoutReceiverInput | PartnershipUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: PartnershipUpdateManyWithWhereWithoutReceiverInput | PartnershipUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: PartnershipScalarWhereInput | PartnershipScalarWhereInput[]
  }

  export type ChallengeUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ChallengeCreateWithoutCreatorInput, ChallengeUncheckedCreateWithoutCreatorInput> | ChallengeCreateWithoutCreatorInput[] | ChallengeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ChallengeCreateOrConnectWithoutCreatorInput | ChallengeCreateOrConnectWithoutCreatorInput[]
    upsert?: ChallengeUpsertWithWhereUniqueWithoutCreatorInput | ChallengeUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ChallengeCreateManyCreatorInputEnvelope
    set?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    disconnect?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    delete?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    connect?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    update?: ChallengeUpdateWithWhereUniqueWithoutCreatorInput | ChallengeUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ChallengeUpdateManyWithWhereWithoutCreatorInput | ChallengeUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ChallengeScalarWhereInput | ChallengeScalarWhereInput[]
  }

  export type ChallengeCompletionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChallengeCompletionCreateWithoutUserInput, ChallengeCompletionUncheckedCreateWithoutUserInput> | ChallengeCompletionCreateWithoutUserInput[] | ChallengeCompletionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChallengeCompletionCreateOrConnectWithoutUserInput | ChallengeCompletionCreateOrConnectWithoutUserInput[]
    upsert?: ChallengeCompletionUpsertWithWhereUniqueWithoutUserInput | ChallengeCompletionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChallengeCompletionCreateManyUserInputEnvelope
    set?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    disconnect?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    delete?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    connect?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    update?: ChallengeCompletionUpdateWithWhereUniqueWithoutUserInput | ChallengeCompletionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChallengeCompletionUpdateManyWithWhereWithoutUserInput | ChallengeCompletionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChallengeCompletionScalarWhereInput | ChallengeCompletionScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type InspirationPostUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<InspirationPostCreateWithoutAuthorInput, InspirationPostUncheckedCreateWithoutAuthorInput> | InspirationPostCreateWithoutAuthorInput[] | InspirationPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: InspirationPostCreateOrConnectWithoutAuthorInput | InspirationPostCreateOrConnectWithoutAuthorInput[]
    upsert?: InspirationPostUpsertWithWhereUniqueWithoutAuthorInput | InspirationPostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: InspirationPostCreateManyAuthorInputEnvelope
    set?: InspirationPostWhereUniqueInput | InspirationPostWhereUniqueInput[]
    disconnect?: InspirationPostWhereUniqueInput | InspirationPostWhereUniqueInput[]
    delete?: InspirationPostWhereUniqueInput | InspirationPostWhereUniqueInput[]
    connect?: InspirationPostWhereUniqueInput | InspirationPostWhereUniqueInput[]
    update?: InspirationPostUpdateWithWhereUniqueWithoutAuthorInput | InspirationPostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: InspirationPostUpdateManyWithWhereWithoutAuthorInput | InspirationPostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: InspirationPostScalarWhereInput | InspirationPostScalarWhereInput[]
  }

  export type InspirationReactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InspirationReactionCreateWithoutUserInput, InspirationReactionUncheckedCreateWithoutUserInput> | InspirationReactionCreateWithoutUserInput[] | InspirationReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InspirationReactionCreateOrConnectWithoutUserInput | InspirationReactionCreateOrConnectWithoutUserInput[]
    upsert?: InspirationReactionUpsertWithWhereUniqueWithoutUserInput | InspirationReactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InspirationReactionCreateManyUserInputEnvelope
    set?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    disconnect?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    delete?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    connect?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    update?: InspirationReactionUpdateWithWhereUniqueWithoutUserInput | InspirationReactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InspirationReactionUpdateManyWithWhereWithoutUserInput | InspirationReactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InspirationReactionScalarWhereInput | InspirationReactionScalarWhereInput[]
  }

  export type NudgeUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<NudgeCreateWithoutSenderInput, NudgeUncheckedCreateWithoutSenderInput> | NudgeCreateWithoutSenderInput[] | NudgeUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: NudgeCreateOrConnectWithoutSenderInput | NudgeCreateOrConnectWithoutSenderInput[]
    upsert?: NudgeUpsertWithWhereUniqueWithoutSenderInput | NudgeUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: NudgeCreateManySenderInputEnvelope
    set?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    disconnect?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    delete?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    connect?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    update?: NudgeUpdateWithWhereUniqueWithoutSenderInput | NudgeUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: NudgeUpdateManyWithWhereWithoutSenderInput | NudgeUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: NudgeScalarWhereInput | NudgeScalarWhereInput[]
  }

  export type NudgeUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<NudgeCreateWithoutReceiverInput, NudgeUncheckedCreateWithoutReceiverInput> | NudgeCreateWithoutReceiverInput[] | NudgeUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: NudgeCreateOrConnectWithoutReceiverInput | NudgeCreateOrConnectWithoutReceiverInput[]
    upsert?: NudgeUpsertWithWhereUniqueWithoutReceiverInput | NudgeUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: NudgeCreateManyReceiverInputEnvelope
    set?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    disconnect?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    delete?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    connect?: NudgeWhereUniqueInput | NudgeWhereUniqueInput[]
    update?: NudgeUpdateWithWhereUniqueWithoutReceiverInput | NudgeUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: NudgeUpdateManyWithWhereWithoutReceiverInput | NudgeUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: NudgeScalarWhereInput | NudgeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutInitiatedPartnershipsInput = {
    create?: XOR<UserCreateWithoutInitiatedPartnershipsInput, UserUncheckedCreateWithoutInitiatedPartnershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInitiatedPartnershipsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedPartnershipsInput = {
    create?: XOR<UserCreateWithoutReceivedPartnershipsInput, UserUncheckedCreateWithoutReceivedPartnershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedPartnershipsInput
    connect?: UserWhereUniqueInput
  }

  export type HabitCreateNestedManyWithoutPartnershipInput = {
    create?: XOR<HabitCreateWithoutPartnershipInput, HabitUncheckedCreateWithoutPartnershipInput> | HabitCreateWithoutPartnershipInput[] | HabitUncheckedCreateWithoutPartnershipInput[]
    connectOrCreate?: HabitCreateOrConnectWithoutPartnershipInput | HabitCreateOrConnectWithoutPartnershipInput[]
    createMany?: HabitCreateManyPartnershipInputEnvelope
    connect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutPartnershipInput = {
    create?: XOR<MessageCreateWithoutPartnershipInput, MessageUncheckedCreateWithoutPartnershipInput> | MessageCreateWithoutPartnershipInput[] | MessageUncheckedCreateWithoutPartnershipInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutPartnershipInput | MessageCreateOrConnectWithoutPartnershipInput[]
    createMany?: MessageCreateManyPartnershipInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type HabitUncheckedCreateNestedManyWithoutPartnershipInput = {
    create?: XOR<HabitCreateWithoutPartnershipInput, HabitUncheckedCreateWithoutPartnershipInput> | HabitCreateWithoutPartnershipInput[] | HabitUncheckedCreateWithoutPartnershipInput[]
    connectOrCreate?: HabitCreateOrConnectWithoutPartnershipInput | HabitCreateOrConnectWithoutPartnershipInput[]
    createMany?: HabitCreateManyPartnershipInputEnvelope
    connect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutPartnershipInput = {
    create?: XOR<MessageCreateWithoutPartnershipInput, MessageUncheckedCreateWithoutPartnershipInput> | MessageCreateWithoutPartnershipInput[] | MessageUncheckedCreateWithoutPartnershipInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutPartnershipInput | MessageCreateOrConnectWithoutPartnershipInput[]
    createMany?: MessageCreateManyPartnershipInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type EnumPartnershipStatusFieldUpdateOperationsInput = {
    set?: $Enums.PartnershipStatus
  }

  export type UserUpdateOneRequiredWithoutInitiatedPartnershipsNestedInput = {
    create?: XOR<UserCreateWithoutInitiatedPartnershipsInput, UserUncheckedCreateWithoutInitiatedPartnershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInitiatedPartnershipsInput
    upsert?: UserUpsertWithoutInitiatedPartnershipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInitiatedPartnershipsInput, UserUpdateWithoutInitiatedPartnershipsInput>, UserUncheckedUpdateWithoutInitiatedPartnershipsInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedPartnershipsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedPartnershipsInput, UserUncheckedCreateWithoutReceivedPartnershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedPartnershipsInput
    upsert?: UserUpsertWithoutReceivedPartnershipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedPartnershipsInput, UserUpdateWithoutReceivedPartnershipsInput>, UserUncheckedUpdateWithoutReceivedPartnershipsInput>
  }

  export type HabitUpdateManyWithoutPartnershipNestedInput = {
    create?: XOR<HabitCreateWithoutPartnershipInput, HabitUncheckedCreateWithoutPartnershipInput> | HabitCreateWithoutPartnershipInput[] | HabitUncheckedCreateWithoutPartnershipInput[]
    connectOrCreate?: HabitCreateOrConnectWithoutPartnershipInput | HabitCreateOrConnectWithoutPartnershipInput[]
    upsert?: HabitUpsertWithWhereUniqueWithoutPartnershipInput | HabitUpsertWithWhereUniqueWithoutPartnershipInput[]
    createMany?: HabitCreateManyPartnershipInputEnvelope
    set?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    disconnect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    delete?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    connect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    update?: HabitUpdateWithWhereUniqueWithoutPartnershipInput | HabitUpdateWithWhereUniqueWithoutPartnershipInput[]
    updateMany?: HabitUpdateManyWithWhereWithoutPartnershipInput | HabitUpdateManyWithWhereWithoutPartnershipInput[]
    deleteMany?: HabitScalarWhereInput | HabitScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutPartnershipNestedInput = {
    create?: XOR<MessageCreateWithoutPartnershipInput, MessageUncheckedCreateWithoutPartnershipInput> | MessageCreateWithoutPartnershipInput[] | MessageUncheckedCreateWithoutPartnershipInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutPartnershipInput | MessageCreateOrConnectWithoutPartnershipInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutPartnershipInput | MessageUpsertWithWhereUniqueWithoutPartnershipInput[]
    createMany?: MessageCreateManyPartnershipInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutPartnershipInput | MessageUpdateWithWhereUniqueWithoutPartnershipInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutPartnershipInput | MessageUpdateManyWithWhereWithoutPartnershipInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type HabitUncheckedUpdateManyWithoutPartnershipNestedInput = {
    create?: XOR<HabitCreateWithoutPartnershipInput, HabitUncheckedCreateWithoutPartnershipInput> | HabitCreateWithoutPartnershipInput[] | HabitUncheckedCreateWithoutPartnershipInput[]
    connectOrCreate?: HabitCreateOrConnectWithoutPartnershipInput | HabitCreateOrConnectWithoutPartnershipInput[]
    upsert?: HabitUpsertWithWhereUniqueWithoutPartnershipInput | HabitUpsertWithWhereUniqueWithoutPartnershipInput[]
    createMany?: HabitCreateManyPartnershipInputEnvelope
    set?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    disconnect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    delete?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    connect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    update?: HabitUpdateWithWhereUniqueWithoutPartnershipInput | HabitUpdateWithWhereUniqueWithoutPartnershipInput[]
    updateMany?: HabitUpdateManyWithWhereWithoutPartnershipInput | HabitUpdateManyWithWhereWithoutPartnershipInput[]
    deleteMany?: HabitScalarWhereInput | HabitScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutPartnershipNestedInput = {
    create?: XOR<MessageCreateWithoutPartnershipInput, MessageUncheckedCreateWithoutPartnershipInput> | MessageCreateWithoutPartnershipInput[] | MessageUncheckedCreateWithoutPartnershipInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutPartnershipInput | MessageCreateOrConnectWithoutPartnershipInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutPartnershipInput | MessageUpsertWithWhereUniqueWithoutPartnershipInput[]
    createMany?: MessageCreateManyPartnershipInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutPartnershipInput | MessageUpdateWithWhereUniqueWithoutPartnershipInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutPartnershipInput | MessageUpdateManyWithWhereWithoutPartnershipInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type PartnershipCreateNestedOneWithoutHabitsInput = {
    create?: XOR<PartnershipCreateWithoutHabitsInput, PartnershipUncheckedCreateWithoutHabitsInput>
    connectOrCreate?: PartnershipCreateOrConnectWithoutHabitsInput
    connect?: PartnershipWhereUniqueInput
  }

  export type ChallengeCreateNestedManyWithoutHabitInput = {
    create?: XOR<ChallengeCreateWithoutHabitInput, ChallengeUncheckedCreateWithoutHabitInput> | ChallengeCreateWithoutHabitInput[] | ChallengeUncheckedCreateWithoutHabitInput[]
    connectOrCreate?: ChallengeCreateOrConnectWithoutHabitInput | ChallengeCreateOrConnectWithoutHabitInput[]
    createMany?: ChallengeCreateManyHabitInputEnvelope
    connect?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
  }

  export type ChallengeUncheckedCreateNestedManyWithoutHabitInput = {
    create?: XOR<ChallengeCreateWithoutHabitInput, ChallengeUncheckedCreateWithoutHabitInput> | ChallengeCreateWithoutHabitInput[] | ChallengeUncheckedCreateWithoutHabitInput[]
    connectOrCreate?: ChallengeCreateOrConnectWithoutHabitInput | ChallengeCreateOrConnectWithoutHabitInput[]
    createMany?: ChallengeCreateManyHabitInputEnvelope
    connect?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
  }

  export type EnumHabitStatusFieldUpdateOperationsInput = {
    set?: $Enums.HabitStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PartnershipUpdateOneRequiredWithoutHabitsNestedInput = {
    create?: XOR<PartnershipCreateWithoutHabitsInput, PartnershipUncheckedCreateWithoutHabitsInput>
    connectOrCreate?: PartnershipCreateOrConnectWithoutHabitsInput
    upsert?: PartnershipUpsertWithoutHabitsInput
    connect?: PartnershipWhereUniqueInput
    update?: XOR<XOR<PartnershipUpdateToOneWithWhereWithoutHabitsInput, PartnershipUpdateWithoutHabitsInput>, PartnershipUncheckedUpdateWithoutHabitsInput>
  }

  export type ChallengeUpdateManyWithoutHabitNestedInput = {
    create?: XOR<ChallengeCreateWithoutHabitInput, ChallengeUncheckedCreateWithoutHabitInput> | ChallengeCreateWithoutHabitInput[] | ChallengeUncheckedCreateWithoutHabitInput[]
    connectOrCreate?: ChallengeCreateOrConnectWithoutHabitInput | ChallengeCreateOrConnectWithoutHabitInput[]
    upsert?: ChallengeUpsertWithWhereUniqueWithoutHabitInput | ChallengeUpsertWithWhereUniqueWithoutHabitInput[]
    createMany?: ChallengeCreateManyHabitInputEnvelope
    set?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    disconnect?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    delete?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    connect?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    update?: ChallengeUpdateWithWhereUniqueWithoutHabitInput | ChallengeUpdateWithWhereUniqueWithoutHabitInput[]
    updateMany?: ChallengeUpdateManyWithWhereWithoutHabitInput | ChallengeUpdateManyWithWhereWithoutHabitInput[]
    deleteMany?: ChallengeScalarWhereInput | ChallengeScalarWhereInput[]
  }

  export type ChallengeUncheckedUpdateManyWithoutHabitNestedInput = {
    create?: XOR<ChallengeCreateWithoutHabitInput, ChallengeUncheckedCreateWithoutHabitInput> | ChallengeCreateWithoutHabitInput[] | ChallengeUncheckedCreateWithoutHabitInput[]
    connectOrCreate?: ChallengeCreateOrConnectWithoutHabitInput | ChallengeCreateOrConnectWithoutHabitInput[]
    upsert?: ChallengeUpsertWithWhereUniqueWithoutHabitInput | ChallengeUpsertWithWhereUniqueWithoutHabitInput[]
    createMany?: ChallengeCreateManyHabitInputEnvelope
    set?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    disconnect?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    delete?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    connect?: ChallengeWhereUniqueInput | ChallengeWhereUniqueInput[]
    update?: ChallengeUpdateWithWhereUniqueWithoutHabitInput | ChallengeUpdateWithWhereUniqueWithoutHabitInput[]
    updateMany?: ChallengeUpdateManyWithWhereWithoutHabitInput | ChallengeUpdateManyWithWhereWithoutHabitInput[]
    deleteMany?: ChallengeScalarWhereInput | ChallengeScalarWhereInput[]
  }

  export type HabitCreateNestedOneWithoutChallengesInput = {
    create?: XOR<HabitCreateWithoutChallengesInput, HabitUncheckedCreateWithoutChallengesInput>
    connectOrCreate?: HabitCreateOrConnectWithoutChallengesInput
    connect?: HabitWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChallengesCreatedInput = {
    create?: XOR<UserCreateWithoutChallengesCreatedInput, UserUncheckedCreateWithoutChallengesCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutChallengesCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type ChallengeCompletionCreateNestedManyWithoutChallengeInput = {
    create?: XOR<ChallengeCompletionCreateWithoutChallengeInput, ChallengeCompletionUncheckedCreateWithoutChallengeInput> | ChallengeCompletionCreateWithoutChallengeInput[] | ChallengeCompletionUncheckedCreateWithoutChallengeInput[]
    connectOrCreate?: ChallengeCompletionCreateOrConnectWithoutChallengeInput | ChallengeCompletionCreateOrConnectWithoutChallengeInput[]
    createMany?: ChallengeCompletionCreateManyChallengeInputEnvelope
    connect?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
  }

  export type ChallengeCompletionUncheckedCreateNestedManyWithoutChallengeInput = {
    create?: XOR<ChallengeCompletionCreateWithoutChallengeInput, ChallengeCompletionUncheckedCreateWithoutChallengeInput> | ChallengeCompletionCreateWithoutChallengeInput[] | ChallengeCompletionUncheckedCreateWithoutChallengeInput[]
    connectOrCreate?: ChallengeCompletionCreateOrConnectWithoutChallengeInput | ChallengeCompletionCreateOrConnectWithoutChallengeInput[]
    createMany?: ChallengeCompletionCreateManyChallengeInputEnvelope
    connect?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
  }

  export type EnumChallengeStatusFieldUpdateOperationsInput = {
    set?: $Enums.ChallengeStatus
  }

  export type HabitUpdateOneRequiredWithoutChallengesNestedInput = {
    create?: XOR<HabitCreateWithoutChallengesInput, HabitUncheckedCreateWithoutChallengesInput>
    connectOrCreate?: HabitCreateOrConnectWithoutChallengesInput
    upsert?: HabitUpsertWithoutChallengesInput
    connect?: HabitWhereUniqueInput
    update?: XOR<XOR<HabitUpdateToOneWithWhereWithoutChallengesInput, HabitUpdateWithoutChallengesInput>, HabitUncheckedUpdateWithoutChallengesInput>
  }

  export type UserUpdateOneRequiredWithoutChallengesCreatedNestedInput = {
    create?: XOR<UserCreateWithoutChallengesCreatedInput, UserUncheckedCreateWithoutChallengesCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutChallengesCreatedInput
    upsert?: UserUpsertWithoutChallengesCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChallengesCreatedInput, UserUpdateWithoutChallengesCreatedInput>, UserUncheckedUpdateWithoutChallengesCreatedInput>
  }

  export type ChallengeCompletionUpdateManyWithoutChallengeNestedInput = {
    create?: XOR<ChallengeCompletionCreateWithoutChallengeInput, ChallengeCompletionUncheckedCreateWithoutChallengeInput> | ChallengeCompletionCreateWithoutChallengeInput[] | ChallengeCompletionUncheckedCreateWithoutChallengeInput[]
    connectOrCreate?: ChallengeCompletionCreateOrConnectWithoutChallengeInput | ChallengeCompletionCreateOrConnectWithoutChallengeInput[]
    upsert?: ChallengeCompletionUpsertWithWhereUniqueWithoutChallengeInput | ChallengeCompletionUpsertWithWhereUniqueWithoutChallengeInput[]
    createMany?: ChallengeCompletionCreateManyChallengeInputEnvelope
    set?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    disconnect?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    delete?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    connect?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    update?: ChallengeCompletionUpdateWithWhereUniqueWithoutChallengeInput | ChallengeCompletionUpdateWithWhereUniqueWithoutChallengeInput[]
    updateMany?: ChallengeCompletionUpdateManyWithWhereWithoutChallengeInput | ChallengeCompletionUpdateManyWithWhereWithoutChallengeInput[]
    deleteMany?: ChallengeCompletionScalarWhereInput | ChallengeCompletionScalarWhereInput[]
  }

  export type ChallengeCompletionUncheckedUpdateManyWithoutChallengeNestedInput = {
    create?: XOR<ChallengeCompletionCreateWithoutChallengeInput, ChallengeCompletionUncheckedCreateWithoutChallengeInput> | ChallengeCompletionCreateWithoutChallengeInput[] | ChallengeCompletionUncheckedCreateWithoutChallengeInput[]
    connectOrCreate?: ChallengeCompletionCreateOrConnectWithoutChallengeInput | ChallengeCompletionCreateOrConnectWithoutChallengeInput[]
    upsert?: ChallengeCompletionUpsertWithWhereUniqueWithoutChallengeInput | ChallengeCompletionUpsertWithWhereUniqueWithoutChallengeInput[]
    createMany?: ChallengeCompletionCreateManyChallengeInputEnvelope
    set?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    disconnect?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    delete?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    connect?: ChallengeCompletionWhereUniqueInput | ChallengeCompletionWhereUniqueInput[]
    update?: ChallengeCompletionUpdateWithWhereUniqueWithoutChallengeInput | ChallengeCompletionUpdateWithWhereUniqueWithoutChallengeInput[]
    updateMany?: ChallengeCompletionUpdateManyWithWhereWithoutChallengeInput | ChallengeCompletionUpdateManyWithWhereWithoutChallengeInput[]
    deleteMany?: ChallengeCompletionScalarWhereInput | ChallengeCompletionScalarWhereInput[]
  }

  export type ChallengeCreateNestedOneWithoutCompletionsInput = {
    create?: XOR<ChallengeCreateWithoutCompletionsInput, ChallengeUncheckedCreateWithoutCompletionsInput>
    connectOrCreate?: ChallengeCreateOrConnectWithoutCompletionsInput
    connect?: ChallengeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChallengeCompletionsInput = {
    create?: XOR<UserCreateWithoutChallengeCompletionsInput, UserUncheckedCreateWithoutChallengeCompletionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChallengeCompletionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumCompletionStatusFieldUpdateOperationsInput = {
    set?: $Enums.CompletionStatus
  }

  export type ChallengeUpdateOneRequiredWithoutCompletionsNestedInput = {
    create?: XOR<ChallengeCreateWithoutCompletionsInput, ChallengeUncheckedCreateWithoutCompletionsInput>
    connectOrCreate?: ChallengeCreateOrConnectWithoutCompletionsInput
    upsert?: ChallengeUpsertWithoutCompletionsInput
    connect?: ChallengeWhereUniqueInput
    update?: XOR<XOR<ChallengeUpdateToOneWithWhereWithoutCompletionsInput, ChallengeUpdateWithoutCompletionsInput>, ChallengeUncheckedUpdateWithoutCompletionsInput>
  }

  export type UserUpdateOneRequiredWithoutChallengeCompletionsNestedInput = {
    create?: XOR<UserCreateWithoutChallengeCompletionsInput, UserUncheckedCreateWithoutChallengeCompletionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChallengeCompletionsInput
    upsert?: UserUpsertWithoutChallengeCompletionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChallengeCompletionsInput, UserUpdateWithoutChallengeCompletionsInput>, UserUncheckedUpdateWithoutChallengeCompletionsInput>
  }

  export type PartnershipCreateNestedOneWithoutMessagesInput = {
    create?: XOR<PartnershipCreateWithoutMessagesInput, PartnershipUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: PartnershipCreateOrConnectWithoutMessagesInput
    connect?: PartnershipWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumMessageTypeFieldUpdateOperationsInput = {
    set?: $Enums.MessageType
  }

  export type PartnershipUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<PartnershipCreateWithoutMessagesInput, PartnershipUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: PartnershipCreateOrConnectWithoutMessagesInput
    upsert?: PartnershipUpsertWithoutMessagesInput
    connect?: PartnershipWhereUniqueInput
    update?: XOR<XOR<PartnershipUpdateToOneWithWhereWithoutMessagesInput, PartnershipUpdateWithoutMessagesInput>, PartnershipUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutSentMessagesNestedInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    upsert?: UserUpsertWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentMessagesInput, UserUpdateWithoutSentMessagesInput>, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserCreateNestedOneWithoutSentNudgesInput = {
    create?: XOR<UserCreateWithoutSentNudgesInput, UserUncheckedCreateWithoutSentNudgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentNudgesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedNudgesInput = {
    create?: XOR<UserCreateWithoutReceivedNudgesInput, UserUncheckedCreateWithoutReceivedNudgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedNudgesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNudgeTypeFieldUpdateOperationsInput = {
    set?: $Enums.NudgeType
  }

  export type UserUpdateOneRequiredWithoutSentNudgesNestedInput = {
    create?: XOR<UserCreateWithoutSentNudgesInput, UserUncheckedCreateWithoutSentNudgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentNudgesInput
    upsert?: UserUpsertWithoutSentNudgesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentNudgesInput, UserUpdateWithoutSentNudgesInput>, UserUncheckedUpdateWithoutSentNudgesInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedNudgesNestedInput = {
    create?: XOR<UserCreateWithoutReceivedNudgesInput, UserUncheckedCreateWithoutReceivedNudgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedNudgesInput
    upsert?: UserUpsertWithoutReceivedNudgesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedNudgesInput, UserUpdateWithoutReceivedNudgesInput>, UserUncheckedUpdateWithoutReceivedNudgesInput>
  }

  export type UserCreateNestedOneWithoutInspirationPostsInput = {
    create?: XOR<UserCreateWithoutInspirationPostsInput, UserUncheckedCreateWithoutInspirationPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInspirationPostsInput
    connect?: UserWhereUniqueInput
  }

  export type InspirationReactionCreateNestedManyWithoutPostInput = {
    create?: XOR<InspirationReactionCreateWithoutPostInput, InspirationReactionUncheckedCreateWithoutPostInput> | InspirationReactionCreateWithoutPostInput[] | InspirationReactionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: InspirationReactionCreateOrConnectWithoutPostInput | InspirationReactionCreateOrConnectWithoutPostInput[]
    createMany?: InspirationReactionCreateManyPostInputEnvelope
    connect?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
  }

  export type InspirationReactionUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<InspirationReactionCreateWithoutPostInput, InspirationReactionUncheckedCreateWithoutPostInput> | InspirationReactionCreateWithoutPostInput[] | InspirationReactionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: InspirationReactionCreateOrConnectWithoutPostInput | InspirationReactionCreateOrConnectWithoutPostInput[]
    createMany?: InspirationReactionCreateManyPostInputEnvelope
    connect?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutInspirationPostsNestedInput = {
    create?: XOR<UserCreateWithoutInspirationPostsInput, UserUncheckedCreateWithoutInspirationPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInspirationPostsInput
    upsert?: UserUpsertWithoutInspirationPostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInspirationPostsInput, UserUpdateWithoutInspirationPostsInput>, UserUncheckedUpdateWithoutInspirationPostsInput>
  }

  export type InspirationReactionUpdateManyWithoutPostNestedInput = {
    create?: XOR<InspirationReactionCreateWithoutPostInput, InspirationReactionUncheckedCreateWithoutPostInput> | InspirationReactionCreateWithoutPostInput[] | InspirationReactionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: InspirationReactionCreateOrConnectWithoutPostInput | InspirationReactionCreateOrConnectWithoutPostInput[]
    upsert?: InspirationReactionUpsertWithWhereUniqueWithoutPostInput | InspirationReactionUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: InspirationReactionCreateManyPostInputEnvelope
    set?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    disconnect?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    delete?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    connect?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    update?: InspirationReactionUpdateWithWhereUniqueWithoutPostInput | InspirationReactionUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: InspirationReactionUpdateManyWithWhereWithoutPostInput | InspirationReactionUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: InspirationReactionScalarWhereInput | InspirationReactionScalarWhereInput[]
  }

  export type InspirationReactionUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<InspirationReactionCreateWithoutPostInput, InspirationReactionUncheckedCreateWithoutPostInput> | InspirationReactionCreateWithoutPostInput[] | InspirationReactionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: InspirationReactionCreateOrConnectWithoutPostInput | InspirationReactionCreateOrConnectWithoutPostInput[]
    upsert?: InspirationReactionUpsertWithWhereUniqueWithoutPostInput | InspirationReactionUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: InspirationReactionCreateManyPostInputEnvelope
    set?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    disconnect?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    delete?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    connect?: InspirationReactionWhereUniqueInput | InspirationReactionWhereUniqueInput[]
    update?: InspirationReactionUpdateWithWhereUniqueWithoutPostInput | InspirationReactionUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: InspirationReactionUpdateManyWithWhereWithoutPostInput | InspirationReactionUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: InspirationReactionScalarWhereInput | InspirationReactionScalarWhereInput[]
  }

  export type InspirationPostCreateNestedOneWithoutReactionsInput = {
    create?: XOR<InspirationPostCreateWithoutReactionsInput, InspirationPostUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: InspirationPostCreateOrConnectWithoutReactionsInput
    connect?: InspirationPostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInspirationReactionsInput = {
    create?: XOR<UserCreateWithoutInspirationReactionsInput, UserUncheckedCreateWithoutInspirationReactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInspirationReactionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumReactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.ReactionType
  }

  export type InspirationPostUpdateOneRequiredWithoutReactionsNestedInput = {
    create?: XOR<InspirationPostCreateWithoutReactionsInput, InspirationPostUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: InspirationPostCreateOrConnectWithoutReactionsInput
    upsert?: InspirationPostUpsertWithoutReactionsInput
    connect?: InspirationPostWhereUniqueInput
    update?: XOR<XOR<InspirationPostUpdateToOneWithWhereWithoutReactionsInput, InspirationPostUpdateWithoutReactionsInput>, InspirationPostUncheckedUpdateWithoutReactionsInput>
  }

  export type UserUpdateOneRequiredWithoutInspirationReactionsNestedInput = {
    create?: XOR<UserCreateWithoutInspirationReactionsInput, UserUncheckedCreateWithoutInspirationReactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInspirationReactionsInput
    upsert?: UserUpsertWithoutInspirationReactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInspirationReactionsInput, UserUpdateWithoutInspirationReactionsInput>, UserUncheckedUpdateWithoutInspirationReactionsInput>
  }

  export type EnumBadgeCategoryFieldUpdateOperationsInput = {
    set?: $Enums.BadgeCategory
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumPartnershipStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PartnershipStatus | EnumPartnershipStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PartnershipStatus[] | ListEnumPartnershipStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PartnershipStatus[] | ListEnumPartnershipStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPartnershipStatusFilter<$PrismaModel> | $Enums.PartnershipStatus
  }

  export type NestedEnumPartnershipStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PartnershipStatus | EnumPartnershipStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PartnershipStatus[] | ListEnumPartnershipStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PartnershipStatus[] | ListEnumPartnershipStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPartnershipStatusWithAggregatesFilter<$PrismaModel> | $Enums.PartnershipStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPartnershipStatusFilter<$PrismaModel>
    _max?: NestedEnumPartnershipStatusFilter<$PrismaModel>
  }

  export type NestedEnumHabitStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HabitStatus | EnumHabitStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HabitStatus[] | ListEnumHabitStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HabitStatus[] | ListEnumHabitStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHabitStatusFilter<$PrismaModel> | $Enums.HabitStatus
  }

  export type NestedEnumHabitStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HabitStatus | EnumHabitStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HabitStatus[] | ListEnumHabitStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HabitStatus[] | ListEnumHabitStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHabitStatusWithAggregatesFilter<$PrismaModel> | $Enums.HabitStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHabitStatusFilter<$PrismaModel>
    _max?: NestedEnumHabitStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumChallengeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ChallengeStatus | EnumChallengeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ChallengeStatus[] | ListEnumChallengeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChallengeStatus[] | ListEnumChallengeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumChallengeStatusFilter<$PrismaModel> | $Enums.ChallengeStatus
  }

  export type NestedEnumChallengeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChallengeStatus | EnumChallengeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ChallengeStatus[] | ListEnumChallengeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChallengeStatus[] | ListEnumChallengeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumChallengeStatusWithAggregatesFilter<$PrismaModel> | $Enums.ChallengeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChallengeStatusFilter<$PrismaModel>
    _max?: NestedEnumChallengeStatusFilter<$PrismaModel>
  }

  export type NestedEnumCompletionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CompletionStatus | EnumCompletionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompletionStatus[] | ListEnumCompletionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompletionStatus[] | ListEnumCompletionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompletionStatusFilter<$PrismaModel> | $Enums.CompletionStatus
  }

  export type NestedEnumCompletionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompletionStatus | EnumCompletionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompletionStatus[] | ListEnumCompletionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompletionStatus[] | ListEnumCompletionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompletionStatusWithAggregatesFilter<$PrismaModel> | $Enums.CompletionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompletionStatusFilter<$PrismaModel>
    _max?: NestedEnumCompletionStatusFilter<$PrismaModel>
  }

  export type NestedEnumMessageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageType | EnumMessageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MessageType[] | ListEnumMessageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageType[] | ListEnumMessageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageTypeFilter<$PrismaModel> | $Enums.MessageType
  }

  export type NestedEnumMessageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageType | EnumMessageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MessageType[] | ListEnumMessageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageType[] | ListEnumMessageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageTypeWithAggregatesFilter<$PrismaModel> | $Enums.MessageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMessageTypeFilter<$PrismaModel>
    _max?: NestedEnumMessageTypeFilter<$PrismaModel>
  }

  export type NestedEnumNudgeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NudgeType | EnumNudgeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NudgeType[] | ListEnumNudgeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NudgeType[] | ListEnumNudgeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNudgeTypeFilter<$PrismaModel> | $Enums.NudgeType
  }

  export type NestedEnumNudgeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NudgeType | EnumNudgeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NudgeType[] | ListEnumNudgeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NudgeType[] | ListEnumNudgeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNudgeTypeWithAggregatesFilter<$PrismaModel> | $Enums.NudgeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNudgeTypeFilter<$PrismaModel>
    _max?: NestedEnumNudgeTypeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumReactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ReactionType | EnumReactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReactionType[] | ListEnumReactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReactionType[] | ListEnumReactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReactionTypeFilter<$PrismaModel> | $Enums.ReactionType
  }

  export type NestedEnumReactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReactionType | EnumReactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReactionType[] | ListEnumReactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReactionType[] | ListEnumReactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.ReactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReactionTypeFilter<$PrismaModel>
    _max?: NestedEnumReactionTypeFilter<$PrismaModel>
  }

  export type NestedEnumBadgeCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeCategory | EnumBadgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeCategoryFilter<$PrismaModel> | $Enums.BadgeCategory
  }

  export type NestedEnumBadgeCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeCategory | EnumBadgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeCategoryWithAggregatesFilter<$PrismaModel> | $Enums.BadgeCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBadgeCategoryFilter<$PrismaModel>
    _max?: NestedEnumBadgeCategoryFilter<$PrismaModel>
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionCreateNestedManyWithoutUserInput
    sentNudges?: NudgeCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeUncheckedCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostUncheckedCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionUncheckedCreateNestedManyWithoutUserInput
    sentNudges?: NudgeUncheckedCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUncheckedUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUncheckedUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUncheckedUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUncheckedUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUncheckedUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUncheckedUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionCreateNestedManyWithoutUserInput
    sentNudges?: NudgeCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeUncheckedCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostUncheckedCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionUncheckedCreateNestedManyWithoutUserInput
    sentNudges?: NudgeUncheckedCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUncheckedUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUncheckedUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUncheckedUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUncheckedUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUncheckedUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUncheckedUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PartnershipCreateWithoutInitiatorInput = {
    id?: string
    status?: $Enums.PartnershipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    receiver: UserCreateNestedOneWithoutReceivedPartnershipsInput
    habits?: HabitCreateNestedManyWithoutPartnershipInput
    messages?: MessageCreateNestedManyWithoutPartnershipInput
  }

  export type PartnershipUncheckedCreateWithoutInitiatorInput = {
    id?: string
    receiverId: string
    status?: $Enums.PartnershipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitUncheckedCreateNestedManyWithoutPartnershipInput
    messages?: MessageUncheckedCreateNestedManyWithoutPartnershipInput
  }

  export type PartnershipCreateOrConnectWithoutInitiatorInput = {
    where: PartnershipWhereUniqueInput
    create: XOR<PartnershipCreateWithoutInitiatorInput, PartnershipUncheckedCreateWithoutInitiatorInput>
  }

  export type PartnershipCreateManyInitiatorInputEnvelope = {
    data: PartnershipCreateManyInitiatorInput | PartnershipCreateManyInitiatorInput[]
    skipDuplicates?: boolean
  }

  export type PartnershipCreateWithoutReceiverInput = {
    id?: string
    status?: $Enums.PartnershipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    initiator: UserCreateNestedOneWithoutInitiatedPartnershipsInput
    habits?: HabitCreateNestedManyWithoutPartnershipInput
    messages?: MessageCreateNestedManyWithoutPartnershipInput
  }

  export type PartnershipUncheckedCreateWithoutReceiverInput = {
    id?: string
    initiatorId: string
    status?: $Enums.PartnershipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitUncheckedCreateNestedManyWithoutPartnershipInput
    messages?: MessageUncheckedCreateNestedManyWithoutPartnershipInput
  }

  export type PartnershipCreateOrConnectWithoutReceiverInput = {
    where: PartnershipWhereUniqueInput
    create: XOR<PartnershipCreateWithoutReceiverInput, PartnershipUncheckedCreateWithoutReceiverInput>
  }

  export type PartnershipCreateManyReceiverInputEnvelope = {
    data: PartnershipCreateManyReceiverInput | PartnershipCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type ChallengeCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    dueDate: Date | string
    status?: $Enums.ChallengeStatus
    createdAt?: Date | string
    habit: HabitCreateNestedOneWithoutChallengesInput
    completions?: ChallengeCompletionCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeUncheckedCreateWithoutCreatorInput = {
    id?: string
    habitId: string
    title: string
    description?: string | null
    dueDate: Date | string
    status?: $Enums.ChallengeStatus
    createdAt?: Date | string
    completions?: ChallengeCompletionUncheckedCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeCreateOrConnectWithoutCreatorInput = {
    where: ChallengeWhereUniqueInput
    create: XOR<ChallengeCreateWithoutCreatorInput, ChallengeUncheckedCreateWithoutCreatorInput>
  }

  export type ChallengeCreateManyCreatorInputEnvelope = {
    data: ChallengeCreateManyCreatorInput | ChallengeCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type ChallengeCompletionCreateWithoutUserInput = {
    id?: string
    status?: $Enums.CompletionStatus
    completedAt?: Date | string
    feelingTags?: string | null
    reflectionNote?: string | null
    reflectionPrompt?: string | null
    challenge: ChallengeCreateNestedOneWithoutCompletionsInput
  }

  export type ChallengeCompletionUncheckedCreateWithoutUserInput = {
    id?: string
    challengeId: string
    status?: $Enums.CompletionStatus
    completedAt?: Date | string
    feelingTags?: string | null
    reflectionNote?: string | null
    reflectionPrompt?: string | null
  }

  export type ChallengeCompletionCreateOrConnectWithoutUserInput = {
    where: ChallengeCompletionWhereUniqueInput
    create: XOR<ChallengeCompletionCreateWithoutUserInput, ChallengeCompletionUncheckedCreateWithoutUserInput>
  }

  export type ChallengeCompletionCreateManyUserInputEnvelope = {
    data: ChallengeCompletionCreateManyUserInput | ChallengeCompletionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderInput = {
    id?: string
    content: string
    messageType?: $Enums.MessageType
    createdAt?: Date | string
    partnership: PartnershipCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: string
    partnershipId: string
    content: string
    messageType?: $Enums.MessageType
    createdAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type InspirationPostCreateWithoutAuthorInput = {
    id?: string
    content: string
    category?: string | null
    isAnonymous?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    reactions?: InspirationReactionCreateNestedManyWithoutPostInput
  }

  export type InspirationPostUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    category?: string | null
    isAnonymous?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    reactions?: InspirationReactionUncheckedCreateNestedManyWithoutPostInput
  }

  export type InspirationPostCreateOrConnectWithoutAuthorInput = {
    where: InspirationPostWhereUniqueInput
    create: XOR<InspirationPostCreateWithoutAuthorInput, InspirationPostUncheckedCreateWithoutAuthorInput>
  }

  export type InspirationPostCreateManyAuthorInputEnvelope = {
    data: InspirationPostCreateManyAuthorInput | InspirationPostCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type InspirationReactionCreateWithoutUserInput = {
    id?: string
    reaction: $Enums.ReactionType
    createdAt?: Date | string
    post: InspirationPostCreateNestedOneWithoutReactionsInput
  }

  export type InspirationReactionUncheckedCreateWithoutUserInput = {
    id?: string
    postId: string
    reaction: $Enums.ReactionType
    createdAt?: Date | string
  }

  export type InspirationReactionCreateOrConnectWithoutUserInput = {
    where: InspirationReactionWhereUniqueInput
    create: XOR<InspirationReactionCreateWithoutUserInput, InspirationReactionUncheckedCreateWithoutUserInput>
  }

  export type InspirationReactionCreateManyUserInputEnvelope = {
    data: InspirationReactionCreateManyUserInput | InspirationReactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NudgeCreateWithoutSenderInput = {
    id?: string
    nudgeType: $Enums.NudgeType
    message?: string | null
    createdAt?: Date | string
    receiver: UserCreateNestedOneWithoutReceivedNudgesInput
  }

  export type NudgeUncheckedCreateWithoutSenderInput = {
    id?: string
    receiverId: string
    nudgeType: $Enums.NudgeType
    message?: string | null
    createdAt?: Date | string
  }

  export type NudgeCreateOrConnectWithoutSenderInput = {
    where: NudgeWhereUniqueInput
    create: XOR<NudgeCreateWithoutSenderInput, NudgeUncheckedCreateWithoutSenderInput>
  }

  export type NudgeCreateManySenderInputEnvelope = {
    data: NudgeCreateManySenderInput | NudgeCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type NudgeCreateWithoutReceiverInput = {
    id?: string
    nudgeType: $Enums.NudgeType
    message?: string | null
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutSentNudgesInput
  }

  export type NudgeUncheckedCreateWithoutReceiverInput = {
    id?: string
    senderId: string
    nudgeType: $Enums.NudgeType
    message?: string | null
    createdAt?: Date | string
  }

  export type NudgeCreateOrConnectWithoutReceiverInput = {
    where: NudgeWhereUniqueInput
    create: XOR<NudgeCreateWithoutReceiverInput, NudgeUncheckedCreateWithoutReceiverInput>
  }

  export type NudgeCreateManyReceiverInputEnvelope = {
    data: NudgeCreateManyReceiverInput | NudgeCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type PartnershipUpsertWithWhereUniqueWithoutInitiatorInput = {
    where: PartnershipWhereUniqueInput
    update: XOR<PartnershipUpdateWithoutInitiatorInput, PartnershipUncheckedUpdateWithoutInitiatorInput>
    create: XOR<PartnershipCreateWithoutInitiatorInput, PartnershipUncheckedCreateWithoutInitiatorInput>
  }

  export type PartnershipUpdateWithWhereUniqueWithoutInitiatorInput = {
    where: PartnershipWhereUniqueInput
    data: XOR<PartnershipUpdateWithoutInitiatorInput, PartnershipUncheckedUpdateWithoutInitiatorInput>
  }

  export type PartnershipUpdateManyWithWhereWithoutInitiatorInput = {
    where: PartnershipScalarWhereInput
    data: XOR<PartnershipUpdateManyMutationInput, PartnershipUncheckedUpdateManyWithoutInitiatorInput>
  }

  export type PartnershipScalarWhereInput = {
    AND?: PartnershipScalarWhereInput | PartnershipScalarWhereInput[]
    OR?: PartnershipScalarWhereInput[]
    NOT?: PartnershipScalarWhereInput | PartnershipScalarWhereInput[]
    id?: StringFilter<"Partnership"> | string
    initiatorId?: StringFilter<"Partnership"> | string
    receiverId?: StringFilter<"Partnership"> | string
    status?: EnumPartnershipStatusFilter<"Partnership"> | $Enums.PartnershipStatus
    createdAt?: DateTimeFilter<"Partnership"> | Date | string
    updatedAt?: DateTimeFilter<"Partnership"> | Date | string
  }

  export type PartnershipUpsertWithWhereUniqueWithoutReceiverInput = {
    where: PartnershipWhereUniqueInput
    update: XOR<PartnershipUpdateWithoutReceiverInput, PartnershipUncheckedUpdateWithoutReceiverInput>
    create: XOR<PartnershipCreateWithoutReceiverInput, PartnershipUncheckedCreateWithoutReceiverInput>
  }

  export type PartnershipUpdateWithWhereUniqueWithoutReceiverInput = {
    where: PartnershipWhereUniqueInput
    data: XOR<PartnershipUpdateWithoutReceiverInput, PartnershipUncheckedUpdateWithoutReceiverInput>
  }

  export type PartnershipUpdateManyWithWhereWithoutReceiverInput = {
    where: PartnershipScalarWhereInput
    data: XOR<PartnershipUpdateManyMutationInput, PartnershipUncheckedUpdateManyWithoutReceiverInput>
  }

  export type ChallengeUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ChallengeWhereUniqueInput
    update: XOR<ChallengeUpdateWithoutCreatorInput, ChallengeUncheckedUpdateWithoutCreatorInput>
    create: XOR<ChallengeCreateWithoutCreatorInput, ChallengeUncheckedCreateWithoutCreatorInput>
  }

  export type ChallengeUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ChallengeWhereUniqueInput
    data: XOR<ChallengeUpdateWithoutCreatorInput, ChallengeUncheckedUpdateWithoutCreatorInput>
  }

  export type ChallengeUpdateManyWithWhereWithoutCreatorInput = {
    where: ChallengeScalarWhereInput
    data: XOR<ChallengeUpdateManyMutationInput, ChallengeUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ChallengeScalarWhereInput = {
    AND?: ChallengeScalarWhereInput | ChallengeScalarWhereInput[]
    OR?: ChallengeScalarWhereInput[]
    NOT?: ChallengeScalarWhereInput | ChallengeScalarWhereInput[]
    id?: StringFilter<"Challenge"> | string
    habitId?: StringFilter<"Challenge"> | string
    creatorId?: StringFilter<"Challenge"> | string
    title?: StringFilter<"Challenge"> | string
    description?: StringNullableFilter<"Challenge"> | string | null
    dueDate?: DateTimeFilter<"Challenge"> | Date | string
    status?: EnumChallengeStatusFilter<"Challenge"> | $Enums.ChallengeStatus
    createdAt?: DateTimeFilter<"Challenge"> | Date | string
  }

  export type ChallengeCompletionUpsertWithWhereUniqueWithoutUserInput = {
    where: ChallengeCompletionWhereUniqueInput
    update: XOR<ChallengeCompletionUpdateWithoutUserInput, ChallengeCompletionUncheckedUpdateWithoutUserInput>
    create: XOR<ChallengeCompletionCreateWithoutUserInput, ChallengeCompletionUncheckedCreateWithoutUserInput>
  }

  export type ChallengeCompletionUpdateWithWhereUniqueWithoutUserInput = {
    where: ChallengeCompletionWhereUniqueInput
    data: XOR<ChallengeCompletionUpdateWithoutUserInput, ChallengeCompletionUncheckedUpdateWithoutUserInput>
  }

  export type ChallengeCompletionUpdateManyWithWhereWithoutUserInput = {
    where: ChallengeCompletionScalarWhereInput
    data: XOR<ChallengeCompletionUpdateManyMutationInput, ChallengeCompletionUncheckedUpdateManyWithoutUserInput>
  }

  export type ChallengeCompletionScalarWhereInput = {
    AND?: ChallengeCompletionScalarWhereInput | ChallengeCompletionScalarWhereInput[]
    OR?: ChallengeCompletionScalarWhereInput[]
    NOT?: ChallengeCompletionScalarWhereInput | ChallengeCompletionScalarWhereInput[]
    id?: StringFilter<"ChallengeCompletion"> | string
    challengeId?: StringFilter<"ChallengeCompletion"> | string
    userId?: StringFilter<"ChallengeCompletion"> | string
    status?: EnumCompletionStatusFilter<"ChallengeCompletion"> | $Enums.CompletionStatus
    completedAt?: DateTimeFilter<"ChallengeCompletion"> | Date | string
    feelingTags?: StringNullableFilter<"ChallengeCompletion"> | string | null
    reflectionNote?: StringNullableFilter<"ChallengeCompletion"> | string | null
    reflectionPrompt?: StringNullableFilter<"ChallengeCompletion"> | string | null
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    partnershipId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    messageType?: EnumMessageTypeFilter<"Message"> | $Enums.MessageType
    createdAt?: DateTimeFilter<"Message"> | Date | string
  }

  export type InspirationPostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: InspirationPostWhereUniqueInput
    update: XOR<InspirationPostUpdateWithoutAuthorInput, InspirationPostUncheckedUpdateWithoutAuthorInput>
    create: XOR<InspirationPostCreateWithoutAuthorInput, InspirationPostUncheckedCreateWithoutAuthorInput>
  }

  export type InspirationPostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: InspirationPostWhereUniqueInput
    data: XOR<InspirationPostUpdateWithoutAuthorInput, InspirationPostUncheckedUpdateWithoutAuthorInput>
  }

  export type InspirationPostUpdateManyWithWhereWithoutAuthorInput = {
    where: InspirationPostScalarWhereInput
    data: XOR<InspirationPostUpdateManyMutationInput, InspirationPostUncheckedUpdateManyWithoutAuthorInput>
  }

  export type InspirationPostScalarWhereInput = {
    AND?: InspirationPostScalarWhereInput | InspirationPostScalarWhereInput[]
    OR?: InspirationPostScalarWhereInput[]
    NOT?: InspirationPostScalarWhereInput | InspirationPostScalarWhereInput[]
    id?: StringFilter<"InspirationPost"> | string
    authorId?: StringFilter<"InspirationPost"> | string
    content?: StringFilter<"InspirationPost"> | string
    category?: StringNullableFilter<"InspirationPost"> | string | null
    isAnonymous?: BoolFilter<"InspirationPost"> | boolean
    expiresAt?: DateTimeFilter<"InspirationPost"> | Date | string
    createdAt?: DateTimeFilter<"InspirationPost"> | Date | string
  }

  export type InspirationReactionUpsertWithWhereUniqueWithoutUserInput = {
    where: InspirationReactionWhereUniqueInput
    update: XOR<InspirationReactionUpdateWithoutUserInput, InspirationReactionUncheckedUpdateWithoutUserInput>
    create: XOR<InspirationReactionCreateWithoutUserInput, InspirationReactionUncheckedCreateWithoutUserInput>
  }

  export type InspirationReactionUpdateWithWhereUniqueWithoutUserInput = {
    where: InspirationReactionWhereUniqueInput
    data: XOR<InspirationReactionUpdateWithoutUserInput, InspirationReactionUncheckedUpdateWithoutUserInput>
  }

  export type InspirationReactionUpdateManyWithWhereWithoutUserInput = {
    where: InspirationReactionScalarWhereInput
    data: XOR<InspirationReactionUpdateManyMutationInput, InspirationReactionUncheckedUpdateManyWithoutUserInput>
  }

  export type InspirationReactionScalarWhereInput = {
    AND?: InspirationReactionScalarWhereInput | InspirationReactionScalarWhereInput[]
    OR?: InspirationReactionScalarWhereInput[]
    NOT?: InspirationReactionScalarWhereInput | InspirationReactionScalarWhereInput[]
    id?: StringFilter<"InspirationReaction"> | string
    postId?: StringFilter<"InspirationReaction"> | string
    userId?: StringFilter<"InspirationReaction"> | string
    reaction?: EnumReactionTypeFilter<"InspirationReaction"> | $Enums.ReactionType
    createdAt?: DateTimeFilter<"InspirationReaction"> | Date | string
  }

  export type NudgeUpsertWithWhereUniqueWithoutSenderInput = {
    where: NudgeWhereUniqueInput
    update: XOR<NudgeUpdateWithoutSenderInput, NudgeUncheckedUpdateWithoutSenderInput>
    create: XOR<NudgeCreateWithoutSenderInput, NudgeUncheckedCreateWithoutSenderInput>
  }

  export type NudgeUpdateWithWhereUniqueWithoutSenderInput = {
    where: NudgeWhereUniqueInput
    data: XOR<NudgeUpdateWithoutSenderInput, NudgeUncheckedUpdateWithoutSenderInput>
  }

  export type NudgeUpdateManyWithWhereWithoutSenderInput = {
    where: NudgeScalarWhereInput
    data: XOR<NudgeUpdateManyMutationInput, NudgeUncheckedUpdateManyWithoutSenderInput>
  }

  export type NudgeScalarWhereInput = {
    AND?: NudgeScalarWhereInput | NudgeScalarWhereInput[]
    OR?: NudgeScalarWhereInput[]
    NOT?: NudgeScalarWhereInput | NudgeScalarWhereInput[]
    id?: StringFilter<"Nudge"> | string
    senderId?: StringFilter<"Nudge"> | string
    receiverId?: StringFilter<"Nudge"> | string
    nudgeType?: EnumNudgeTypeFilter<"Nudge"> | $Enums.NudgeType
    message?: StringNullableFilter<"Nudge"> | string | null
    createdAt?: DateTimeFilter<"Nudge"> | Date | string
  }

  export type NudgeUpsertWithWhereUniqueWithoutReceiverInput = {
    where: NudgeWhereUniqueInput
    update: XOR<NudgeUpdateWithoutReceiverInput, NudgeUncheckedUpdateWithoutReceiverInput>
    create: XOR<NudgeCreateWithoutReceiverInput, NudgeUncheckedCreateWithoutReceiverInput>
  }

  export type NudgeUpdateWithWhereUniqueWithoutReceiverInput = {
    where: NudgeWhereUniqueInput
    data: XOR<NudgeUpdateWithoutReceiverInput, NudgeUncheckedUpdateWithoutReceiverInput>
  }

  export type NudgeUpdateManyWithWhereWithoutReceiverInput = {
    where: NudgeScalarWhereInput
    data: XOR<NudgeUpdateManyMutationInput, NudgeUncheckedUpdateManyWithoutReceiverInput>
  }

  export type UserCreateWithoutInitiatedPartnershipsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    receivedPartnerships?: PartnershipCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionCreateNestedManyWithoutUserInput
    sentNudges?: NudgeCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutInitiatedPartnershipsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    receivedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeUncheckedCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostUncheckedCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionUncheckedCreateNestedManyWithoutUserInput
    sentNudges?: NudgeUncheckedCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutInitiatedPartnershipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInitiatedPartnershipsInput, UserUncheckedCreateWithoutInitiatedPartnershipsInput>
  }

  export type UserCreateWithoutReceivedPartnershipsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipCreateNestedManyWithoutInitiatorInput
    challengesCreated?: ChallengeCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionCreateNestedManyWithoutUserInput
    sentNudges?: NudgeCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutReceivedPartnershipsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutInitiatorInput
    challengesCreated?: ChallengeUncheckedCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostUncheckedCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionUncheckedCreateNestedManyWithoutUserInput
    sentNudges?: NudgeUncheckedCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutReceivedPartnershipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedPartnershipsInput, UserUncheckedCreateWithoutReceivedPartnershipsInput>
  }

  export type HabitCreateWithoutPartnershipInput = {
    id?: string
    name: string
    category?: string | null
    frequency?: string
    customDays?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.HabitStatus
    currentTurn?: string | null
    streakCount?: number
    totalDays?: number
    mulligansUsed?: number
    maxMulligans?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    challenges?: ChallengeCreateNestedManyWithoutHabitInput
  }

  export type HabitUncheckedCreateWithoutPartnershipInput = {
    id?: string
    name: string
    category?: string | null
    frequency?: string
    customDays?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.HabitStatus
    currentTurn?: string | null
    streakCount?: number
    totalDays?: number
    mulligansUsed?: number
    maxMulligans?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    challenges?: ChallengeUncheckedCreateNestedManyWithoutHabitInput
  }

  export type HabitCreateOrConnectWithoutPartnershipInput = {
    where: HabitWhereUniqueInput
    create: XOR<HabitCreateWithoutPartnershipInput, HabitUncheckedCreateWithoutPartnershipInput>
  }

  export type HabitCreateManyPartnershipInputEnvelope = {
    data: HabitCreateManyPartnershipInput | HabitCreateManyPartnershipInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutPartnershipInput = {
    id?: string
    content: string
    messageType?: $Enums.MessageType
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutSentMessagesInput
  }

  export type MessageUncheckedCreateWithoutPartnershipInput = {
    id?: string
    senderId: string
    content: string
    messageType?: $Enums.MessageType
    createdAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutPartnershipInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutPartnershipInput, MessageUncheckedCreateWithoutPartnershipInput>
  }

  export type MessageCreateManyPartnershipInputEnvelope = {
    data: MessageCreateManyPartnershipInput | MessageCreateManyPartnershipInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutInitiatedPartnershipsInput = {
    update: XOR<UserUpdateWithoutInitiatedPartnershipsInput, UserUncheckedUpdateWithoutInitiatedPartnershipsInput>
    create: XOR<UserCreateWithoutInitiatedPartnershipsInput, UserUncheckedCreateWithoutInitiatedPartnershipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInitiatedPartnershipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInitiatedPartnershipsInput, UserUncheckedUpdateWithoutInitiatedPartnershipsInput>
  }

  export type UserUpdateWithoutInitiatedPartnershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    receivedPartnerships?: PartnershipUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutInitiatedPartnershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    receivedPartnerships?: PartnershipUncheckedUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUncheckedUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUncheckedUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUncheckedUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUncheckedUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserUpsertWithoutReceivedPartnershipsInput = {
    update: XOR<UserUpdateWithoutReceivedPartnershipsInput, UserUncheckedUpdateWithoutReceivedPartnershipsInput>
    create: XOR<UserCreateWithoutReceivedPartnershipsInput, UserUncheckedCreateWithoutReceivedPartnershipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedPartnershipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedPartnershipsInput, UserUncheckedUpdateWithoutReceivedPartnershipsInput>
  }

  export type UserUpdateWithoutReceivedPartnershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUpdateManyWithoutInitiatorNestedInput
    challengesCreated?: ChallengeUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedPartnershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUncheckedUpdateManyWithoutInitiatorNestedInput
    challengesCreated?: ChallengeUncheckedUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUncheckedUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUncheckedUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUncheckedUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type HabitUpsertWithWhereUniqueWithoutPartnershipInput = {
    where: HabitWhereUniqueInput
    update: XOR<HabitUpdateWithoutPartnershipInput, HabitUncheckedUpdateWithoutPartnershipInput>
    create: XOR<HabitCreateWithoutPartnershipInput, HabitUncheckedCreateWithoutPartnershipInput>
  }

  export type HabitUpdateWithWhereUniqueWithoutPartnershipInput = {
    where: HabitWhereUniqueInput
    data: XOR<HabitUpdateWithoutPartnershipInput, HabitUncheckedUpdateWithoutPartnershipInput>
  }

  export type HabitUpdateManyWithWhereWithoutPartnershipInput = {
    where: HabitScalarWhereInput
    data: XOR<HabitUpdateManyMutationInput, HabitUncheckedUpdateManyWithoutPartnershipInput>
  }

  export type HabitScalarWhereInput = {
    AND?: HabitScalarWhereInput | HabitScalarWhereInput[]
    OR?: HabitScalarWhereInput[]
    NOT?: HabitScalarWhereInput | HabitScalarWhereInput[]
    id?: StringFilter<"Habit"> | string
    partnershipId?: StringFilter<"Habit"> | string
    name?: StringFilter<"Habit"> | string
    category?: StringNullableFilter<"Habit"> | string | null
    frequency?: StringFilter<"Habit"> | string
    customDays?: StringNullableFilter<"Habit"> | string | null
    duration?: IntNullableFilter<"Habit"> | number | null
    startDate?: DateTimeNullableFilter<"Habit"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Habit"> | Date | string | null
    status?: EnumHabitStatusFilter<"Habit"> | $Enums.HabitStatus
    currentTurn?: StringNullableFilter<"Habit"> | string | null
    streakCount?: IntFilter<"Habit"> | number
    totalDays?: IntFilter<"Habit"> | number
    mulligansUsed?: IntFilter<"Habit"> | number
    maxMulligans?: IntFilter<"Habit"> | number
    createdAt?: DateTimeFilter<"Habit"> | Date | string
    updatedAt?: DateTimeFilter<"Habit"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutPartnershipInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutPartnershipInput, MessageUncheckedUpdateWithoutPartnershipInput>
    create: XOR<MessageCreateWithoutPartnershipInput, MessageUncheckedCreateWithoutPartnershipInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutPartnershipInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutPartnershipInput, MessageUncheckedUpdateWithoutPartnershipInput>
  }

  export type MessageUpdateManyWithWhereWithoutPartnershipInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutPartnershipInput>
  }

  export type PartnershipCreateWithoutHabitsInput = {
    id?: string
    status?: $Enums.PartnershipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    initiator: UserCreateNestedOneWithoutInitiatedPartnershipsInput
    receiver: UserCreateNestedOneWithoutReceivedPartnershipsInput
    messages?: MessageCreateNestedManyWithoutPartnershipInput
  }

  export type PartnershipUncheckedCreateWithoutHabitsInput = {
    id?: string
    initiatorId: string
    receiverId: string
    status?: $Enums.PartnershipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutPartnershipInput
  }

  export type PartnershipCreateOrConnectWithoutHabitsInput = {
    where: PartnershipWhereUniqueInput
    create: XOR<PartnershipCreateWithoutHabitsInput, PartnershipUncheckedCreateWithoutHabitsInput>
  }

  export type ChallengeCreateWithoutHabitInput = {
    id?: string
    title: string
    description?: string | null
    dueDate: Date | string
    status?: $Enums.ChallengeStatus
    createdAt?: Date | string
    creator: UserCreateNestedOneWithoutChallengesCreatedInput
    completions?: ChallengeCompletionCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeUncheckedCreateWithoutHabitInput = {
    id?: string
    creatorId: string
    title: string
    description?: string | null
    dueDate: Date | string
    status?: $Enums.ChallengeStatus
    createdAt?: Date | string
    completions?: ChallengeCompletionUncheckedCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeCreateOrConnectWithoutHabitInput = {
    where: ChallengeWhereUniqueInput
    create: XOR<ChallengeCreateWithoutHabitInput, ChallengeUncheckedCreateWithoutHabitInput>
  }

  export type ChallengeCreateManyHabitInputEnvelope = {
    data: ChallengeCreateManyHabitInput | ChallengeCreateManyHabitInput[]
    skipDuplicates?: boolean
  }

  export type PartnershipUpsertWithoutHabitsInput = {
    update: XOR<PartnershipUpdateWithoutHabitsInput, PartnershipUncheckedUpdateWithoutHabitsInput>
    create: XOR<PartnershipCreateWithoutHabitsInput, PartnershipUncheckedCreateWithoutHabitsInput>
    where?: PartnershipWhereInput
  }

  export type PartnershipUpdateToOneWithWhereWithoutHabitsInput = {
    where?: PartnershipWhereInput
    data: XOR<PartnershipUpdateWithoutHabitsInput, PartnershipUncheckedUpdateWithoutHabitsInput>
  }

  export type PartnershipUpdateWithoutHabitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumPartnershipStatusFieldUpdateOperationsInput | $Enums.PartnershipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiator?: UserUpdateOneRequiredWithoutInitiatedPartnershipsNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedPartnershipsNestedInput
    messages?: MessageUpdateManyWithoutPartnershipNestedInput
  }

  export type PartnershipUncheckedUpdateWithoutHabitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: EnumPartnershipStatusFieldUpdateOperationsInput | $Enums.PartnershipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutPartnershipNestedInput
  }

  export type ChallengeUpsertWithWhereUniqueWithoutHabitInput = {
    where: ChallengeWhereUniqueInput
    update: XOR<ChallengeUpdateWithoutHabitInput, ChallengeUncheckedUpdateWithoutHabitInput>
    create: XOR<ChallengeCreateWithoutHabitInput, ChallengeUncheckedCreateWithoutHabitInput>
  }

  export type ChallengeUpdateWithWhereUniqueWithoutHabitInput = {
    where: ChallengeWhereUniqueInput
    data: XOR<ChallengeUpdateWithoutHabitInput, ChallengeUncheckedUpdateWithoutHabitInput>
  }

  export type ChallengeUpdateManyWithWhereWithoutHabitInput = {
    where: ChallengeScalarWhereInput
    data: XOR<ChallengeUpdateManyMutationInput, ChallengeUncheckedUpdateManyWithoutHabitInput>
  }

  export type HabitCreateWithoutChallengesInput = {
    id?: string
    name: string
    category?: string | null
    frequency?: string
    customDays?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.HabitStatus
    currentTurn?: string | null
    streakCount?: number
    totalDays?: number
    mulligansUsed?: number
    maxMulligans?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    partnership: PartnershipCreateNestedOneWithoutHabitsInput
  }

  export type HabitUncheckedCreateWithoutChallengesInput = {
    id?: string
    partnershipId: string
    name: string
    category?: string | null
    frequency?: string
    customDays?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.HabitStatus
    currentTurn?: string | null
    streakCount?: number
    totalDays?: number
    mulligansUsed?: number
    maxMulligans?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HabitCreateOrConnectWithoutChallengesInput = {
    where: HabitWhereUniqueInput
    create: XOR<HabitCreateWithoutChallengesInput, HabitUncheckedCreateWithoutChallengesInput>
  }

  export type UserCreateWithoutChallengesCreatedInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipCreateNestedManyWithoutReceiverInput
    challengeCompletions?: ChallengeCompletionCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionCreateNestedManyWithoutUserInput
    sentNudges?: NudgeCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutChallengesCreatedInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutReceiverInput
    challengeCompletions?: ChallengeCompletionUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostUncheckedCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionUncheckedCreateNestedManyWithoutUserInput
    sentNudges?: NudgeUncheckedCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutChallengesCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChallengesCreatedInput, UserUncheckedCreateWithoutChallengesCreatedInput>
  }

  export type ChallengeCompletionCreateWithoutChallengeInput = {
    id?: string
    status?: $Enums.CompletionStatus
    completedAt?: Date | string
    feelingTags?: string | null
    reflectionNote?: string | null
    reflectionPrompt?: string | null
    user: UserCreateNestedOneWithoutChallengeCompletionsInput
  }

  export type ChallengeCompletionUncheckedCreateWithoutChallengeInput = {
    id?: string
    userId: string
    status?: $Enums.CompletionStatus
    completedAt?: Date | string
    feelingTags?: string | null
    reflectionNote?: string | null
    reflectionPrompt?: string | null
  }

  export type ChallengeCompletionCreateOrConnectWithoutChallengeInput = {
    where: ChallengeCompletionWhereUniqueInput
    create: XOR<ChallengeCompletionCreateWithoutChallengeInput, ChallengeCompletionUncheckedCreateWithoutChallengeInput>
  }

  export type ChallengeCompletionCreateManyChallengeInputEnvelope = {
    data: ChallengeCompletionCreateManyChallengeInput | ChallengeCompletionCreateManyChallengeInput[]
    skipDuplicates?: boolean
  }

  export type HabitUpsertWithoutChallengesInput = {
    update: XOR<HabitUpdateWithoutChallengesInput, HabitUncheckedUpdateWithoutChallengesInput>
    create: XOR<HabitCreateWithoutChallengesInput, HabitUncheckedCreateWithoutChallengesInput>
    where?: HabitWhereInput
  }

  export type HabitUpdateToOneWithWhereWithoutChallengesInput = {
    where?: HabitWhereInput
    data: XOR<HabitUpdateWithoutChallengesInput, HabitUncheckedUpdateWithoutChallengesInput>
  }

  export type HabitUpdateWithoutChallengesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    customDays?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHabitStatusFieldUpdateOperationsInput | $Enums.HabitStatus
    currentTurn?: NullableStringFieldUpdateOperationsInput | string | null
    streakCount?: IntFieldUpdateOperationsInput | number
    totalDays?: IntFieldUpdateOperationsInput | number
    mulligansUsed?: IntFieldUpdateOperationsInput | number
    maxMulligans?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    partnership?: PartnershipUpdateOneRequiredWithoutHabitsNestedInput
  }

  export type HabitUncheckedUpdateWithoutChallengesInput = {
    id?: StringFieldUpdateOperationsInput | string
    partnershipId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    customDays?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHabitStatusFieldUpdateOperationsInput | $Enums.HabitStatus
    currentTurn?: NullableStringFieldUpdateOperationsInput | string | null
    streakCount?: IntFieldUpdateOperationsInput | number
    totalDays?: IntFieldUpdateOperationsInput | number
    mulligansUsed?: IntFieldUpdateOperationsInput | number
    maxMulligans?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutChallengesCreatedInput = {
    update: XOR<UserUpdateWithoutChallengesCreatedInput, UserUncheckedUpdateWithoutChallengesCreatedInput>
    create: XOR<UserCreateWithoutChallengesCreatedInput, UserUncheckedCreateWithoutChallengesCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChallengesCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChallengesCreatedInput, UserUncheckedUpdateWithoutChallengesCreatedInput>
  }

  export type UserUpdateWithoutChallengesCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUpdateManyWithoutReceiverNestedInput
    challengeCompletions?: ChallengeCompletionUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutChallengesCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUncheckedUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUncheckedUpdateManyWithoutReceiverNestedInput
    challengeCompletions?: ChallengeCompletionUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUncheckedUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUncheckedUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUncheckedUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type ChallengeCompletionUpsertWithWhereUniqueWithoutChallengeInput = {
    where: ChallengeCompletionWhereUniqueInput
    update: XOR<ChallengeCompletionUpdateWithoutChallengeInput, ChallengeCompletionUncheckedUpdateWithoutChallengeInput>
    create: XOR<ChallengeCompletionCreateWithoutChallengeInput, ChallengeCompletionUncheckedCreateWithoutChallengeInput>
  }

  export type ChallengeCompletionUpdateWithWhereUniqueWithoutChallengeInput = {
    where: ChallengeCompletionWhereUniqueInput
    data: XOR<ChallengeCompletionUpdateWithoutChallengeInput, ChallengeCompletionUncheckedUpdateWithoutChallengeInput>
  }

  export type ChallengeCompletionUpdateManyWithWhereWithoutChallengeInput = {
    where: ChallengeCompletionScalarWhereInput
    data: XOR<ChallengeCompletionUpdateManyMutationInput, ChallengeCompletionUncheckedUpdateManyWithoutChallengeInput>
  }

  export type ChallengeCreateWithoutCompletionsInput = {
    id?: string
    title: string
    description?: string | null
    dueDate: Date | string
    status?: $Enums.ChallengeStatus
    createdAt?: Date | string
    habit: HabitCreateNestedOneWithoutChallengesInput
    creator: UserCreateNestedOneWithoutChallengesCreatedInput
  }

  export type ChallengeUncheckedCreateWithoutCompletionsInput = {
    id?: string
    habitId: string
    creatorId: string
    title: string
    description?: string | null
    dueDate: Date | string
    status?: $Enums.ChallengeStatus
    createdAt?: Date | string
  }

  export type ChallengeCreateOrConnectWithoutCompletionsInput = {
    where: ChallengeWhereUniqueInput
    create: XOR<ChallengeCreateWithoutCompletionsInput, ChallengeUncheckedCreateWithoutCompletionsInput>
  }

  export type UserCreateWithoutChallengeCompletionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeCreateNestedManyWithoutCreatorInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionCreateNestedManyWithoutUserInput
    sentNudges?: NudgeCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutChallengeCompletionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeUncheckedCreateNestedManyWithoutCreatorInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostUncheckedCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionUncheckedCreateNestedManyWithoutUserInput
    sentNudges?: NudgeUncheckedCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutChallengeCompletionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChallengeCompletionsInput, UserUncheckedCreateWithoutChallengeCompletionsInput>
  }

  export type ChallengeUpsertWithoutCompletionsInput = {
    update: XOR<ChallengeUpdateWithoutCompletionsInput, ChallengeUncheckedUpdateWithoutCompletionsInput>
    create: XOR<ChallengeCreateWithoutCompletionsInput, ChallengeUncheckedCreateWithoutCompletionsInput>
    where?: ChallengeWhereInput
  }

  export type ChallengeUpdateToOneWithWhereWithoutCompletionsInput = {
    where?: ChallengeWhereInput
    data: XOR<ChallengeUpdateWithoutCompletionsInput, ChallengeUncheckedUpdateWithoutCompletionsInput>
  }

  export type ChallengeUpdateWithoutCompletionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumChallengeStatusFieldUpdateOperationsInput | $Enums.ChallengeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habit?: HabitUpdateOneRequiredWithoutChallengesNestedInput
    creator?: UserUpdateOneRequiredWithoutChallengesCreatedNestedInput
  }

  export type ChallengeUncheckedUpdateWithoutCompletionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    habitId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumChallengeStatusFieldUpdateOperationsInput | $Enums.ChallengeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutChallengeCompletionsInput = {
    update: XOR<UserUpdateWithoutChallengeCompletionsInput, UserUncheckedUpdateWithoutChallengeCompletionsInput>
    create: XOR<UserCreateWithoutChallengeCompletionsInput, UserUncheckedCreateWithoutChallengeCompletionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChallengeCompletionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChallengeCompletionsInput, UserUncheckedUpdateWithoutChallengeCompletionsInput>
  }

  export type UserUpdateWithoutChallengeCompletionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUpdateManyWithoutCreatorNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutChallengeCompletionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUncheckedUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUncheckedUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUncheckedUpdateManyWithoutCreatorNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUncheckedUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUncheckedUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUncheckedUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type PartnershipCreateWithoutMessagesInput = {
    id?: string
    status?: $Enums.PartnershipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    initiator: UserCreateNestedOneWithoutInitiatedPartnershipsInput
    receiver: UserCreateNestedOneWithoutReceivedPartnershipsInput
    habits?: HabitCreateNestedManyWithoutPartnershipInput
  }

  export type PartnershipUncheckedCreateWithoutMessagesInput = {
    id?: string
    initiatorId: string
    receiverId: string
    status?: $Enums.PartnershipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitUncheckedCreateNestedManyWithoutPartnershipInput
  }

  export type PartnershipCreateOrConnectWithoutMessagesInput = {
    where: PartnershipWhereUniqueInput
    create: XOR<PartnershipCreateWithoutMessagesInput, PartnershipUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutSentMessagesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionCreateNestedManyWithoutUserInput
    inspirationPosts?: InspirationPostCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionCreateNestedManyWithoutUserInput
    sentNudges?: NudgeCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutSentMessagesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeUncheckedCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionUncheckedCreateNestedManyWithoutUserInput
    inspirationPosts?: InspirationPostUncheckedCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionUncheckedCreateNestedManyWithoutUserInput
    sentNudges?: NudgeUncheckedCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutSentMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
  }

  export type PartnershipUpsertWithoutMessagesInput = {
    update: XOR<PartnershipUpdateWithoutMessagesInput, PartnershipUncheckedUpdateWithoutMessagesInput>
    create: XOR<PartnershipCreateWithoutMessagesInput, PartnershipUncheckedCreateWithoutMessagesInput>
    where?: PartnershipWhereInput
  }

  export type PartnershipUpdateToOneWithWhereWithoutMessagesInput = {
    where?: PartnershipWhereInput
    data: XOR<PartnershipUpdateWithoutMessagesInput, PartnershipUncheckedUpdateWithoutMessagesInput>
  }

  export type PartnershipUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumPartnershipStatusFieldUpdateOperationsInput | $Enums.PartnershipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiator?: UserUpdateOneRequiredWithoutInitiatedPartnershipsNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedPartnershipsNestedInput
    habits?: HabitUpdateManyWithoutPartnershipNestedInput
  }

  export type PartnershipUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: EnumPartnershipStatusFieldUpdateOperationsInput | $Enums.PartnershipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUncheckedUpdateManyWithoutPartnershipNestedInput
  }

  export type UserUpsertWithoutSentMessagesInput = {
    update: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUpdateManyWithoutUserNestedInput
    inspirationPosts?: InspirationPostUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUncheckedUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUncheckedUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUncheckedUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUncheckedUpdateManyWithoutUserNestedInput
    inspirationPosts?: InspirationPostUncheckedUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUncheckedUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUncheckedUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutSentNudgesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionCreateNestedManyWithoutUserInput
    receivedNudges?: NudgeCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutSentNudgesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeUncheckedCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostUncheckedCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionUncheckedCreateNestedManyWithoutUserInput
    receivedNudges?: NudgeUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutSentNudgesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentNudgesInput, UserUncheckedCreateWithoutSentNudgesInput>
  }

  export type UserCreateWithoutReceivedNudgesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionCreateNestedManyWithoutUserInput
    sentNudges?: NudgeCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutReceivedNudgesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeUncheckedCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostUncheckedCreateNestedManyWithoutAuthorInput
    inspirationReactions?: InspirationReactionUncheckedCreateNestedManyWithoutUserInput
    sentNudges?: NudgeUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutReceivedNudgesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedNudgesInput, UserUncheckedCreateWithoutReceivedNudgesInput>
  }

  export type UserUpsertWithoutSentNudgesInput = {
    update: XOR<UserUpdateWithoutSentNudgesInput, UserUncheckedUpdateWithoutSentNudgesInput>
    create: XOR<UserCreateWithoutSentNudgesInput, UserUncheckedCreateWithoutSentNudgesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentNudgesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentNudgesInput, UserUncheckedUpdateWithoutSentNudgesInput>
  }

  export type UserUpdateWithoutSentNudgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUpdateManyWithoutUserNestedInput
    receivedNudges?: NudgeUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutSentNudgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUncheckedUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUncheckedUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUncheckedUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUncheckedUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUncheckedUpdateManyWithoutUserNestedInput
    receivedNudges?: NudgeUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserUpsertWithoutReceivedNudgesInput = {
    update: XOR<UserUpdateWithoutReceivedNudgesInput, UserUncheckedUpdateWithoutReceivedNudgesInput>
    create: XOR<UserCreateWithoutReceivedNudgesInput, UserUncheckedCreateWithoutReceivedNudgesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedNudgesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedNudgesInput, UserUncheckedUpdateWithoutReceivedNudgesInput>
  }

  export type UserUpdateWithoutReceivedNudgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedNudgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUncheckedUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUncheckedUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUncheckedUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUncheckedUpdateManyWithoutAuthorNestedInput
    inspirationReactions?: InspirationReactionUncheckedUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type UserCreateWithoutInspirationPostsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    inspirationReactions?: InspirationReactionCreateNestedManyWithoutUserInput
    sentNudges?: NudgeCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutInspirationPostsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeUncheckedCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    inspirationReactions?: InspirationReactionUncheckedCreateNestedManyWithoutUserInput
    sentNudges?: NudgeUncheckedCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutInspirationPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInspirationPostsInput, UserUncheckedCreateWithoutInspirationPostsInput>
  }

  export type InspirationReactionCreateWithoutPostInput = {
    id?: string
    reaction: $Enums.ReactionType
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutInspirationReactionsInput
  }

  export type InspirationReactionUncheckedCreateWithoutPostInput = {
    id?: string
    userId: string
    reaction: $Enums.ReactionType
    createdAt?: Date | string
  }

  export type InspirationReactionCreateOrConnectWithoutPostInput = {
    where: InspirationReactionWhereUniqueInput
    create: XOR<InspirationReactionCreateWithoutPostInput, InspirationReactionUncheckedCreateWithoutPostInput>
  }

  export type InspirationReactionCreateManyPostInputEnvelope = {
    data: InspirationReactionCreateManyPostInput | InspirationReactionCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutInspirationPostsInput = {
    update: XOR<UserUpdateWithoutInspirationPostsInput, UserUncheckedUpdateWithoutInspirationPostsInput>
    create: XOR<UserCreateWithoutInspirationPostsInput, UserUncheckedCreateWithoutInspirationPostsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInspirationPostsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInspirationPostsInput, UserUncheckedUpdateWithoutInspirationPostsInput>
  }

  export type UserUpdateWithoutInspirationPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    inspirationReactions?: InspirationReactionUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutInspirationPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUncheckedUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUncheckedUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUncheckedUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    inspirationReactions?: InspirationReactionUncheckedUpdateManyWithoutUserNestedInput
    sentNudges?: NudgeUncheckedUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type InspirationReactionUpsertWithWhereUniqueWithoutPostInput = {
    where: InspirationReactionWhereUniqueInput
    update: XOR<InspirationReactionUpdateWithoutPostInput, InspirationReactionUncheckedUpdateWithoutPostInput>
    create: XOR<InspirationReactionCreateWithoutPostInput, InspirationReactionUncheckedCreateWithoutPostInput>
  }

  export type InspirationReactionUpdateWithWhereUniqueWithoutPostInput = {
    where: InspirationReactionWhereUniqueInput
    data: XOR<InspirationReactionUpdateWithoutPostInput, InspirationReactionUncheckedUpdateWithoutPostInput>
  }

  export type InspirationReactionUpdateManyWithWhereWithoutPostInput = {
    where: InspirationReactionScalarWhereInput
    data: XOR<InspirationReactionUpdateManyMutationInput, InspirationReactionUncheckedUpdateManyWithoutPostInput>
  }

  export type InspirationPostCreateWithoutReactionsInput = {
    id?: string
    content: string
    category?: string | null
    isAnonymous?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutInspirationPostsInput
  }

  export type InspirationPostUncheckedCreateWithoutReactionsInput = {
    id?: string
    authorId: string
    content: string
    category?: string | null
    isAnonymous?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type InspirationPostCreateOrConnectWithoutReactionsInput = {
    where: InspirationPostWhereUniqueInput
    create: XOR<InspirationPostCreateWithoutReactionsInput, InspirationPostUncheckedCreateWithoutReactionsInput>
  }

  export type UserCreateWithoutInspirationReactionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostCreateNestedManyWithoutAuthorInput
    sentNudges?: NudgeCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutInspirationReactionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    username?: string | null
    password?: string | null
    inviteCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timezone?: string
    reminderTime?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    initiatedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutInitiatorInput
    receivedPartnerships?: PartnershipUncheckedCreateNestedManyWithoutReceiverInput
    challengesCreated?: ChallengeUncheckedCreateNestedManyWithoutCreatorInput
    challengeCompletions?: ChallengeCompletionUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    inspirationPosts?: InspirationPostUncheckedCreateNestedManyWithoutAuthorInput
    sentNudges?: NudgeUncheckedCreateNestedManyWithoutSenderInput
    receivedNudges?: NudgeUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutInspirationReactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInspirationReactionsInput, UserUncheckedCreateWithoutInspirationReactionsInput>
  }

  export type InspirationPostUpsertWithoutReactionsInput = {
    update: XOR<InspirationPostUpdateWithoutReactionsInput, InspirationPostUncheckedUpdateWithoutReactionsInput>
    create: XOR<InspirationPostCreateWithoutReactionsInput, InspirationPostUncheckedCreateWithoutReactionsInput>
    where?: InspirationPostWhereInput
  }

  export type InspirationPostUpdateToOneWithWhereWithoutReactionsInput = {
    where?: InspirationPostWhereInput
    data: XOR<InspirationPostUpdateWithoutReactionsInput, InspirationPostUncheckedUpdateWithoutReactionsInput>
  }

  export type InspirationPostUpdateWithoutReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutInspirationPostsNestedInput
  }

  export type InspirationPostUncheckedUpdateWithoutReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutInspirationReactionsInput = {
    update: XOR<UserUpdateWithoutInspirationReactionsInput, UserUncheckedUpdateWithoutInspirationReactionsInput>
    create: XOR<UserCreateWithoutInspirationReactionsInput, UserUncheckedCreateWithoutInspirationReactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInspirationReactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInspirationReactionsInput, UserUncheckedUpdateWithoutInspirationReactionsInput>
  }

  export type UserUpdateWithoutInspirationReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUpdateManyWithoutAuthorNestedInput
    sentNudges?: NudgeUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutInspirationReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: StringFieldUpdateOperationsInput | string
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    initiatedPartnerships?: PartnershipUncheckedUpdateManyWithoutInitiatorNestedInput
    receivedPartnerships?: PartnershipUncheckedUpdateManyWithoutReceiverNestedInput
    challengesCreated?: ChallengeUncheckedUpdateManyWithoutCreatorNestedInput
    challengeCompletions?: ChallengeCompletionUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    inspirationPosts?: InspirationPostUncheckedUpdateManyWithoutAuthorNestedInput
    sentNudges?: NudgeUncheckedUpdateManyWithoutSenderNestedInput
    receivedNudges?: NudgeUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type PartnershipCreateManyInitiatorInput = {
    id?: string
    receiverId: string
    status?: $Enums.PartnershipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartnershipCreateManyReceiverInput = {
    id?: string
    initiatorId: string
    status?: $Enums.PartnershipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChallengeCreateManyCreatorInput = {
    id?: string
    habitId: string
    title: string
    description?: string | null
    dueDate: Date | string
    status?: $Enums.ChallengeStatus
    createdAt?: Date | string
  }

  export type ChallengeCompletionCreateManyUserInput = {
    id?: string
    challengeId: string
    status?: $Enums.CompletionStatus
    completedAt?: Date | string
    feelingTags?: string | null
    reflectionNote?: string | null
    reflectionPrompt?: string | null
  }

  export type MessageCreateManySenderInput = {
    id?: string
    partnershipId: string
    content: string
    messageType?: $Enums.MessageType
    createdAt?: Date | string
  }

  export type InspirationPostCreateManyAuthorInput = {
    id?: string
    content: string
    category?: string | null
    isAnonymous?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type InspirationReactionCreateManyUserInput = {
    id?: string
    postId: string
    reaction: $Enums.ReactionType
    createdAt?: Date | string
  }

  export type NudgeCreateManySenderInput = {
    id?: string
    receiverId: string
    nudgeType: $Enums.NudgeType
    message?: string | null
    createdAt?: Date | string
  }

  export type NudgeCreateManyReceiverInput = {
    id?: string
    senderId: string
    nudgeType: $Enums.NudgeType
    message?: string | null
    createdAt?: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnershipUpdateWithoutInitiatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumPartnershipStatusFieldUpdateOperationsInput | $Enums.PartnershipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiver?: UserUpdateOneRequiredWithoutReceivedPartnershipsNestedInput
    habits?: HabitUpdateManyWithoutPartnershipNestedInput
    messages?: MessageUpdateManyWithoutPartnershipNestedInput
  }

  export type PartnershipUncheckedUpdateWithoutInitiatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: EnumPartnershipStatusFieldUpdateOperationsInput | $Enums.PartnershipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUncheckedUpdateManyWithoutPartnershipNestedInput
    messages?: MessageUncheckedUpdateManyWithoutPartnershipNestedInput
  }

  export type PartnershipUncheckedUpdateManyWithoutInitiatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: EnumPartnershipStatusFieldUpdateOperationsInput | $Enums.PartnershipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnershipUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumPartnershipStatusFieldUpdateOperationsInput | $Enums.PartnershipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiator?: UserUpdateOneRequiredWithoutInitiatedPartnershipsNestedInput
    habits?: HabitUpdateManyWithoutPartnershipNestedInput
    messages?: MessageUpdateManyWithoutPartnershipNestedInput
  }

  export type PartnershipUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    status?: EnumPartnershipStatusFieldUpdateOperationsInput | $Enums.PartnershipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUncheckedUpdateManyWithoutPartnershipNestedInput
    messages?: MessageUncheckedUpdateManyWithoutPartnershipNestedInput
  }

  export type PartnershipUncheckedUpdateManyWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    status?: EnumPartnershipStatusFieldUpdateOperationsInput | $Enums.PartnershipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumChallengeStatusFieldUpdateOperationsInput | $Enums.ChallengeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habit?: HabitUpdateOneRequiredWithoutChallengesNestedInput
    completions?: ChallengeCompletionUpdateManyWithoutChallengeNestedInput
  }

  export type ChallengeUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    habitId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumChallengeStatusFieldUpdateOperationsInput | $Enums.ChallengeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completions?: ChallengeCompletionUncheckedUpdateManyWithoutChallengeNestedInput
  }

  export type ChallengeUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    habitId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumChallengeStatusFieldUpdateOperationsInput | $Enums.ChallengeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeCompletionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumCompletionStatusFieldUpdateOperationsInput | $Enums.CompletionStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feelingTags?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionNote?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    challenge?: ChallengeUpdateOneRequiredWithoutCompletionsNestedInput
  }

  export type ChallengeCompletionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    status?: EnumCompletionStatusFieldUpdateOperationsInput | $Enums.CompletionStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feelingTags?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionNote?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionPrompt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChallengeCompletionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    status?: EnumCompletionStatusFieldUpdateOperationsInput | $Enums.CompletionStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feelingTags?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionNote?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionPrompt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    partnership?: PartnershipUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    partnershipId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    partnershipId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InspirationPostUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reactions?: InspirationReactionUpdateManyWithoutPostNestedInput
  }

  export type InspirationPostUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reactions?: InspirationReactionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type InspirationPostUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InspirationReactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reaction?: EnumReactionTypeFieldUpdateOperationsInput | $Enums.ReactionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: InspirationPostUpdateOneRequiredWithoutReactionsNestedInput
  }

  export type InspirationReactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    reaction?: EnumReactionTypeFieldUpdateOperationsInput | $Enums.ReactionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InspirationReactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    reaction?: EnumReactionTypeFieldUpdateOperationsInput | $Enums.ReactionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NudgeUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    nudgeType?: EnumNudgeTypeFieldUpdateOperationsInput | $Enums.NudgeType
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiver?: UserUpdateOneRequiredWithoutReceivedNudgesNestedInput
  }

  export type NudgeUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    nudgeType?: EnumNudgeTypeFieldUpdateOperationsInput | $Enums.NudgeType
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NudgeUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    nudgeType?: EnumNudgeTypeFieldUpdateOperationsInput | $Enums.NudgeType
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NudgeUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    nudgeType?: EnumNudgeTypeFieldUpdateOperationsInput | $Enums.NudgeType
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentNudgesNestedInput
  }

  export type NudgeUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    nudgeType?: EnumNudgeTypeFieldUpdateOperationsInput | $Enums.NudgeType
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NudgeUncheckedUpdateManyWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    nudgeType?: EnumNudgeTypeFieldUpdateOperationsInput | $Enums.NudgeType
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitCreateManyPartnershipInput = {
    id?: string
    name: string
    category?: string | null
    frequency?: string
    customDays?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.HabitStatus
    currentTurn?: string | null
    streakCount?: number
    totalDays?: number
    mulligansUsed?: number
    maxMulligans?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageCreateManyPartnershipInput = {
    id?: string
    senderId: string
    content: string
    messageType?: $Enums.MessageType
    createdAt?: Date | string
  }

  export type HabitUpdateWithoutPartnershipInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    customDays?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHabitStatusFieldUpdateOperationsInput | $Enums.HabitStatus
    currentTurn?: NullableStringFieldUpdateOperationsInput | string | null
    streakCount?: IntFieldUpdateOperationsInput | number
    totalDays?: IntFieldUpdateOperationsInput | number
    mulligansUsed?: IntFieldUpdateOperationsInput | number
    maxMulligans?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    challenges?: ChallengeUpdateManyWithoutHabitNestedInput
  }

  export type HabitUncheckedUpdateWithoutPartnershipInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    customDays?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHabitStatusFieldUpdateOperationsInput | $Enums.HabitStatus
    currentTurn?: NullableStringFieldUpdateOperationsInput | string | null
    streakCount?: IntFieldUpdateOperationsInput | number
    totalDays?: IntFieldUpdateOperationsInput | number
    mulligansUsed?: IntFieldUpdateOperationsInput | number
    maxMulligans?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    challenges?: ChallengeUncheckedUpdateManyWithoutHabitNestedInput
  }

  export type HabitUncheckedUpdateManyWithoutPartnershipInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    customDays?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHabitStatusFieldUpdateOperationsInput | $Enums.HabitStatus
    currentTurn?: NullableStringFieldUpdateOperationsInput | string | null
    streakCount?: IntFieldUpdateOperationsInput | number
    totalDays?: IntFieldUpdateOperationsInput | number
    mulligansUsed?: IntFieldUpdateOperationsInput | number
    maxMulligans?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutPartnershipInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutPartnershipInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutPartnershipInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeCreateManyHabitInput = {
    id?: string
    creatorId: string
    title: string
    description?: string | null
    dueDate: Date | string
    status?: $Enums.ChallengeStatus
    createdAt?: Date | string
  }

  export type ChallengeUpdateWithoutHabitInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumChallengeStatusFieldUpdateOperationsInput | $Enums.ChallengeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutChallengesCreatedNestedInput
    completions?: ChallengeCompletionUpdateManyWithoutChallengeNestedInput
  }

  export type ChallengeUncheckedUpdateWithoutHabitInput = {
    id?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumChallengeStatusFieldUpdateOperationsInput | $Enums.ChallengeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completions?: ChallengeCompletionUncheckedUpdateManyWithoutChallengeNestedInput
  }

  export type ChallengeUncheckedUpdateManyWithoutHabitInput = {
    id?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumChallengeStatusFieldUpdateOperationsInput | $Enums.ChallengeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeCompletionCreateManyChallengeInput = {
    id?: string
    userId: string
    status?: $Enums.CompletionStatus
    completedAt?: Date | string
    feelingTags?: string | null
    reflectionNote?: string | null
    reflectionPrompt?: string | null
  }

  export type ChallengeCompletionUpdateWithoutChallengeInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumCompletionStatusFieldUpdateOperationsInput | $Enums.CompletionStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feelingTags?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionNote?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutChallengeCompletionsNestedInput
  }

  export type ChallengeCompletionUncheckedUpdateWithoutChallengeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumCompletionStatusFieldUpdateOperationsInput | $Enums.CompletionStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feelingTags?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionNote?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionPrompt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChallengeCompletionUncheckedUpdateManyWithoutChallengeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumCompletionStatusFieldUpdateOperationsInput | $Enums.CompletionStatus
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feelingTags?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionNote?: NullableStringFieldUpdateOperationsInput | string | null
    reflectionPrompt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InspirationReactionCreateManyPostInput = {
    id?: string
    userId: string
    reaction: $Enums.ReactionType
    createdAt?: Date | string
  }

  export type InspirationReactionUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    reaction?: EnumReactionTypeFieldUpdateOperationsInput | $Enums.ReactionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInspirationReactionsNestedInput
  }

  export type InspirationReactionUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reaction?: EnumReactionTypeFieldUpdateOperationsInput | $Enums.ReactionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InspirationReactionUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reaction?: EnumReactionTypeFieldUpdateOperationsInput | $Enums.ReactionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PartnershipCountOutputTypeDefaultArgs instead
     */
    export type PartnershipCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PartnershipCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HabitCountOutputTypeDefaultArgs instead
     */
    export type HabitCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HabitCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChallengeCountOutputTypeDefaultArgs instead
     */
    export type ChallengeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChallengeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InspirationPostCountOutputTypeDefaultArgs instead
     */
    export type InspirationPostCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InspirationPostCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VerificationTokenDefaultArgs instead
     */
    export type VerificationTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VerificationTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PartnershipDefaultArgs instead
     */
    export type PartnershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PartnershipDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HabitDefaultArgs instead
     */
    export type HabitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HabitDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChallengeDefaultArgs instead
     */
    export type ChallengeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChallengeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChallengeCompletionDefaultArgs instead
     */
    export type ChallengeCompletionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChallengeCompletionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NudgeDefaultArgs instead
     */
    export type NudgeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NudgeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InspirationPostDefaultArgs instead
     */
    export type InspirationPostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InspirationPostDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InspirationReactionDefaultArgs instead
     */
    export type InspirationReactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InspirationReactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BadgeDefaultArgs instead
     */
    export type BadgeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BadgeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserBadgeDefaultArgs instead
     */
    export type UserBadgeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserBadgeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}