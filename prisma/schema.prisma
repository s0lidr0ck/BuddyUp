// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  password      String?   // For password authentication
  inviteCode    String?   @unique @default(cuid()) // Personal invite link
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Preferences
  timezone      String    @default("UTC")
  reminderTime  String?   // Format: "HH:mm"
  
  // Account relations
  accounts      Account[]
  sessions      Session[]
  
  // Partnership relations
  initiatedPartnerships Partnership[] @relation("PartnershipInitiator")
  receivedPartnerships  Partnership[] @relation("PartnershipReceiver")
  
  // Challenge relations
  challengesCreated     Challenge[] @relation("ChallengeCreator")
  challengeCompletions  ChallengeCompletion[]
  
  // Chat relations
  sentMessages      Message[] @relation("MessageSender")
  
  // Inspiration posts
  inspirationPosts  InspirationPost[]
  inspirationReactions InspirationReaction[]
  
  // Nudges
  sentNudges        Nudge[] @relation("NudgeSender")
  receivedNudges    Nudge[] @relation("NudgeReceiver")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Partnership {
  id            String            @id @default(cuid())
  initiatorId   String
  receiverId    String
  status        PartnershipStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  // Relations
  initiator     User              @relation("PartnershipInitiator", fields: [initiatorId], references: [id])
  receiver      User              @relation("PartnershipReceiver", fields: [receiverId], references: [id])
  habits        Habit[]           // Multiple habits per partnership
  messages      Message[]
  
  @@unique([initiatorId, receiverId])
}

model Habit {
  id            String      @id @default(cuid())
  partnershipId String
  name          String
  category      String?
  frequency     String      @default("DAILY") // DAILY, WEEKDAYS, CUSTOM
  customDays    String?     // JSON array of day numbers if custom
  duration      Int?        // Days (null = forever)
  startDate     DateTime?
  endDate       DateTime?
  status        HabitStatus @default(ACTIVE)
  
  // Current state
  currentTurn   String?     // User ID whose turn it is to set goal
  streakCount   Int         @default(0)
  totalDays     Int         @default(0)
  mulligansUsed Int         @default(0)
  maxMulligans  Int         @default(1)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  partnership   Partnership @relation(fields: [partnershipId], references: [id])
  challenges    Challenge[]
  
  @@index([partnershipId])
}

model Challenge {
  id           String      @id @default(cuid())
  habitId      String
  creatorId    String
  title        String
  description  String?
  dueDate      DateTime
  status       ChallengeStatus @default(ACTIVE)
  createdAt    DateTime    @default(now())
  
  // Relations
  habit        Habit       @relation(fields: [habitId], references: [id])
  creator      User        @relation("ChallengeCreator", fields: [creatorId], references: [id])
  completions  ChallengeCompletion[]
  
  @@index([habitId])
  @@index([dueDate])
}

model ChallengeCompletion {
  id           String    @id @default(cuid())
  challengeId  String
  userId       String
  status       CompletionStatus @default(COMPLETED)
  completedAt  DateTime  @default(now())
  
  // Reflection data
  feelingTags  String?   // JSON array of selected feeling tags
  reflectionNote String?
  reflectionPrompt String?
  
  // Relations
  challenge    Challenge @relation(fields: [challengeId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
  
  @@unique([challengeId, userId])
}

model Message {
  id           String    @id @default(cuid())
  partnershipId String
  senderId     String
  content      String
  messageType  MessageType @default(TEXT)
  createdAt    DateTime  @default(now())
  
  // Relations
  partnership  Partnership @relation(fields: [partnershipId], references: [id])
  sender       User        @relation("MessageSender", fields: [senderId], references: [id])
  
  @@index([partnershipId])
}

model Nudge {
  id          String    @id @default(cuid())
  senderId    String
  receiverId  String
  nudgeType   NudgeType
  message     String?
  createdAt   DateTime  @default(now())
  
  // Relations
  sender      User      @relation("NudgeSender", fields: [senderId], references: [id])
  receiver    User      @relation("NudgeReceiver", fields: [receiverId], references: [id])
}

model InspirationPost {
  id          String    @id @default(cuid())
  authorId    String
  content     String
  category    String?
  isAnonymous Boolean   @default(true)
  expiresAt   DateTime  // Auto-expire after 48 hours
  createdAt   DateTime  @default(now())
  
  // Relations
  author      User      @relation(fields: [authorId], references: [id])
  reactions   InspirationReaction[]
  
  @@index([expiresAt])
}

model InspirationReaction {
  id       String      @id @default(cuid())
  postId   String
  userId   String
  reaction ReactionType
  createdAt DateTime   @default(now())
  
  // Relations
  post     InspirationPost @relation(fields: [postId], references: [id])
  user     User            @relation(fields: [userId], references: [id])
  
  @@unique([postId, userId])
}

model Badge {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  iconName    String    // Icon identifier
  category    BadgeCategory
  requirement String    // Description of how to earn
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  
  @@unique([userId, badgeId])
}

// Enums
enum PartnershipStatus {
  PENDING
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum HabitStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ChallengeStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  SKIPPED
}

enum CompletionStatus {
  COMPLETED
  MISSED
  SKIPPED
}

enum MessageType {
  TEXT
  STICKER
  SYSTEM
}

enum NudgeType {
  ENCOURAGEMENT
  REMINDER
  CELEBRATION
  CUSTOM
}

enum ReactionType {
  HEART
  LAUGH
  PRAY
}

enum BadgeCategory {
  STREAK
  MILESTONE
  ENCOURAGEMENT
  SPECIAL
} 